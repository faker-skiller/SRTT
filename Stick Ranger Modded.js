/*
 Copyright (C) 2008 ha55ii,http://dan-ball.jp/
 The games source code use is prohibition.
*/

// Stick Ranger 18.9

/*    Changes:
 Added debug mode to options
 Investing SP shows indicators (AT+, Cost-, DEF+)
 Element descriptions are in color
 Lowercase letters
 Other numerous UI changes; none of which change gameplay, navagation, controls, etc.
 Anticheat sends error messages to console instead of locking the game
 New Game with the crown now finds crowns on equipped weapons

   The following can be commented out to restore original mechanics (search for "fix")
 Right click and hold (instead of hovering) to edges to scroll map
 Enemies above Priest's vertical range won't trigger walking movement
 Stickmen can still attack from up to 8 pixels off the Ground
*/

/*    Errors:
 error 1: text spaced incorrectly on world map and character select
 error 2: stickmen on the surface of the water won't swim down if a target is below
 error 3: anti-cheat before/after mismatch
 error 4: beating desert 2 and 4 after get/set shows beating desert 3 instead (save code error)
*/

/*    To Do list:
 translate lh
 swimming around vertical walls up/down
 highlight indicators of critical hits
 desert animation
 add level 1-4 medals to island compo shop
 find out what the loadGame() values are
*/

/*    Comment out before releasing (search for "testing")
 stickmen regen
 screen transition skip
 exp fill
 un-comment logCopyright
*/

// search for "reference" to find information
// regex search for "var1.+original name" to find original name (names like ca, ea, fa) of var1

// general order: left,right,top,bottom,x_pos,y_pos,width,height
var Prologue = false;
var Dodge_Cooldown = 0;
var Dodging = false;
var Dodge_Unlocked = false;
var Debug_Mode = 0;                        // display debug mode on/off       original name: ca
var DIRE_curr_sequence = ["0: Title Screen: launch game","1: Title Screen: spawn stickmen","2: Title Screen: enable buttons","3: Title Screen: class select","4: Title Screen: load new game","5: Title Screen: load saved game","6: Title Screen: world map","","","","10: Enemy Screen: load screen","11: Enemy Screen: fade in","12: Enemy Screen: play","13: Enemy Screen: fade out","","","","","","","20: Enemy Screen: pause","","","","","","","","","","30: Enemy Screen: game over","","","","","","","","","","40: Enemy Screen: game clear","","","","","","","","","","50: Town Screen: load screen","51: Town Screen: fade in","52: Town Screen: play","53: Town Screen: open shop","54: Town Screen: open book","55: Town Screen: open forget","","","","59: Town Screen: fade out","60: VS Mode Screen: ","61: VS Mode Screen: ","62: VS Mode Screen: ","63: VS Mode Screen: ","64: VS Mode Screen: ","","","","","","70: VS Mode Screen: ","71: VS Mode Screen: ","72: VS Mode Screen: ","73: VS Mode Screen: "];                    // current game mode                (new variable)
var Win_Width = 512;                       // width of game window            original name: ea
var Win_Height = 384;                      // height of game window           original name: fa
//var Win_Width = 880;                       // width of game window            original name: ea
//var Win_Height = 520;                      // height of game window           original name: fa
var DIRE_Inv_Height = 0;                   // height of inventory UI
var DIRE_Inv_Top = Win_Height-DIRE_Inv_Height; // 384-128 = 256
var DIRE_Win_Center = Win_Width>>1;
var Sequence_Timer = 0;
var DIRE_Ticks_Per_Second = 60;            // number of game ticks per second  (new variable)
var Game_Mode = 0;                         // 0: PvE, 1: PvP, 2:upload screen original name: ga
var Game_ID;      // your ID#, checked to see if the save code belongs to you original name: ha
var VS_Player_Team_Text;                   // team ID sent when uploading     original name: la
var Player_Name;                           // your username                   original name: ma
var VS_Player_Team_Name;                   // your team's name                original name: na
var VS_Opponent_Team_ID;                   // opponent team ID                original name: oa
var VS_Opponent_Name;                      // opponent's username             original name: qa
var VS_Opponent_Team_Name;                 // opponent team's name            original name: ra
var VSMODECODE8;                           // VSMODECODE8                     original name: sa
var VS_Upload_Errors = 0;                  // error handler for uploads/day   original name: ua
var VS_Player_Team_ID = 0;                 // player's Team ID, not encoded   original name: va
var VSMODECODE11 = new SR_Image;           // VSMODECODE11                    original name: xa
var VSMODECODE12 = new SR_Image;           // VSMODECODE12                    original name: Aa
var VSMODECODE13 = new SR_Image;           // VSMODECODE13                    original name: Ba
var VSMODECODE14 = new SR_Image;           // VSMODECODE14                    original name: Da
var VSMODECODE15 = new SR_Image;           // VSMODECODE15                    original name: Fa
var VSMODECODE16 = new SR_Image;           // VSMODECODE16                    original name: Ga
var Save_Cookie;                           // save file from player's cookie  original name: Ha
var VS_Opponent_Data;                      // Opponent's team data save code  original name: Ia
var VS_Game_ID_Plain = [0,0,0,0,0,0,0,0];  // plain Game ID used in save code original name: Ka
var Game_Language;                         // Japanese/English/Chinese        original name: La
var Stage_Eff_Canvas = new SR_Image;       // foreground snow and game over   original name: Ma
var Stage_Terrain_Img = new SR_Image;      // background terrain              original name: Na
var Terrain_Textures = Array(13);          // terrain textures                original name: Pa
var Player_Img = new SR_Image;             // stickman weapons and shadow     original name: Qa
var Drop_Img = new SR_Image;               // icons for items when dropped    original name: Ra
var Item_Img = new SR_Image;               // icons for items in inventory    original name: Ua
var Enemy_Head_Img = new SR_Image;         // enemy head images               original name: Va
var Elite_Img = new SR_Image;              // elite head images               
var Sign_Img = new SR_Image;               // blank sign icon                 original name: Wa
var Projectiles_Img = new SR_Image;        // images for all projectiles      original name: Za
var Title_Img = new SR_Image;              // main menu title                 original name: $a
var Effect_Img = new SR_Image;             // aura and flashlight             original name: cb
var Hut_Img = new SR_Image;                // hut image                       original name: db
var Water_Img = new SR_Image;              // water tile (in stage not map)   original name: fb
var Water_Red_Img = new SR_Image;          // red water tile                  original name: gb
var Forget_Tree_Img = new SR_Image;        // forget tree image               original name: hb
var Map_Elev_Index = new SR_Image;         // elevation index                 original name: ib
var Map_Tiles_Img = new SR_Image;          // land/rock/sand image            original name: jb
var Map_Feature_Index = new SR_Image;      // feature index                   original name: kb
var Map_Features_Img = new SR_Image;       // tree/castle/cave image          original name: lb
var Moon_Img = new SR_Image;
var Eclipse_Img = new SR_Image;
var Wood_Img = new SR_Image;
var Control_Img = new SR_Image;
// Audio vars
var playedBGM = false,
    playedSound = false,
    sfxEnabled = true;
// Sounds
    snd_atangel = new Audio('data/audio/sfx/atc_Angel.wav'),
    snd_atboxer = new Audio('data/audio/sfx/atc_Boxer.wav'),
    snd_atglad = new Audio('data/audio/sfx/atc_Gladiator.wav'),
    snd_atgunner = new Audio('data/audio/sfx/atc_Gunner.wav'),
    snd_atmag = new Audio('data/audio/sfx/atc_Magician.wav'),
    snd_atpriest = new Audio('data/audio/sfx/atc_Priest.wav'),
    snd_atsniper = new Audio('data/audio/sfx/atc_Sniper.wav'),
    snd_atwhipper = new Audio('data/audio/sfx/atc_Whipper.wav'),
    snd_deathboss1 = new Audio('data/audio/sfx/Boss.wav'),
    snd_deathboss2 = new Audio('data/audio/sfx/Boss2.wav'),
    snd_casherror = new Audio('data/audio/sfx/casherror.wav'),
    snd_cashregister = new Audio('data/audio/sfx/cashregister.wav'),
    snd_click = new Audio('data/audio/sfx/click.wav'),
    snd_click2 = new Audio('data/audio/sfx/click2.wav'),
    snd_click3 = new Audio('data/audio/sfx/click3.wav'),
    snd_compose = new Audio('data/audio/sfx/compose.wav'),
    snd_deathplayer = new Audio('data/audio/sfx/dead.wav'),
    snd_dmgplayer = new Audio('data/audio/sfx/dmg_Player.wav'),
    snd_fire = new Audio('data/audio/sfx/fire.wav'),
    snd_freeze = new Audio('data/audio/sfx/freeze.wav'),
    snd_gong_finish = new Audio('data/audio/sfx/gong_finish.wav'),
    snd_gong_start = new Audio('data/audio/sfx/gong_start.wav'),
    snd_hotel = new Audio('data/audio/sfx/hotel.wav'),
    snd_ice = new Audio('data/audio/sfx/ice.wav'),
    snd_levelup = new Audio('data/audio/sfx/Levelup.wav'),
    snd_money = new Audio('data/audio/sfx/money.wav'),
    snd_onigiri = new Audio('data/audio/sfx/onigiri.wav'),
    snd_parameter = new Audio('data/audio/sfx/parameter.wav'),
    snd_physical = new Audio('data/audio/sfx/physical.wav'),
    snd_poison = new Audio('data/audio/sfx/poison.wav'),
    snd_rebirth = new Audio('data/audio/sfx/rebirth.wav'),
    snd_sp = new Audio('data/audio/sfx/sp.wav'),
    snd_thunder = new Audio('data/audio/sfx/thunder.wav'),
    snd_weapon = new Audio('data/audio/sfx/weapon.wav'),
    snd_crit = new Audio('data/audio/sfx/clang.wav');
    // BGM
    LevelBGM = [];
    mus_moonsong = new Audio('data/audio/music/Moonsong.mp3');
    mus_restarea = new Audio('data/audio/music/Rest Area.mp3');
    mus_jungle = new Audio('data/audio/music/Akrillic.mp3');
    mus_wetforest = new Audio('data/audio/music/Ancient Ruins.mp3');
    mus_cavewater = new Audio('data/audio/music/Underground Reservoir.mp3');
    mus_boss = new Audio('data/audio/music/Boss.mp3');
    RegisterLevelBGM(mus_moonsong);
    RegisterLevelBGM(mus_restarea);
    RegisterLevelBGM(mus_jungle);
    RegisterLevelBGM(mus_wetforest);
    RegisterLevelBGM(mus_cavewater);
    RegisterLevelBGM(mus_boss);
// Variables
var Sequence_Step = 0;                     // game sequence                   original name: f
var Text_Fade = 0;                         // fadeout timer                   original name: mb
var Current_Stage = 0;                     // ID of stage                     original name: h
var Current_Screen = 0;                    // current screen in stage         original name: nb
var Sign_Touched_Mode = 0;   // 0:sign not hit 1:NEXT sign hit 2:MAP sign hit original name: sb
var Displayed_Object = 0;                  // ID of selected player           original name: l
var Selected_Player = 3;                   // ID of held player               original name: tb
var Mouse_Up = false;                      // left mouse button state         original name: ub
var Char_Num = 0;                          // number ID of character           (new variable)
var Item_Num = 0;                          // number ID of item               original name: vb
var Shop_Row = 0;                          // current shop row                original name: wb
var Shop_Cell = 0;                         // current cell selected in shop   original name: xb
var Book_Page = 0;                         // current page of book             (new variable)
var Items_Per_Page = 10;                   // number of items per book page    (new variable)
var Team_List_Proxy = [0,0,0,0];           // team list placeholder           original name: yb
var Item_Inv_Proxy = [0,0,0,0];            // item inventory placeholder      original name: zb
var Comp1_Inv_Proxy = [0,0,0,0];           // compo 1 placeholder             original name: Ab
var Comp2_Inv_Proxy = [0,0,0,0];           // compo 2 placeholder             original name: Eb
var Target_HP_Current = 0;                 // current LP of target            original name: Fb
var Target_HP_Max = 0;                     // max LP of target                original name: Gb
var En_Count_From_Max = 0;                 // max that can spawn per screen   original name: Hb
var Target_Array_ID = 0;                   // array position of target        original name: Ib
var Click_To_Sell_Mode = 0;                // click to sell mode              original name: Jb
var Forge_Mode = 0;                        // augmenting items                
var Augment_Cost = 0;                      // augment cost
var DIRE_crit_highlight = 0;               // highlight critical hits          (new variable)
var Enemy_Spawn_Scale = 100;               // enemy spawn cap scale (100 means numbers are percentages aka denominator 100) original name: Kb
var DIRE_Enemy_Lim_Mult = 1;               // Enemy Limit Multiplier   ******(WARNING: THIS WILL CAUSE MAJOR LAG)******
var DIRE_Proj_Limit = 1001;                // Projectile Limit         ******(WARNING: THIS WILL CAUSE MAJOR LAG)******
var DIRE_Ind_Limit = 1000;                 // Animated Indicator Limit ******(WARNING: THIS WILL CAUSE MAJOR LAG)******
var Anger_Crown_Lightning = 0;             // Anger_Crown_Lightning           original name: Lb
var LV = [1,1];                            // LV[PvE,PvP] (level)             original name: Mb
var FP = [1,1];                            // FP[PvE,PvP] (Fighting Power)    original name: Nb
var Rank = [0,0];                          // Rank[PvE,PvP]                   original name: $b
var SP = [0,0,0,0,0,0,0,0];                // skill points                    original name: ac
var Team_EXP = 0;                          // experience                      original name: cc
var Team_Gold = 0;                         // gold                            original name: dc
var Team_List = [0,0,0,0,0,0,0,0];         // class ID of each stickman       original name: ec
var Class_Dead = 100;                      // class of dead stickmen           (new variable)
var Class_Compo = 200;                     // class of compo items            original name: Mg
var Class_Pickup = 300;                    // class of gold, onigiri           (new variable)
var Class_Stickman = 0;                    // class of unequipped characters   (new variable)
var LP_Current = [50,50,50,50,50,50,50,50];// LP of each stickman             original name: p
var MP_Bar = [0,0,0,0,0,0,0,0];            // MP of each stickman             original name: fc
var LP_SP = [0,0,0,0,0,0,0,0];             // points in LP of each stickman   original name: gc
var STR_SP = [0,0,0,0,0,0,0,0];            // points in STR of each stickman  original name: hc
var DEX_SP = [0,0,0,0,0,0,0,0];            // points in DEX of each stickman  original name: ic
var MAG_SP = [0,0,0,0,0,0,0,0];            // points in MAG of each stickman  original name: jc
var LP_Max = [50,50,50,50,50,50,50,50];    // max LP of each stickman         original name: kc
var STR = [0,0,0,0,0,0,0,0];               // STR                             original name: lc
var DEX = [0,0,0,0,0,0,0,0];               // DEX                             original name: mc
var MAG = [0,0,0,0,0,0,0,0];               // MAG                             original name: nc
var AT_Min = [0,0,0,0,0,0,0,0];            // minimum AT of each stickman     original name: oc
var AT_Max = [0,0,0,0,0,0,0,0];            // maximum AT of each stickman     original name: pc
var Reloading = [0,0,0,0,0,0,0,0];         // reloading status                new
var Status_Buff = [0,0,0,0,0,0,0,0];       // buff status                     new
var Agi_Min = [0,0,0,0,0,0,0,0];           // minimum AGI of each stickman    original name: qc
var Agi_Max = [0,0,0,0,0,0,0,0];           // maximum AGI of each stickman    original name: rc
var Range = [0,0,0,0,0,0,0,0];             // range of each stickman          original name: tc
var Sett_Auto_Move = [1,1,1,1,1,1,1,1];    // move setting of each stickman   original name: uc
var Sett_Move_If_Dying = 0;                // "move of dying" setting         original name: vc
var Sett_Dmg_Indicators = 0;               // "damage effect" setting         original name: wc
var Sett_LP_Bar_Disp = 0;                  // LP bar on/off                   original name: xc
var Sett_PL_Symbol = 0;                    // symbol for selected player      original name: yc
var Sett_Drag_Dead_Body = 1;               // if dead body parts draggable    original name: zc
var STR_Aura = [0,0,0,0,0,0,0,0];          // STR aura points                 original name: Ac
var DEX_Aura = [0,0,0,0,0,0,0,0];          // DEX aura points                 original name: Bc
var MAG_Aura = [0,0,0,0,0,0,0,0];          // MAG aura points                 original name: Cc
var Dodge_Buff = [0,0,0,0,0,0,0,0];        // Dodge buff                      new
var Berserk_Aura = [0,0,0,0,0,0,0,0];      // Damage aura points              new
var Item_Inv = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];      // Item_Inv[41]    original name: q[]
var Comp1_Inv = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];     // Comp1_Inv[41]   original name: Dc[]
var Comp2_Inv = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];     // Comp2_Inv[41]   original name: Ec[]
var Stickman_Count = 4;                    // number of stickmen               (new variable)
var Stickmen_Slots = 4;                    // first 4 slots are the stickmen  original name: s
var Inv_First = 16;                        // first inventory slot            original name: Fc
var Inv_Last = 40;                         // stored inventory capacity       original name: Gc
var Inv_Size = 41;                         // inventory and held item size    original name: Hc
var Held_Item = Item_Inv[Inv_Last];        // item that is clicked to pick up  (new variable)
var Null_Slot = 59;                        // null slot (aka NG or X)         original name: Ic
var Class_Name_List = "Stickman Boxer Gladiator Sniper Magician Priest Gunner Whipper Angel".split(" "); // Class_Name_List original name: Jc
var Rank_List = "123456789S".split("");    // character list of ranks         original name: Kc
var Item_Name = 0;                         // array element of item name      original name: Mc
var Item_LV = 1;                           // array element of item tier      original name: Nc
var Item_Buy_Price = 2;                    // shop price of item              original name: Oc
var Item_Ico_Sm = 3;                       // drop icon number                original name: Pc
var Item_Ico_Big = 4;                      // inventory icon number           original name: Qc
var Item_Class_ID = 5;                     // class for item/weapon           original name: Rc
var Item_Color = 6;                        // color of item                   original name: Sc
var Ring_HBox_Rate = 7;                    // ring hit frequency               (new variable)
var Priest_Buff = Ring_HBox_Rate;          // priest buff ID                   (new variable)
var Item_Splash = 9;                       // if it has splash DMG (0/1)       (new variable)
var Item_AT_Min = 10;                      // item's minimum damage           original name: Tc
var Item_AT_Max = 11;                      // item's maximum damage           original name: Uc
var Item_Bullet = 12;                      // number of bullets               original name: Vc
var Weap_AGI_Min = 14;                     // min = MAXimum rate of fire      original name: Wc
var Weap_AGI_Max = 15;                     // max = MINimum rate of fire      original name: Xc
var Weap_Range = 16;                       // range                           original name: Yc
var Proj_Color = 19;                       // color of projectile             original name: Zc
var Proj_Lifespan = 27;                    // how long until projectile ends   (new variable)
var Item_Type = 34;                        // element type                    original name: $c
var Item_Type_Para = 35;                   // element parameter               original name: ad
var Weap_MP_Price = 36;                    // MP cost or bullet cost          original name: bd
var Item_Res_Mode = 37;                    // residue mode                    original name: cd
var Item_BAT_Min = 39;                     // bonus attack min damage         original name: dd
var Item_BAT_Max = 40;                     // bonus attack max damage         original name: ed
var Res_Color = 44;                        // color of bonus attack           original name: fd
var Res_Lifespan = 52;                     // how long until resid ends        (new variable)
var Eff_ID = 7;                            // array element of effect ID      original name: hd
var Eff1 = 8;                              // 1st effect parameter            original name: t
var Eff2 = 9;                              // 2nd effect parameter            original name: id
var Compo_Desc_1 = 10;                     // description line 1              original name: jd
var Compo_Desc_2 = 11;                     // description line 2              original name: kd
var Stone_White = 1;                       // White Stone effect ID           original name: ld
var Stone_Red = 2;                         // Red Stone effect ID             original name: md
var Stone_Green = 3;                       // Green Stone effect ID           original name: nd
var Stone_Blue = 4;                        // Blue Stone effect ID            original name: od
var Stone_Black = 5;                       // Black Stone effect ID           original name: pd
var Crystal_Red = 6;                       // Red Crystal effect ID           original name: qd
var Crystal_Yellow = 7;                    // Yellow Crystal effect ID        original name: rd
var Crystal_Silver = 8;                    // Silver Crystal effect ID        original name: sd
var Crystal_Purple = 9;                    // Purple Crystal effect ID        original name: td
var Crystal_Black = 10;                    // Black Crystal effect ID         original name: ud
var Card_Vampir = 11;                      // Vampire's Card effect ID        original name: vd
var Card_ONIGIR = 12;                      // ONIGIRI's Card effect ID        original name: wd
var Card_Gldrsh = 37;                      // Gold rush Card effect ID        original name: xd
var Jewel_Ruby = 13;                       // Ruby effect ID                  original name: yd
var Jewel_Garnet = 14;                     // Garnet effect ID                original name: zd
var Jewel_Sapphire = 15;                   // Sapphire effect ID              original name: Ad
var Jewel_Aquamarine = 16;                 // Aquamarine effect ID            original name: Bd
var Jewel_Topaz = 17;                      // Topaz effect ID                 original name: Cd
var Jewel_Emerald = 18;                    // Ememrald effect ID              original name: Dd
var Jewel_Peridot = 19;                    // Peridot effect ID               original name: Ed
var Jewel_Diamond = 20;                    // Diamond effect ID               original name: Fd
var Card_Quicks = 21;                      // Quick's Card effect ID          original name: Gd
var Card_Longsw = 22;                      // Long Sword's effect ID          original name: Hd
var Card_Catapt = 23;                      // Catapult's Card effect ID       original name: Id
var Card_Catapt = 24;                      // Pierce's Card effect ID         original name: Jd
var Card_Guides = 25;                      // Guide's Card effect ID          original name: Kd
var Card_Bullet = 26;                      // Bullet's Card effect ID         original name: Ld
var Card_Explsn = 27;                      // Explosion's Card effect ID      original name: Md
var Card_Bersrk = 28;                      // Berserk Card effect ID          original name: Nd
var Card_Critcl = 29;                      // Critical's Card effectID        original name: Od
var Card_Zombie = 32;                      // Zombie's Card effect ID         original name: Pd
var Medal_Bronze = 33;                     // Bronze Medal effect ID          original name: Qd
var Medal_Silver = 34;                     // Silver Medal effect ID          original name: Rd
var Medal_Gold = 35;                       // Gold Medal effect ID            original name: Sd
var Medal_Iron = 36;                       // Iron Medal effect ID            original name: Td
var Ward_Ice = 38;                         // Ice Ward effect ID              original name: Ud
var Ward_Poison = 39;                      // Poison Ward effect ID           original name: Vd
var Ward_Freeze = 40;                      // Freeze Ward effect ID           original name: Wd
var Charm_Eff = 41;                        // Charm effect ID                 original name: Xd
var Card_Big = 42;                         // Big Card effect ID              original name: Yd
var Card_Knockb = 43;                      // Knockback's Card effect ID      original name: Zd
var Card_Reflct = 44;                      // Reflection Card effect ID       original name: $d
var Card_Katana = 45;                      // Katana's Card effect ID         original name: ae
var Card_Heals = 46;                       // Heal's Card effect ID           original name: be
var Card_Rings = 47;                       // Ring's Card effect ID           original name: ce
var Crown_Imprl = 48;                      // Imperial Crown effect ID        original name: de
var Crown_Anger = 49;                      // Anger Crown effect ID           original name: ee
var Shard = 50;                            // Shard
var Shop_Items = [                         // item ID#'s for each shop        original name: Lc
    // Shop (Town)
    [
        [3  ,4  ,5 ,6 ,58 ,76 ,188 ,289, 0], // List of weapons
        [564  ,565  ,566 ,567 ,568 ,569, 0, 0, 0] // Shards
    ],
    // Compo Shop (Village)
    [
        [19 ,20 ,21 ,22,23,0 ,0 ,0 ,0],                         // Level 1 stones
        [24 ,25 ,26 ,27,28,0 ,0 ,0 ,0],                         // Level 1 crystals
        [31 ,32 ,33 ,34,35,36,37,38,0],                         // Level 1 jewels
        [29 ,39 ,40 ,41,42,43,44,45,47,46,341,389,406,441,459], // Level 1 cards
        [51 ,52 ,53 ,48,0 ,0 ,0 ,0 ,0],                         // Level 1 medals
        [243,244,245,0 ,0 ,0 ,0 ,0 ,0],                         // Level 1 wards
        [277,285,0  ,0 ,0 ,0 ,0 ,0 ,0]                          // Level 1 charms
    ],
    // Junk Shop (Resort)
    [
        [270,270,0,0,0,0,0,0,0], // charge punch
        [271,271,0,0,0,0,0,0,0], // wooden sword
        [272,272,0,0,0,0,0,0,0], // pyramid arrow
        [273,273,0,0,0,0,0,0,0], // atomic ray
        [274,274,0,0,0,0,0,0,0], // high light staff
        [275,275,0,0,0,0,0,0,0], // missile
        [276,276,0,0,0,0,0,0,0], // freeze whip
        [307,307,0,0,0,0,0,0,0]  // chakram
    ],
    // Compo Shop (Island)
    [
        [19 ,84 ,143,209,323,418,20 ,85 ,144,210,324,419,21 ,86 ,145,211,325,420,22 ,87 ,146,212,326,421,23 ,88 ,147,213,327,422],//,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,    // Level 1-5 Stones
        [24 ,89 ,148,221,336,0  ,25 ,90 ,149,222,337,0  ,26 ,91 ,150,223,338,0  ,27 ,92 ,151,224,339,0  ,28 ,93 ,152,225,340,0], // ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,    // Level 1-5 Crystals
        [31 ,96 ,161,260,369,0  ,32 ,97 ,162,261,370,0  ,33 ,98 ,163,262,371,0  ,34 ,99 ,164,263,372,0  ,35 ,100,165,264,373,0  ,36 ,101,166,265,374,0  ,37 ,102,167,266,375,0  ,38 ,103,168,267,376,0] , //,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,    // Level 1-5 Jewels
        [39 ,104,169,237,353,0  ,40 ,105,170,242,354,0  ,41 ,106,171,240,355,0  ,42 ,107,172,268,0  ,0  ,43 ,108,173,269,356,0  ,44 ,109,174,238,357,0  ,45 ,110,175,249,0  ,0  ,47 ,111,176,239,358,0  ,46 ,130,177,241,359,0  ,341,342,343,344,368,0  ,389,390,391,392,393,0  ,406,407,408,409,0  ,0  ,459,460,461,462,463,0], // Level 1-5 Cards
        [385,386,387,388,0  ,0  ,0  ,0  ,0] , //,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,    // Level 5 Medals
        [243,244,245,246,247,248,250,251,252,320,321,322],//,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,    // Level 1-4 Charms
        [277,285,377,279,287,379,281,308,381,283,310,0] //  ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,   ,    // Level 1-5 Jewels
    ]
];
var Forgable_Items = [ // items that can be forged
    [3, 4, 5, 6, 58, 76, 188, 289] // tier 1
];
var PhysicalShard = 564,
    FireShard     = 565,
    IceShard      = 566,
    ThunderShard  = 567,
    PoisonShard   = 568,
    FreezeShard   = 569,
    AncientShard  = 570;

var Forge_Recipes = [ // forge recipes
    [4, FireShard, 8],

    [5, PhysicalShard, 9],
    [5, FireShard, 13],
    [5, IceShard, 17],
    [5, ThunderShard, 56],
    [5, PoisonShard, 66],
    [5, FreezeShard, 70],

    [6, PhysicalShard, 10],
    [6, FireShard, 14],
    [6, IceShard, 18],
    [6, ThunderShard, 57],
    [6, PoisonShard, 67],
    [6, FreezeShard, 71],

    [58, PhysicalShard, 60],
    [58, FireShard, 61],
    [58, IceShard, 62],
    [58, ThunderShard, 63],
    [58, PoisonShard, 115],
    [58, FreezeShard, 126]
];
var Item_Catalogue = Array(558); // array of item arrays original name: u

//   items    [  ] = [0        ,1,2  ,3 ,4 ,5             ,6         ,7,8,9,10,11,2,3,4,5,6,7,8,1,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,37];
Item_Catalogue[0] =  [""       ,0,0  ,0 ,0 ,Class_Stickman,0         ,0,0,0,0 ,0 ,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
Item_Catalogue[59] = ["NG"     ,0,0  ,13,12,Class_Compo   ,0xFF888888,0,0,0,0 ,0 ,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
Item_Catalogue[1] =  ["gold"   ,0,0  ,1 ,0 ,Class_Pickup  ,0xFFFFFFFF,1,0,0,0 ,0 ,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
Item_Catalogue[2] =  ["monster corn",0,0  ,2 ,0 ,Class_Pickup  ,0xFFFFFFFF,1,0,0,0 ,0 ,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

//   gloves   [   ] = [0                ,1,2   ,3,4 ,5,6         ,7,8   ,9,10,11 ,12,13,14,15,16,7,18,19       ,20,21,22,23,24,25,26 ,27 ,28,9,30,31,2,33,4,35,36,37,8,39,40 ,41];
Item_Catalogue[3] =   ["glove"          ,0,100 ,3,2 ,1,0xFF6666FF,1,0   ,0,1 ,3  ,0 ,0 ,15,20,15,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[7] =   ["mach punch"     ,1,250 ,3,2 ,1,0xFFCCCCCC,1,0   ,0,1 ,3  ,0 ,0 ,5 ,10,15,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[11] =  ["fire glove"     ,1,500 ,3,2 ,1,0xFFFF4444,1,3   ,0,2 ,4  ,1 ,8 ,15,22,15,1,5 ,0xFFFF6611,2,16,32,16,32,0 ,0  ,40 ,10,0,100,0,0,0 ,1,50,10 ,0,0,7 ,9  ,0];
Item_Catalogue[15] =  ["ice glove",      1,750, 3,2 ,1,5500671   ,1,9   ,0,2 ,4  ,2 ,1 ,15,22,15,1,4 ,4288413682,1,16,16,16,16,0 ,10 ,30 ,20,0,95 ,1,0,0 ,2,35,12 ,0,0,3 ,5  ,0,0,0,4294967295,1,16,16,16,16,0,0,0,0,0,100,0,0];
//Item_Catalogue[15] =  ["thunder glove"  ,1,750 ,3,2 ,1,0xFFFFFF66,1,3   ,0,2 ,4  ,1 ,10,15,22,15,1,1 ,0xFFFFFF00,1,12,48,16,16,0 ,0  ,10 ,10,0,100,0,0,0 ,3,0 ,10 ,0,0,1 ,29 ,0];
Item_Catalogue[54] =  ["poison glove"   ,1,1000,3,2 ,1,0xFF00FF00,1,3   ,0,2 ,4  ,1 ,8 ,15,22,15,1,6 ,0xFF00FF00,2,16,16,16,16,0 ,0  ,10 ,10,0,100,0,0,0 ,4,15,12 ,0,0,2 ,2  ,0];
Item_Catalogue[64] =  ["freeze glove"   ,2,1500,3,2 ,1,0xFFCCCCFF,1,3   ,0,2 ,4  ,1 ,10,15,24,15,1,4 ,0xFFCCCCFF,1,16,32,16,16,0 ,0  ,10 ,10,0,100,0,0,0 ,5,5 ,15 ,0,0,8 ,12 ,0];
Item_Catalogue[68] =  ["needle glove"   ,2,2E3 ,3,2 ,1,0xFFCCAA88,1,3   ,0,2 ,4  ,9 ,20,15,24,15,1,9 ,0xFFCCAA88,1,16,16,16,16,30,5  ,10 ,10,0,100,0,0,0 ,0,0 ,50 ,0,0,10,12 ,0];
Item_Catalogue[72] =  ["spark glove"    ,2,2500,3,2 ,1,0xFFFFFF88,1,4   ,0,2 ,4  ,6 ,30,15,24,15,0,13,0xFFFFFFCC,2,16,16,8 ,8 ,8 ,20 ,80 ,10,5,100,0,1,0 ,3,0 ,50 ,0,0,1 ,29 ,0];
Item_Catalogue[116] = ["sonic punch"    ,2,3E3 ,3,2 ,1,0xFFFFFFFF,1,1   ,1,1 ,3  ,0 ,0 ,5 ,10,15,0,14,0xFFFFFFFF,2,16,16,0 ,0 ,0 ,1  ,0  ,15,0,0  ,0,0,0 ,0,0 ,-1 ,0];// ,   ,
Item_Catalogue[121] = ["thunder knuckle",3,4E3 ,3,18,1,0xFFFFFF66,1,3   ,0,4 ,8  ,2 ,10,15,26,15,1,10,0xFFFFFF33,2,12,32,16,16,10,0  ,8  ,8 ,0,100,0,0,0 ,3,0 ,25 ,0,0,1 ,29 ,0];
Item_Catalogue[131] = ["fire knuckle"   ,3,4500,3,18,1,0xFFFF4444,1,2   ,0,5 ,10 ,1 ,1 ,15,26,15,1,5 ,0xFFFF6611,2,16,32,32,16,0 ,0  ,40 ,10,0,100,0,0,0 ,1,50,25 ,0,0,15,18 ,0];
Item_Catalogue[137] = ["mach knuckle"   ,3,5E3 ,3,18,1,0xFFCCCCCC,1,0   ,0,12,18 ,0 ,0 ,5 ,10,15,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[153] = ["poison knuckle" ,3,5500,3,18,1,0xFF00FF00,1,3   ,0,6 ,12 ,1 ,8 ,15,26,15,1,9 ,0xFF00FF00,2,16,32,16,16,0 ,0  ,10 ,20,0,100,0,0,0 ,4,15,30 ,0,0,4 ,4  ,0];
Item_Catalogue[178] = ["freeze knuckle" ,4,6E3 ,3,18,1,0xFFCCCCFF,1,3   ,0,8 ,16 ,2 ,10,15,28,15,1,4 ,0xFFCCCCFF,1,16,32,16,16,0 ,0  ,10 ,10,0,100,0,0,0 ,5,10,30 ,0,0,12,20 ,0];
Item_Catalogue[202] = ["needle knuckle" ,4,6500,3,18,1,0xFFCCAA88,1,403 ,0,8 ,16 ,18,20,15,28,15,1,9 ,0xFFCCAA88,1,16,16,16,16,50,5  ,10 ,10,0,100,0,0,0 ,0,0 ,80 ,0,0,11,13 ,0];
Item_Catalogue[214] = ["spark knuckle"  ,4,7E3 ,3,18,1,0xFFFFFF88,1,1204,0,8 ,16 ,8 ,30,15,28,15,1,18,0xFFFFFFCC,2,2 ,8 ,8 ,8 ,8 ,20 ,100,10,5,100,0,2,0 ,3,0 ,80 ,0,0,1 ,50 ,0];
Item_Catalogue[226] = ["sonic knuckle"  ,4,7500,3,18,1,0xFFFFFFFF,1,5703,1,12,18 ,9 ,10,5 ,10,15,1,12,0xFF888888,2,16,3 ,0 ,0 ,0 ,10 ,10 ,15,0,90 ,1,0,0 ,0,0 ,-1 ,0];// ,   ,
Item_Catalogue[253] = ["thunder claw"   ,5,8E3 ,3,19,1,0xFFFFFF66,1,3   ,0,9 ,18 ,3 ,20,15,30,15,1,9 ,0xFFFFFF33,2,8 ,24,16,16,3 ,3  ,10 ,10,0,95 ,0,0,0 ,3,0 ,35 ,0,0,1 ,45 ,0];
Item_Catalogue[270] = ["charge punch"   ,5,8500,3,2 ,1,0xFF6699FF,1,109 ,0,9 ,18 ,5 ,2 ,15,30,15,1,9 ,0x881166FF,2,32,60,32,32,0 ,0  ,200,10,0,90 ,1,0,0 ,1,50,300,0,0,8 ,12 ,0];
Item_Catalogue[312] = ["fire claw"      ,5,8500,3,19,1,0xFFFF4444,1,3   ,0,9 ,18 ,3 ,3 ,15,30,15,1,9 ,0xFFFF6611,2,8 ,24,16,16,0 ,0  ,60 ,10,0,100,0,0,0 ,1,50,35 ,0,0,10,15 ,0];
Item_Catalogue[328] = ["mach claw"      ,5,9E3 ,3,19,1,0xFFCCCCCC,1,0   ,0,36,54 ,0 ,0 ,5 ,10,15,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[345] = ["poison claw"    ,5,9500,3,19,1,0xFF00FF00,1,3   ,0,9 ,18 ,3 ,8 ,15,30,15,1,9 ,0xFF00FF00,2,8 ,20,8 ,8 ,0 ,7  ,10 ,20,0,100,0,0,0 ,4,15,40 ,0,0,5 ,5  ,0];
Item_Catalogue[360] = ["freeze claw"    ,6,1E4 ,3,19,1,0xFFCCCCFF,1,3   ,0,10,20 ,3 ,10,15,32,15,1,9 ,0x88CCCCFF,2,8 ,32,8 ,8 ,0 ,9  ,10 ,10,0,100,1,0,0 ,5,15,45 ,0,0,18,36 ,0];
Item_Catalogue[394] = ["needle claw"    ,6,11E3,3,19,1,0xFFCCAA88,1,303 ,0,10,20 ,30,20,15,32,15,1,9 ,0xFFCCAA88,1,8 ,8 ,8 ,8 ,0 ,5  ,10 ,10,0,90 ,0,2,0 ,0,0 ,90 ,0,0,12,14 ,0];
Item_Catalogue[410] = ["spark claw"     ,6,12E3,3,19,1,0xFFFFFF88,1,109 ,0,10,20 ,10,1 ,15,32,15,1,13,0xFFFFFFCC,2,8 ,8 ,8 ,8 ,8 ,20 ,120,10,1,99 ,0,2,20,3,0 ,100,0,0,1 ,99 ,0];
Item_Catalogue[429] = ["sonic claw"     ,6,13E3,3,19,1,0xFFFFFFFF,1,3   ,1,36,54 ,7 ,10,5 ,10,15,1,12,0x44FFFFFF,2,32,3 ,0 ,0 ,0 ,10 ,10 ,10,0,90 ,1,0,0 ,0,0 ,-1 ,0];// ,   ,
Item_Catalogue[451] = ["thunder cestus" ,7,15E3,3,20,1,0xFFFFFF66,1,9   ,0,11,22 ,5 ,4 ,15,34,15,1,20,0xFFFFFF33,2,16,48,16,16,10,3  ,10 ,10,0,95 ,1,0,0 ,3,0 ,40 ,0,0,1 ,120,0];
Item_Catalogue[471] = ["fire cestus"    ,7,16E3,3,20,1,0xFFFF4444,1,9   ,0,11,22 ,5 ,2 ,15,34,15,1,22,0xFFFF6611,2,4 ,24,16,16,10,0  ,50 ,10,0,95 ,1,0,0 ,1,50,40 ,0,0,20,40 ,0];
Item_Catalogue[479] = ["mach cestus"    ,7,17E3,3,20,1,0xFFCCCCCC,1,0   ,0,80,120,0 ,0 ,4 ,6 ,15,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[496] = ["poison cestus"  ,7,18E3,3,20,1,0xFF00FF00,1,109 ,0,11,22 ,6 ,5 ,15,34,15,0,6 ,0xFF00CC00,2,16,16,24,24,0 ,9  ,10 ,10,0,80 ,0,1,0 ,4,5 ,50 ,0,0,24,24 ,0];
Item_Catalogue[504] = ["freeze cestus"  ,8,19E3,3,20,1,0xFFCCCCFF,1,109 ,0,12,24 ,6 ,10,15,36,15,1,16,0x88CCCCFF,2,16,16,12,12,0 ,9  ,10 ,30,0,60 ,1,0,0 ,5,20,60 ,0,0,26,60 ,0];
Item_Catalogue[512] = ["needle cestus"  ,8,2E4 ,3,20,1,0xFFCCAA88,1,303 ,0,12,24 ,60,20,15,36,15,1,9 ,0xFFCCAA88,1,4 ,8 ,8 ,8 ,15,5  ,10 ,10,0,90 ,0,2,0 ,0,0 ,100,0,0,13,15 ,0];
Item_Catalogue[520] = ["spark cestus"   ,8,21E3,3,20,1,0xFFFFFF88,1,109 ,0,12,24 ,12,5 ,15,36,15,1,15,0xFFFFFFCC,2,8 ,8 ,8 ,8 ,8 ,20 ,120,10,1,90 ,0,2,50,3,0 ,120,0,0,1 ,199,0];
Item_Catalogue[549] = ["sonic cestus"   ,8,22E3,3,20,1,0xFFFFFFFF,1,5703,1,80,120,9 ,10,5 ,8 ,15,1,22,0x44FFFFFF,2,16,8 ,0 ,0 ,0 ,10 ,10 ,5 ,0,90 ,1,0,0 ,0,0 ,-1 ,0];// ,   ,

//   swords   [   ] = [0              ,1,2   ,3,4 ,5,6         ,7,8 ,9,10 ,11 ,12,13,14,15,16,7,18,19       ,20,21,22,23,24,25,26,27 ,28,29,30,31,2,33,34,35,36,37,8,39,40 ,41 ];
Item_Catalogue[4] =   ["sword"        ,0,100 ,4,3 ,2,0xFF884400,1,0 ,0,1  ,5  ,0 ,0 ,20,30,30,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[8] =   ["fire sword"   ,1,250 ,4,3 ,2,0xFFFF4444,1,1 ,0,5  ,10 ,0 ,0 ,20,30,30,0,5 ,0xFFFF6611,2,16,32,16,32,0 ,0 ,50 ,10,50,100,0,1,0  ,1,20,10 ,0,0,1 ,3  ,10 ];
Item_Catalogue[12] =  ["ice sword"    ,1,1000,4,3 ,2,0xFFAAAAFF,1,1 ,0,5  ,10 ,0 ,0 ,20,30,30,0,8 ,0x88AAAAFF,2,12,12,8 ,8 ,0 ,0 ,10 ,10,0 ,100,0,0,0  ,2,20,12 ,0,0,3 ,5  ,10 ];
Item_Catalogue[16] =  ["thunder sword",1,750 ,4,3 ,2,0xFFFFFF66,1,1 ,0,5  ,10 ,0 ,0 ,20,30,30,1,10,0xFFFFFF44,2,16,16,8 ,8 ,0 ,0 ,12 ,10,50,100,0,0,0  ,3,0 ,10 ,0,0,1 ,7  ,10 ];
Item_Catalogue[55] =  ["iron sword"   ,1,250 ,4,3 ,2,0xFFFFFFFF,1,0 ,0,10 ,15 ,0 ,0 ,20,30,30,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[65] =  ["long sword"   ,2,1500,4,3 ,2,0xFFBBBBBB,1,0 ,0,10 ,20 ,0 ,0 ,20,30,35,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[69] =  ["lightsaber"   ,2,2E3 ,4,3 ,2,0xFFFFFF66,2,7 ,0,10 ,15 ,1 ,1 ,20,30,30,1,10,0x88FFFF44,2,16,32,16,16,0 ,0 ,10 ,10,0 ,100,0,0,0  ,3,0 ,70 ,0,0,1 ,7  ,70 ];
Item_Catalogue[73] =  ["flame sword"  ,2,2500,4,3 ,2,0xFFFF4444,1,7 ,1,10 ,15 ,1 ,5 ,20,30,30,1,6 ,0xFFFF6611,2,8 ,32,16,16,0 ,0 ,20 ,10,0 ,100,0,0,0  ,1,50,70 ,0,0,1 ,3  ,70 ];
Item_Catalogue[117] = ["frozen sword" ,2,3E3 ,4,3 ,2,0xFF99CCFF,1,7 ,1,10 ,15 ,1 ,20,20,30,30,1,4 ,0xFF99CCFF,2,16,64,64,32,0 ,5 ,10 ,40,0 ,100,0,0,0  ,2,20,70 ,0,0,20,30 ,3  ];
Item_Catalogue[122] = ["sabel"        ,3,4E3 ,4,21,2,0xFFFFFFFF,1,0 ,0,20 ,40 ,0 ,0 ,20,30,30,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[132] = ["fire sabel"   ,3,4500,4,21,2,0xFFFF4444,1,7 ,0,12 ,18 ,1 ,1 ,20,30,30,1,6 ,0xFFFF6611,2,20,6 ,16,16,0 ,0 ,50 ,15,0 ,99 ,1,0,0  ,1,25,20 ,0,0,5 ,6  ,10 ];
Item_Catalogue[138] = ["thunder sabel",3,5E3 ,4,21,2,0xFFFFFF66,1,10,0,12 ,18 ,1 ,20,20,30,30,1,10,0xFFFFFF44,2,16,16,8 ,8 ,0 ,3 ,9  ,10,10,100,0,0,0  ,3,0 ,20 ,0,0,1 ,29 ,10 ];
Item_Catalogue[154] = ["ice sabel"    ,3,5500,4,21,2,0xFFAAAAFF,1,7 ,0,12 ,18 ,1 ,1 ,20,30,30,1,4 ,0x88AAAAFF,2,16,32,16,16,0 ,0 ,50 ,10,0 ,90 ,1,0,0  ,2,20,25 ,0,0,10,20 ,10 ];
Item_Catalogue[179] = ["long sabel"   ,4,6E3 ,4,21,2,0xFFBBBBBB,1,0 ,0,20 ,50 ,0 ,0 ,20,30,40,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[203] = ["lightsaber"   ,4,6500,4,21,2,0xFF66FF66,2,7 ,0,15 ,20 ,1 ,1 ,20,30,30,1,18,0x8844FF44,2,16,32,16,16,0 ,0 ,10 ,10,0 ,100,0,0,0  ,3,0 ,100,0,0,1 ,14 ,100];
Item_Catalogue[215] = ["flame sabel"  ,4,7E3 ,4,21,2,0xFFFF4444,1,7 ,1,15 ,20 ,1 ,5 ,20,30,30,1,6 ,0xFFFF6611,2,8 ,32,16,16,0 ,0 ,20 ,10,0 ,100,0,0,50 ,1,50,100,0,0,2 ,6  ,100];
Item_Catalogue[227] = ["frozen sabel" ,4,7500,4,21,2,0xFF99CCFF,1,7 ,0,15 ,20 ,1 ,15,20,30,30,1,4 ,0xFF99CCFF,2,12,16,8 ,8 ,0 ,15,100,10,0 ,100,0,0,100,5,5 ,100,0,0,20,30 ,10 ];
Item_Catalogue[254] = ["blade"        ,5,8E3 ,4,22,2,0xFFFFFFFF,1,0 ,0,50 ,80 ,0 ,0 ,20,30,30,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[271] = ["wooden sword" ,5,8500,4,22,2,0xFF884400,1,0 ,0,1  ,1  ,0 ,0 ,20,30,50,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[313] = ["fire blade"   ,5,8500,4,22,2,0xFFFF4444,1,7 ,0,20 ,20 ,1 ,1 ,20,30,30,1,9 ,0x88FF6611,2,8 ,32,16,16,0 ,0 ,200,15,0 ,99 ,0,0,0  ,1,30,30 ,0,0,3 ,4  ,10 ];
Item_Catalogue[329] = ["thunder blade",5,9E3 ,4,22,2,0xFFFFFF66,1,7 ,0,20 ,20 ,30,1 ,20,30,30,1,10,0x88FFFF44,2,16,40,32,16,90,0 ,3  ,3 ,0 ,100,0,0,0  ,3,0 ,30 ,0,0,1 ,29 ,1  ];
Item_Catalogue[346] = ["ice blade"    ,5,9500,4,22,2,0xFFAAAAFF,1,7 ,0,20 ,20 ,1 ,15,20,30,30,1,4 ,0x88AAAAFF,2,8 ,16,8 ,8 ,0 ,20,60 ,10,0 ,100,1,0,50 ,2,20,35 ,0,0,15,35 ,10 ];
Item_Catalogue[361] = ["long blade"   ,6,1E4 ,4,22,2,0xFFBBBBBB,1,0 ,0,50 ,100,0 ,0 ,20,30,45,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[395] = ["lightsaber"   ,6,11E3,4,22,2,0xFF6666FF,2,7 ,0,20 ,25 ,1 ,1 ,20,30,30,1,9 ,0x884444FF,2,16,32,16,16,0 ,0 ,10 ,10,0 ,100,0,0,0  ,3,0 ,120,0,0,1 ,45 ,120];
Item_Catalogue[411] = ["flame blade"  ,6,12E3,4,22,2,0xFFFF4444,1,7 ,1,20 ,25 ,1 ,10,20,30,30,1,6 ,0x88FF4411,2,10,30,16,16,0 ,0 ,60 ,10,-1,90 ,1,0,0  ,1,50,120,0,0,6 ,9  ,120];
Item_Catalogue[430] = ["frozen blade" ,6,13E3,4,22,2,0xFF99CCFF,1,3 ,1,20 ,25 ,1 ,20,20,30,30,1,4 ,0xCC99CCFF,2,16,64,48,48,0 ,5 ,10 ,40,0 ,100,0,0,0  ,5,5 ,120,0,0,40,60 ,3  ];
Item_Catalogue[452] = ["GreatSword"   ,7,15E3,4,23,2,0xFFFFFFFF,1,0 ,0,150,250,0 ,0 ,20,30,30,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[472] = ["fire GS"      ,7,16E3,4,23,2,0xFFFF4444,1,1 ,0,30 ,30 ,0 ,0 ,20,30,30,0,23,0xCCFF6611,2,16,32,16,32,0 ,0 ,200,10,50,100,0,1,0  ,1,35,40 ,0,0,6 ,8  ,15 ];
Item_Catalogue[480] = ["thunder GS"   ,7,17E3,4,23,2,0xFFFFFF66,1,7 ,0,30 ,30 ,9 ,1 ,20,30,30,1,10,0x88FFFF44,2,8 ,32,16,16,30,0 ,3  ,3 ,0 ,100,0,0,0  ,3,0 ,40 ,0,0,1 ,29 ,10 ];
Item_Catalogue[497] = ["ice GS"       ,7,18E3,4,23,2,0xFFAAAAFF,1,7 ,1,30 ,30 ,1 ,40,20,30,30,1,22,0x88AAAAFF,2,8 ,48,48,48,0 ,5 ,6  ,10,0 ,100,1,0,0  ,2,25,45 ,0,0,25,55 ,10 ];
Item_Catalogue[505] = ["long GS"      ,8,19E3,4,23,2,0xFFBBBBBB,1,0 ,0,100,200,0 ,0 ,20,30,50,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0 ,0 ,0  ,0 ,0 ,0  ,0,0,0  ,0,0 ,0  ,0];// ,   ,
Item_Catalogue[513] = ["lightsaber"   ,8,2E4 ,4,23,2,0xFFFF6666,2,7 ,0,30 ,35 ,1 ,1 ,20,30,30,1,18,0x88FF4444,2,16,32,16,16,0 ,0 ,10 ,10,0 ,100,0,0,0  ,3,0 ,130,0,0,1 ,150,130];
Item_Catalogue[521] = ["flame GS"     ,8,21E3,4,23,2,0xFFFF4444,1,7 ,1,30 ,35 ,1 ,50,20,30,30,1,22,0x88FF6611,2,10,20,16,16,0 ,0 ,120,10,0 ,90 ,1,0,50 ,1,50,130,0,0,9 ,12 ,130];
Item_Catalogue[550] = ["frozen GS"    ,8,22E3,4,23,2,0xFF99CCFF,1,3 ,1,30 ,35 ,1 ,20,20,30,30,1,4 ,0xCC99CCFF,2,16,64,48,48,0 ,5 ,10 ,40,0 ,100,0,0,0  ,5,5 ,130,0,0,40,60 ,9  ];

//    bows    [   ] = [0                  ,1,2   ,3,4 ,5,6         ,7,8   ,9,10,11  ,12,13 ,14,15,16 ,7,18,19      ,20,21,22,3,4,25,26,27,28,29,30,1,2,3,4,35,36,7,8,39,40,41,2,43,44       ,45,46,47,48,49,50,51,52,53,54,55,56,57];
Item_Catalogue[5] =   ["bow",0,100 ,5,4 ,3,16764040,1,4   ,0,4 ,6   ,1 ,50,50,60,110 ,1,3,4294954120,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,0,0 ,0 ,0,0,0,0,0,0,0,4294967295,1,16,16,16,16,0,0,0,0,0,100,0,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[9] =   ["triple volley"    ,1,250 ,5,16,3,0xFFFFCC66,1,4   ,0,1 ,3   ,3 ,100,30,40,90,1,3,0xFFFFCC66,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[13] =  ["fire arrow",1,250,5,4 ,3,16729122,1,4   ,0,6,8,1 ,50,50,60,110 ,1,3,4294919202,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,1,10,10,1,1,2,4,1,0,24,4294919202,2,16,32,32,32,0,0,200,25,30,100,0,1];
Item_Catalogue[17] =  ["ice arrow",1,250,5,4 ,3,4500223,1,4   ,0,6,8,1 ,50,50,60,110 ,1,3,4282690303,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,2,35,30,1,0,15,20,1,0,7,4282690303,2,32,32,32,32,0,0,10,40,0,100,1,0];
Item_Catalogue[56] =  ["light arrow",1,250,5,4 ,3,16772778,1,4   ,0,6,8,1 ,150,50,60,110 ,1,3,4294962858,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,3,0,10,2,0,5,5,2,0,13,4294962858,2,16,16,8,8,0,30,110,30,4,100,0,2];
Item_Catalogue[66] =  ["poison arrow",1,250,5,4 ,3,8978210,1,4   ,0,6,8,1 ,50,50,60,110 ,1,3,4287168290,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,4,10,15,3,0,1,1,3,0,6,4287168290,1,16,16,8,8,0,0,50,25,0,100,0,1];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[70] =  ["freeze arrow",1,250,5,4 ,3,11193599,1,4 ,0,6,8,1 ,50,50,60,110 ,1,3,4289383679,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,5,5,10,7,0,3,5,3,1,4,4289383679,1,16,16,8,8,0,0,50,25,0,100,1,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[74] =  ["oct arrow"        ,2,2500,5,17,3,0xFFFFCC66,1,4   ,0,4 ,6   ,8 ,100,45,60,90 ,1,3,0xFFFFCC66,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[118] = ["double poison"    ,2,3E3 ,5,15,3,0xFF99CC00,1,4   ,0,8 ,12  ,2 ,100,30,40,90 ,1,3,0xFF99CC00,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,4,50,20,1,0,1 ,2 ,1 ,0,6 ,0x8899CC00,1,32,32,32,32,0 ,0,100,10,0 ,100,0,0]
Item_Catalogue[123] = ["quint shot"       ,3,4E3 ,5,14,3,0xFFFFCC66,1,3   ,0,4 ,6   ,5 ,100,30,40,150,1,3,0xFFFFCC66,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[133] = ["double fire"      ,3,4500,5,15,3,0xFFFF4444,1,4   ,0,9 ,15  ,2 ,100,30,40,90 ,1,3,0xFFFF4444,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,1,50,20,1,1,8 ,9 ,1 ,0,5 ,0xFFFF6611,2,16,32,16,32,0 ,0,100,10,30,100,0,1];
Item_Catalogue[139] = ["double iron arrow",3,5E3 ,5,15,3,0xFF666666,1,4   ,0,16,24  ,2 ,80 ,30,40,90 ,1,3,0xFF666666,1,16,16,8,8,0 ,0,300,10,8,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[155] = ["triple iron arrow",3,5500,5,16,3,0xFF666666,1,104 ,0,15,20  ,3 ,80 ,30,40,90 ,1,3,0xFF666666,1,16,16,8,8,30,0,300,10,8,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[180] = ["triple poison"    ,4,6E3 ,5,16,3,0xFF99CC00,1,4   ,0,10,16  ,3 ,80 ,30,40,90 ,1,3,0xFF99CC00,1,16,16,8,8,0 ,0,300,10,8,100,0,0,0,4,50,25,1,0,2 ,2 ,1 ,0,6 ,0x8899CC00,1,32,32,32,32,0 ,0,100,10,0 ,100,0,0];
Item_Catalogue[204] = ["fire shot"        ,4,6500,5,14,3,0xFFFF4444,1,3   ,0,4 ,6   ,3 ,15 ,30,40,90 ,1,3,0xFFFF4444,1,16,16,8,8,0 ,0,300,10,0,100,0,0,0,1,50,30,5,1,6 ,8 ,1 ,1,5 ,0xFFFF6611,2,16,32,16,16,0 ,0,100,10,0 ,100,1,0];
Item_Catalogue[216] = ["quad iron arrow"  ,4,7E3 ,5,17,3,0xFF666666,1,4   ,0,16,24  ,4 ,80 ,30,40,90 ,1,3,0xFF666666,1,16,16,8,8,0 ,0,300,10,8,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[228] = ["nonuple arrow"    ,4,7500,5,17,3,0xFF666666,1,4   ,0,8 ,12  ,9 ,80 ,45,60,90 ,1,3,0xFF666666,1,16,16,8,8,0 ,0,300,10,8,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[255] = ["poison shot"      ,5,8E3 ,5,14,3,0xFF99CC00,1,3   ,0,4 ,6   ,3 ,15 ,30,40,90 ,1,3,0xFF99CC00,1,16,16,4,4,0 ,0,300,10,0,100,0,0,0,4,50,35,1,0,2 ,2 ,1 ,0,6 ,0x8899CC00,1,24,24,8 ,8 ,0 ,0,100,10,0 ,100,1,0];
Item_Catalogue[272] = ["pyramid arrow"    ,5,8500,5,4 ,3,0xFF660033,1,4   ,0,9 ,15  ,1 ,80 ,30,40,90 ,1,3,0xFF660033,1,16,16,8,8,0 ,5,500,10,8,100,0,0,0,4,66,35,2,0,3 ,3 ,30,0,6 ,0xFF660066,2,16,16,16,16,0 ,0,66 ,10,0 ,86 ,0,0];
Item_Catalogue[314] = ["flame arrow"      ,5,8500,5,4 ,3,0xFFFF9933,1,4   ,0,16,24  ,1 ,80 ,30,40,90 ,1,3,0xFFFF9933,1,16,16,8,8,0 ,0,300,10,8,100,0,0,0,1,50,35,3,1,8 ,9 ,5 ,0,6 ,0xFFFF6611,2,16,16,16,16,0 ,0,100,10,0 ,98 ,0,1];
Item_Catalogue[330] = ["sept shot"        ,5,9E3 ,5,14,3,0xFFFFCC66,1,803 ,0,6 ,9   ,7 ,80 ,30,40,150,1,3,0xFFFFCC66,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[347] = ["pierce arrow"     ,5,9500,5,17,3,0xFFEEEEEE,1,4   ,0,16,24  ,4 ,80 ,30,40,90 ,1,3,0xFFEEEEEE,1,16,16,8,8,0 ,0,300,10,8,100,1,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[362] = ["quint poison"     ,6,1E4 ,5,17,3,0xFF99CC00,1,4   ,0,16,24  ,5 ,80 ,30,40,90 ,1,3,0xFF99CC00,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,4,50,40,1,0,2 ,2 ,1 ,0,6 ,0x8899CC00,1,24,24,8 ,8 ,0 ,0,100,10,0 ,100,0,0];
Item_Catalogue[396] = ["double flame"     ,6,11E3,5,15,3,0xFFFF9933,1,4   ,0,16,24  ,2 ,80 ,30,40,90 ,1,3,0xFFFF9933,1,16,16,8,8,0 ,0,300,10,8,100,0,0,0,1,50,40,3,1,8 ,9 ,3 ,0,6 ,0xFFFF6611,2,16,16,16,16,0 ,0,100,10,0 ,98 ,0,1];
Item_Catalogue[402] = ["Indra arrow"      ,6,2E4 ,5,4 ,3,0xFFFFFF00,1,4   ,0,1 ,3333,1 ,120,60,80,90 ,1,3,0xFFFFFF00,1,16,16,8,8,0 ,0,500,10,8,100,0,0,0,3,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[412] = ["quad steel arrow" ,6,12E3,5,17,3,0xFF999999,1,604 ,0,48,72  ,4 ,60 ,30,40,90 ,1,3,0xFF999999,1,16,16,8,8,0 ,0,300,10,8,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[431] = ["undecuple arrow"  ,6,13E3,5,17,3,0xFF999999,1,4   ,0,24,36  ,11,80 ,45,60,90 ,1,3,0xFF999999,1,16,16,8,8,0 ,0,300,10,8,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[453] = ["nonuple shot"     ,7,15E3,5,14,3,0xFFFFCC66,1,803 ,0,8 ,12  ,9 ,80 ,30,40,150,1,3,0xFFFFCC66,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[473] = ["flame shot"       ,7,16E3,5,14,3,0xFFFF4444,1,803 ,0,8 ,12  ,5 ,10 ,30,40,90 ,1,3,0xFFFF4444,1,16,16,8,8,0 ,0,300,10,0,100,0,0,0,1,50,45,5,1,12,16,1 ,1,22,0xFFFF6611,2,16,16,16,16,0 ,0,100,10,0 ,100,1,0];
Item_Catalogue[481] = ["oct poison"       ,7,17E3,5,17,3,0xFF99CC00,1,4   ,0,16,24  ,8 ,80 ,30,40,90 ,1,3,0xFF99CC00,1,16,16,8,8,0 ,0,300,10,5,100,0,0,0,4,50,45,1,0,3 ,3 ,1 ,0,6 ,0x8899CC00,1,24,24,8 ,8 ,0 ,0,100,10,0 ,100,0,0];
Item_Catalogue[498] = ["double hell fire" ,7,18E3,5,15,3,0xFFFF0066,1,4   ,0,16,24  ,2 ,70 ,30,40,90 ,1,3,0xFF990033,1,16,16,8,8,0 ,0,300,10,9,100,0,0,0,1,50,50,1,1,90,99,1 ,0,24,0xFFFF2244,2,16,32,16,32,0 ,0,100,10,30,100,0,1];
Item_Catalogue[506] = ["quint gold arrow" ,8,19E3,5,4 ,3,0xFFFFD700,1,104 ,0,96,144 ,5 ,80 ,30,40,90 ,1,3,0xFFFFD700,1,16,16,8,8,30,0,300,10,8,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[514] = ["vigintuple arrow" ,8,2E4 ,5,17,3,0xFFFFD700,1,1604,0,48,72  ,20,80 ,45,60,90 ,1,3,0xFFFFD700,1,16,16,8,8,0 ,0,300,10,8,100,0,0,0,0,0 ,0 ,0];// ,  ,  , ,  ,          , ,  ,  ,  ,  ,  , ,   ,  ,  ,   , ,
Item_Catalogue[522] = ["oct poison shot"  ,8,21E3,5,14,3,0xFF99CC00,1,3   ,0,8 ,12  ,8 ,15 ,30,40,90 ,1,3,0xFF99CC00,1,16,16,4,4,0 ,0,300,10,0,100,0,0,0,4,50,50,1,0,4 ,4 ,1 ,0,6 ,0x8899CC00,1,24,24,8 ,8 ,0 ,0,100,10,0 ,100,1,0];
Item_Catalogue[551] = ["hell fire shot"   ,8,22E3,5,14,3,0xFFFF4444,1,3   ,0,16,24  ,3 ,7  ,30,40,90 ,1,3,0xFFFF4444,1,16,16,8,8,0 ,0,300,10,0,100,0,0,0,1,50,55,5,1,24,32,3 ,1,22,0xFFFF6611,2,16,16,16,16,50,0,100,10,0 ,100,1,0];

//    orbs    [   ] = [0                 ,1,2   ,3,4 ,5,6         ,7,8  ,9,10 ,11 ,12,13,14 ,15 ,16,7,18,19       ,20,21,22,23,24,25 ,26 ,27 ,28,29,30,31,2,3,4,35,6,7,8,39,40 ,41,2,43,44       ,45,46,47 ,48,49 ,50,51,52 ,53,54,55,56,57];
Item_Catalogue[6] =   ["magic",0,100 ,6,5 ,4,16711935,1,3  ,0,5  ,10 ,1 ,30,80 ,90 ,90,0,2 ,0xFFFF00FF,1,16,16,8 ,8 ,0  ,0  ,300,10,0 ,100,0,0,0,0,0 ,0,0,0,0,0,0,0,0,4294967295,1,16,16,16,16,0,0,0,0,0,100,0,0];
Item_Catalogue[10] =  ["earth",1,250,6,5 ,4,16746564,1,4,0,10,15,1 ,100,80,90,90,0,2 ,4294936644,1,16,16,8 ,8 ,0  ,0  ,300,10,4,100,0,0,0,0,0 ,0,0,0,0,0,0,0,0,4294967295,1,16,16,16,16,0,0,0,0,0,100,0,0];
Item_Catalogue[14] =  ["fire",1,250,6,5 ,4,16711680,1,3,0,5,10,1 ,30,80,90,90,1,16,4294901760,1,16,16,8 ,8 ,0  ,0  ,300,10,0,100,0,0,0,1,0 ,0,1,1,2,5,1,0,2,4294919168,1,32,32,32,32,0,0,5,25,0,100,1,0];
Item_Catalogue[18] =  ["ice",1,250,6,5 ,4,22015,1,3,0,15,20,1,25,110,120,90,1,7,4287155455,1,16,16,8 ,8 ,0  ,0  ,300,10,1,100,0,0,0,2,25,0,0,0,0,0,0,0,0,4294967295,1,16,16,16,16,0,0,0,0,0,100,0,0];
Item_Catalogue[57] =  ["thunder",1,250,6,5 ,4,16776994,1,3,0,11,33,1,30,80,90,120,1,10,4294967074,1,16,16,8 ,8 ,0  ,15,20,10,0,101,1,0,0,3,0,0,0,0,0,0,0,0,0,4294967295,1,16,16,16,16,0,0,0,0,0,100,0,0];
Item_Catalogue[67] =  ["poison",1,250,6,5 ,4,11206434,1,3,0,0,0,1 ,5,80,90,90,0,6,4289396514,1,32,32,16,16,0  ,0  ,300,25,0,100,0,0,0,4,15,0,1,0,1,1,1,0,6,4289396514,1,32,2,16,16,0,0,1,25,0,100,1,0];
Item_Catalogue[71] =  ["freeze",1,250,6,5 ,4,13421823,1,6,0,3,7,3,30,80,90,90,0,15,4291611903,1,16,16,8 ,8 ,0  ,0  ,300,10,1,100,0,0,0,5,5,0,0,0,0,0,0,0,0,4294967295,1,16,16,16,16,0,0,0,0,0,100,0,0];
Item_Catalogue[75] =  ["volcano"         ,2,2500,6,5 ,4,0xFFFF4400,1,4  ,0,2  ,6  ,1 ,50,120,135,80,0,12,0xFFFF4400,2,16,16,8 ,8 ,0  ,0  ,100,10,8 ,100,0,0,0,1,50,0,4,1,2 ,6  ,9 ,0,5 ,0xFFFF6611,2,16,32 ,16,32 ,50,0 ,100,10,5 ,98 ,0,1];
Item_Catalogue[119] = ["thunder storm"   ,2,3E3 ,6,5 ,4,0xFFFFFF33,1,8  ,0,1  ,30 ,12,0 ,120,135,90,1,10,0xFFFFFF33,2,16,16,8 ,8 ,100,0  ,100,10,90,100,0,0,0,3,0 ,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[124] = ["delta explosion" ,3,4E3 ,6,24,4,0xFFFF8800,1,9  ,1,10 ,20 ,3 ,5 ,80 ,90 ,80,1,2 ,0x88FF8822,2,8 ,40,24,24,10 ,10 ,15 ,3 ,0 ,80 ,1,0,0,1,0 ,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[134] = ["icicle"          ,3,4500,6,24,4,0xFFBBBBFF,1,3  ,0,15 ,25 ,1 ,50,80 ,90 ,90,1,9 ,0xFF8888FF,1,16,24,8 ,8 ,0  ,0  ,100,10,0 ,100,0,0,0,2,35,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[140] = ["fire rise"       ,3,5E3 ,6,24,4,0xFFFF2222,1,4  ,0,2  ,6  ,5 ,80,80 ,90 ,80,1,5 ,0xFFFF6611,2,16,32,16,16,20 ,0  ,100,10,-2,99 ,0,1,0,1,30,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[156] = ["big thunder"     ,3,5500,6,24,4,0xFFFFFF66,1,5  ,1,1  ,150,1 ,8 ,80 ,90 ,80,1,10,0xFFFFFF66,2,32,64,64,64,0  ,5  ,100,10,0 ,100,1,0,0,3,0 ,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[181] = ["big icicle"      ,4,6E3 ,6,24,4,0xFFCCCCFF,1,5  ,1,10 ,20 ,1 ,8 ,80 ,90 ,90,1,9 ,0xFFCCCCFF,1,32,64,64,64,0  ,5  ,100,10,0 ,100,1,0,0,5,50,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[205] = ["ice meteor"      ,4,6500,6,24,4,0xFF8888FF,1,5  ,0,100,150,1 ,5 ,120,135,90,1,16,0xFF8888FF,2,16,16,8 ,8 ,0  ,0  ,100,10,0 ,100,0,0,0,2,30,0,4,0,10,15 ,9 ,1,16,0xFF8888FF,2,16,16 ,8 ,8  ,0 ,10,100,10,5 ,100,0,0];
Item_Catalogue[217] = ["super volcano"   ,4,7E3 ,6,24,4,0xFFFF4400,1,4  ,0,2  ,6  ,1 ,50,120,135,80,0,12,0xFFFF4400,2,16,16,8 ,8 ,0  ,0  ,100,10,8 ,100,0,0,0,1,50,0,6,1,4 ,8  ,15,0,5 ,0xFFFF6611,2,16,32 ,16,32 ,50,0 ,100,10,5 ,98 ,0,1];
Item_Catalogue[229] = ["thunder spear"   ,4,7500,6,24,4,0xFFFFFF33,1,108,0,1  ,30 ,24,0 ,120,135,90,1,10,0xFFFFFF33,2,5 ,32,5 ,32,200,10 ,100,10,90,90 ,0,1,0,3,0 ,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[256] = ["time explosion"  ,5,8E3 ,6,25,4,0xFFFF4411,1,4  ,0,20 ,40 ,1 ,40,80 ,90 ,80,0,12,0xFFFF4411,1,16,16,8 ,8 ,0  ,100,500,10,10,98 ,0,1,0,1,0 ,0,4,1,15,25 ,10,1,6 ,0x44FF6600,1,8 ,32 ,32,32 ,10,10,20 ,5 ,0 ,98 ,1,0];
Item_Catalogue[273] = ["atomic ray"      ,5,8500,6,25,4,0xFFFF6611,1,3  ,0,10 ,20 ,1 ,20,80 ,90 ,90,1,18,0xFFFF6611,2,12,20,16,16,0  ,0  ,500,10,0 ,100,0,2,0,1,80,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[315] = ["ice spike"       ,5,8500,6,25,4,0xFFBBBBFF,1,3  ,0,15 ,25 ,1 ,50,80 ,90 ,90,1,9 ,0xFF8888FF,1,16,24,8 ,8 ,0  ,0  ,100,10,0 ,100,0,0,0,2,40,0,7,0,5 ,15 ,3 ,1,9 ,0xFF8888FF,1,8 ,16 ,8 ,8  ,0 ,9 ,10 ,10,0 ,98 ,0,2];
Item_Catalogue[331] = ["inferno"         ,5,9E3 ,6,25,4,0xFFFF2222,1,103,0,2  ,6  ,7 ,5 ,80 ,90 ,60,1,6 ,0x88FF6611,2,20,20,16,16,70 ,0  ,200,10,0 ,100,0,0,0,1,30,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[348] = ["electric shock"  ,5,9500,6,25,4,0xFFFFFF66,1,9  ,0,1  ,20 ,30,1 ,80 ,90 ,30,1,10,0x88FFFF66,2,16,12,16,16,60 ,0  ,30 ,10,0 ,90 ,0,0,0,3,0 ,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[363] = ["freeze explosion",6,1E4 ,6,25,4,0xFFCCCCFF,1,9  ,1,5  ,10 ,6 ,9 ,80 ,90 ,90,1,4 ,0x88CCCCFF,2,16,48,48,48,0  ,25 ,30 ,10,0 ,80 ,0,2,0,5,10,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[397] = ["ice orb"         ,6,11E3,6,25,4,0xFF8888FF,1,3  ,0,0  ,0  ,1 ,6 ,120,135,60,1,2 ,0xFF8888FF,2,16,16,16,16,0  ,150,150,10,0 ,100,0,0,0,2,30,0,2,0,10,15 ,50,1,9 ,0xFF8888FF,2,16,16 ,8 ,8  ,0 ,6 ,50 ,10,0 ,95 ,0,0];
Item_Catalogue[413] = ["lava"            ,6,12E3,6,25,4,0xFFFF4400,1,4  ,0,2  ,6  ,1 ,50,120,135,80,0,12,0xFFFF4400,2,16,16,8 ,8 ,0  ,0  ,100,10,8 ,100,0,0,0,1,50,0,9,1,6 ,9  ,30,0,5 ,0x44FF6611,2,16,24 ,16,32 ,50,0 ,100,10,1 ,100,0,1];
Item_Catalogue[432] = ["thunder orb"     ,6,13E3,6,25,4,0xFFFFFF33,2,3  ,0,0  ,0  ,1 ,10,120,135,60,0,2 ,0xFFFFFF66,2,16,16,16,16,0  ,200,200,10,0 ,100,0,0,0,3,0 ,0,2,0,1 ,90 ,25,0,15,0xFFFFFF66,2,16,16 ,8 ,8  ,0 ,10,50 ,10,0 ,60 ,0,0];
Item_Catalogue[454] = ["spread explosion",7,15E3,6,26,4,0xFFFF8800,1,4  ,0,20 ,40 ,10,50,80 ,90 ,80,0,12,0xFFFF8822,2,16,16,8 ,8 ,15 ,50 ,200,10,5 ,100,0,2,0,1,0 ,0,1,1,30,50 ,1 ,0,21,0xFFFF8822,2,48,48 ,32,32 ,0 ,0 ,10 ,20,0 ,100,0,0];
Item_Catalogue[474] = ["ice bolt"        ,7,16E3,6,26,4,0xFFBBBBFF,1,5  ,0,25 ,35 ,3 ,5 ,80 ,90 ,90,1,9 ,0xFF8888FF,1,16,16,8 ,8 ,0  ,0  ,100,10,0 ,100,0,0,0,2,45,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[482] = ["hell fire"       ,7,17E3,6,26,4,0xFFFF2222,1,103,0,2  ,6  ,30,5 ,80 ,90 ,40,1,6 ,0x88FF6611,2,16,16,16,16,40 ,0  ,80 ,10,0 ,100,0,0,0,1,50,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[499] = ["lightning"       ,7,18E3,6,26,4,0xFFFFFF66,1,11 ,0,1  ,90 ,30,5 ,80 ,90 ,80,1,20,0xFFFFFF66,2,16,16,16,16,60 ,0  ,150,10,0 ,100,0,0,0,3,0 ,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[507] = ["permafrost"      ,8,19E3,6,26,4,0xFFCCCCFF,1,9  ,1,15 ,25 ,6 ,9 ,80 ,90 ,90,1,22,0x66CCCCFF,2,24,48,48,48,0  ,25 ,30 ,10,0 ,70 ,1,0,0,5,30,0,0];// ,   ,  , ,  ,          , ,  ,   ,  ,   ,  ,  ,   ,  ,  ,   , ,
Item_Catalogue[515] = ["ice missile"     ,8,2E4 ,6,26,4,0xFF8888FF,1,3  ,0,0  ,0  ,3 ,30,120,135,90,1,17,0xFF8888FF,2,16,16,16,16,0  ,100,100,10,0 ,100,0,0,0,2,30,0,2,0,10,15 ,90,1,6 ,0xFF8888FF,2,12,12 ,8 ,8  ,0 ,4 ,5  ,20,0 ,90 ,0,0];
Item_Catalogue[523] = ["pyroclastic flow",8,21E3,6,26,4,0xFFFF4400,1,4  ,0,2  ,6  ,1 ,50,120,135,90,1,12,0xFFFF4400,2,16,16,8 ,8 ,0  ,0  ,200,10,5 ,100,0,0,0,1,50,0,2,1,9 ,12 ,50,0,5 ,0x44FF6611,2,16,32 ,16,32 ,0 ,0 ,150,10,5 ,90 ,0,1];
Item_Catalogue[552] = ["thunderbolt"     ,8,22E3,6,26,4,0xFFFFFF33,2,3  ,0,0  ,0  ,1 ,30,120,135,90,0,2 ,0xFFFFFF66,2,16,16,4 ,4 ,0  ,0  ,200,10,0 ,100,0,0,0,3,0 ,0,1,1,1 ,999,1 ,0,18,0xFFFFFF66,2,64,512,64,512,0 ,20,50 ,10,0 ,100,0,0];

//   staffs   [   ] = [0                  ,1,2   ,3 ,4 ,5,6         ,7,8,9,10 ,11,12,13,14,15,16 ,7,18,19       ,20,21,22,23,24,25,26 ,27 ,28,29,30,1,2,33,4,35,6,37];
Item_Catalogue[58] =  ["staff"            ,0,100 ,12,11,5,0xFF884400,0,6,0,1  ,2  ,1,0 ,80,90,70 ,0,15,0xFFCC99FF,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,10,0];
Item_Catalogue[60] =  ["staff of earth"   ,1,250 ,12,11,5,0xFFAA8844,1,6,0,2  ,3  ,1,0 ,80,90,70 ,0,15,0xFFAA8844,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,20,0];
Item_Catalogue[61] =  ["staff of fire"    ,1,250 ,12,11,5,0xFFFF6611,2,6,0,2  ,3  ,1,0 ,80,90,70 ,0,15,0xFFFF6611,2,24,24,24,24,0 ,0  ,100,10,0,100,0,0,0 ,1,30,15,0];
Item_Catalogue[62] =  ["staff of ice"     ,1,250 ,12,11,5,0xFFBBBBFF,4,6,0,2  ,3  ,1,0 ,80,90,70 ,0,15,0xFFBBBBFF,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,2,10,5 ,0];
Item_Catalogue[63] =  ["staff of thunder" ,1,250 ,12,11,5,0xFFFFFF66,3,6,0,1  ,9  ,1,0 ,80,90,70 ,0,15,0xFFFFFF66,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,3,0 ,25,0];
Item_Catalogue[115] = ["staff of poison"  ,1,250 ,12,11,5,0xFF99FF44,5,6,0,0  ,1  ,1,0 ,80,90,70 ,0,15,0xFF99FF44,1,24,24,8 ,8 ,0 ,0  ,100,10,0,100,0,0,0 ,4,20,25,0];
Item_Catalogue[126] = ["staff of freeze"  ,1,250 ,12,11,5,0xFFCCCCFF,6,6,0,2  ,3  ,1,0 ,80,90,70 ,0,15,0xFFCCCCFF,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,5,20,25,0];

Item_Catalogue[127] = ["lightning staff"  ,2,2500,12,11,5,0xFFFFFF66,1,5,0,1  ,25 ,1,10,80,90,70 ,1,10,0xFFFFFF66,2,16,24,16,16,10,0  ,100,20,0,100,0,0,0 ,3,0 ,0,0];
Item_Catalogue[128] = ["staff of poison"  ,2,3E3 ,12,11,5,0xFF44FF44,1,6,0,0  ,1  ,1,0 ,80,90,70 ,0,15,0xFF44FF44,1,24,24,8 ,8 ,0 ,0  ,100,10,0,100,0,0,0 ,4,20,0,0];
Item_Catalogue[129] = ["long wood staff"  ,3,4E3 ,12,11,5,0xFF996633,1,6,0,10 ,15 ,1,0 ,80,90,130,0,15,0xFF996633,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,0,0];
Item_Catalogue[135] = ["staff of freeze"  ,3,4500,12,11,5,0xFFCCCCFF,1,6,0,5  ,10 ,1,0 ,80,90,70 ,0,15,0xFFCCCCFF,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,5,20,0,0];
Item_Catalogue[141] = ["staff of light"   ,1,5E3 ,12,11,5,0xFFFFFFFF,1,6,0,5  ,5  ,1,0 ,80,90,70 ,0,13,0x88FFFFFF,2,16,16,8 ,8 ,0 ,100,200,40,0,100,1,0,50,3,0 ,0,0];
Item_Catalogue[157] = ["staff of flame"   ,3,5500,12,34,5,0xFFFF6611,1,6,0,4  ,6  ,1,0 ,80,90,70 ,0,15,0xFFFF6611,2,24,24,24,24,0 ,0  ,100,10,0,100,0,0,0 ,1,30,0,0];
Item_Catalogue[182] = ["combat staff"     ,4,6E3 ,12,34,5,0xFFFF4444,1,6,0,25 ,25 ,1,0 ,80,90,30 ,0,15,0xFFFF4444,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,0,0];
Item_Catalogue[206] = ["staff of poisoner",4,6500,12,34,5,0xFF6600CC,1,6,0,1  ,1  ,1,0 ,80,90,70 ,0,15,0xFF6600CC,1,24,24,8 ,8 ,0 ,0  ,100,10,0,100,0,0,0 ,4,30,0,0];
Item_Catalogue[218] = ["long iron staff"  ,4,7E3 ,12,34,5,0xFF666666,1,6,0,10 ,15 ,1,0 ,80,90,150,0,15,0xFF999999,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,0,0];
Item_Catalogue[230] = ["staff of icicle"  ,4,7500,12,34,5,0xFFBBBBFF,1,6,0,10 ,15 ,1,0 ,80,90,70 ,0,15,0xFFBBBBFF,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,2,15,0,0];
Item_Catalogue[257] = ["explosion staff"  ,5,8E3 ,12,34,5,0xFFFF8800,1,6,1,10 ,15 ,1,0 ,80,90,70 ,0,2 ,0x88FF8822,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,1,0 ,0,0];
Item_Catalogue[274] = ["high light staff" ,3,8500,12,34,5,0xFFFFFFFF,1,6,0,10 ,15 ,1,0 ,80,90,140,0,13,0x88FFFFFF,2,16,16,8 ,8 ,0 ,100,200,40,0,100,1,0,50,3,0 ,0,0];
Item_Catalogue[316] = ["warrior staff"    ,5,8500,12,34,5,0xFF990000,1,6,0,35 ,35 ,1,0 ,80,90,30 ,0,15,0xFF990000,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,0,0];
Item_Catalogue[332] = ["inferno staff"    ,5,9E3 ,12,45,5,0xFFFF6611,1,6,0,10 ,15 ,1,0 ,80,90,70 ,1,6 ,0xFFFF6611,2,16,16,16,16,0 ,0  ,100,10,0,96 ,0,0,20,1,30,0,0];
Item_Catalogue[349] = ["electric staff"   ,5,9500,12,45,5,0xFFFFFF66,1,6,0,1  ,9  ,3,2 ,80,90,70 ,0,14,0x88FFFF66,2,16,16,16,16,15,0  ,30 ,10,0,90 ,0,0,0 ,3,0 ,0,0];
Item_Catalogue[364] = ["long silver staff",6,1E4 ,12,45,5,0xFFFFFFFF,1,6,0,10 ,15 ,1,0 ,80,90,170,0,15,0xFFFFFFFF,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,0,0];
Item_Catalogue[398] = ["poisonous staff"  ,6,11E3,12,45,5,0xFF660099,1,6,0,1  ,2  ,1,0 ,80,90,70 ,0,15,0xFF660099,1,24,24,8 ,8 ,0 ,0  ,100,10,0,100,0,0,0 ,4,40,0,0];
Item_Catalogue[414] = ["freeze exp staff" ,6,12E3,12,45,5,0xFFCCCCFF,1,6,1,5  ,5  ,1,0 ,80,90,70 ,0,15,0xFFCCCCFF,2,16,16,12,12,0 ,0  ,100,40,0,100,0,0,0 ,5,5 ,0,0];
Item_Catalogue[433] = ["mega exp staff"   ,6,13E3,12,45,5,0xFFFF8800,1,6,1,10 ,15 ,1,0 ,80,90,70 ,0,2 ,0x88FF8822,2,32,32,32,32,0 ,0  ,100,40,0,100,0,0,0 ,1,0 ,0,0];
Item_Catalogue[455] = ["strike rod"       ,7,15E3,12,60,5,0xFFFF4444,1,6,0,55 ,55 ,1,0 ,80,90,30 ,0,21,0xFFFF4444,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,0,0];
Item_Catalogue[475] = ["inferno rod"      ,7,16E3,12,60,5,0xFFFF6611,1,6,0,20 ,25 ,1,0 ,80,90,70 ,1,22,0xFFFF6611,2,12,12,16,16,0 ,0  ,150,10,0,96 ,1,0,20,1,30,0,0];
Item_Catalogue[483] = ["thunder rod"      ,7,17E3,12,60,5,0xFFFFFF66,1,6,0,1  ,30 ,3,0 ,80,90,70 ,0,21,0x88FFFF66,2,16,16,16,16,15,0  ,100,10,0,100,0,0,0 ,3,0 ,0,0];
Item_Catalogue[500] = ["long gold rod"    ,7,18E3,12,60,5,0xFFFFD700,1,6,0,10 ,15 ,1,0 ,80,90,190,0,15,0xFFFFD700,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,0,0];
Item_Catalogue[508] = ["poisonous rod"    ,8,19E3,12,60,5,0xFF9900FF,1,6,0,2  ,2  ,1,0 ,80,90,70 ,0,15,0xFF9900FF,1,24,24,8 ,8 ,0 ,0  ,100,10,0,100,0,0,0 ,4,50,0,0];
Item_Catalogue[516] = ["freeze exp rod"   ,8,2E4 ,12,60,5,0xFFCCCCFF,1,6,1,5  ,15 ,1,0 ,80,90,70 ,0,21,0xFFCCCCFF,2,16,16,16,16,0 ,0  ,100,40,0,100,0,0,0 ,5,10,0,0];
Item_Catalogue[524] = ["giga exp rod"     ,8,21E3,12,60,5,0xFFFF8800,1,6,1,10 ,15 ,1,0 ,80,90,70 ,0,2 ,0x88FF8822,2,48,48,48,48,0 ,0  ,100,40,0,100,0,0,0 ,1,0 ,0,0];
Item_Catalogue[553] = ["power rod"        ,8,22E3,12,60,5,0xFF990000,1,6,0,100,100,1,0 ,80,90,30 ,0,21,0xFF990000,2,24,24,24,24,0 ,0  ,100,40,0,100,0,0,0 ,0,0 ,0,0];

//    guns    [   ] = [0                  ,1,2   ,3 ,4 ,5,6         ,7,8  ,9,10 ,11 ,12,13 ,14 ,15 ,16,17,18,19       ,20,21,22,23,24,25,26 ,27 ,28,29,30,31,2,33,34,35 ,36,37,38,39,40 ,41,2,43,44       ,45,46,47,48,49,50,51,52 ,53,54,55,56,57];
Item_Catalogue[76] =  ["gun"              ,0,100 ,14,13,6,0xFF999999,1,3  ,0,2  ,6  ,1 ,30 ,20 ,30 ,60 ,1,17,0xFF999999,1,16,16,8 ,8 ,0 ,0  ,50 ,10,0 ,100,0,0,0  ,0,0  ,8  ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[77] =  ["revolver"         ,1,250 ,14,61,6,0xFFCCCCCC,1,3  ,0,8  ,12 ,1 ,30 ,20 ,30 ,60 ,1,17,0xFFCCCCCC,1,16,16,8 ,8 ,0 ,0  ,50 ,10,0 ,100,0,0,0  ,0,0,100/7,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[78] =  ["smg"              ,1,500 ,14,27,6,0xFF666699,1,3  ,0,2  ,4  ,1 ,30 ,5  ,10 ,50 ,1,17,0xFF666699,1,16,16,8 ,8 ,0 ,0  ,50 ,10,0 ,100,0,0,0  ,0,0  ,5  ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[79] =  ["shotgun"          ,1,750 ,14,28,6,0xFF996633,1,3  ,0,1  ,20 ,5 ,30 ,50 ,60 ,50 ,0,13,0xFF996633,1,16,16,8 ,8 ,5 ,0  ,30 ,10,0 ,100,0,1,0  ,0,0  ,20 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[80] =  ["rifle"            ,1,1000,14,29,6,0xFF669999,1,3  ,0,20 ,40 ,1 ,50 ,50 ,60 ,120,1,17,0xFF669999,1,16,32,8 ,8 ,0 ,0  ,300,10,0 ,100,0,0,0  ,0,0  ,13 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[81] =  ["grenade"          ,2,1500,14,30,6,0xFFFF6600,1,4  ,0,8  ,12 ,1 ,40 ,70 ,80 ,60 ,1,17,0xFFFF6600,1,16,16,8 ,8 ,0 ,0  ,100,10,10,100,0,0,0  ,1,50 ,25 ,4,1,2  ,6  ,4 ,0,5 ,0xFFFF6611,2,16,32,16,32,0 ,0 ,100,10,8 ,98,0,1];
Item_Catalogue[82] =  ["laser gun"        ,2,2E3 ,14,31,6,0xFF990000,1,3  ,1,8  ,12 ,1 ,30 ,20 ,30 ,50 ,1,18,0xFF990000,1,8 ,16,8 ,8 ,0 ,0  ,200,10,0 ,100,1,0,0  ,1,100,20 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[83] =  ["bazooka"          ,2,2500,14,32,6,0xFF009900,1,3  ,0,40 ,60 ,1 ,30 ,80 ,90 ,60 ,1,17,0xFF009900,1,32,32,16,16,0 ,0  ,50 ,10,5 ,100,0,0,0  ,0,0  ,30 ,3,0,20 ,30 ,6 ,0,6 ,0x88996633,1,24,24,12,12,10,0 ,50 ,20,0 ,97,1,0];
Item_Catalogue[120] = ["homing laser"     ,2,3E3 ,14,33,6,0xFF99CC00,1,3  ,0,8  ,12 ,2 ,30 ,20 ,30 ,70 ,1,11,0xFF99CC00,1,16,16,8 ,8 ,0 ,0  ,200,10,0 ,100,0,0,50 ,3,0  ,20 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[125] = ["beretta"          ,3,4E3 ,14,13,6,0xFFCCCCCC,1,3  ,0,24 ,36 ,1 ,30 ,20 ,30 ,60 ,1,17,0xFFCCCCCC,1,16,16,8 ,8 ,0 ,0  ,50 ,10,0 ,100,0,0,0  ,0,0  ,10 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[136] = ["uzi"              ,3,4500,14,27,6,0xFF333366,1,3  ,0,12 ,24 ,1 ,30 ,5  ,10 ,50 ,1,17,0xFF333366,1,16,16,8 ,8 ,0 ,0  ,50 ,10,0 ,100,0,0,0  ,0,0  ,15 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[142] = ["remington"        ,3,5E3 ,14,28,6,0xFF442222,1,3  ,0,1  ,40 ,7 ,30 ,50 ,60 ,50 ,0,13,0xFF442222,1,16,16,8 ,8 ,7 ,0  ,30 ,10,0 ,100,0,1,0  ,0,0  ,30 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[158] = ["sniper rifle"     ,3,5500,14,29,6,0xFF003333,1,3  ,0,60 ,80 ,1 ,50 ,50 ,60 ,120,1,17,0xFF669999,1,16,32,8 ,8 ,0 ,0  ,300,10,0 ,100,0,0,0  ,0,0  ,20 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[183] = ["grenade launcher" ,4,6E3 ,14,30,6,0xFFCC3300,1,4  ,0,12 ,24 ,1 ,40 ,70 ,80 ,60 ,1,17,0xFFCC3300,1,16,16,8 ,8 ,0 ,0  ,100,10,10,100,0,0,0  ,1,50 ,40 ,4,1,6  ,18 ,4 ,0,5 ,0x88FF3311,2,16,32,16,32,0 ,0 ,100,10,8 ,96,0,1];
Item_Catalogue[207] = ["laser beam gun"   ,4,6500,14,31,6,0xFFCC0000,1,3  ,1,16 ,24 ,1 ,25 ,20 ,30 ,50 ,1,18,0xFFCC0000,1,8 ,16,8 ,8 ,0 ,0  ,200,10,0 ,100,1,0,0  ,1,100,35 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[219] = ["cannon"           ,4,7E3 ,14,32,6,0xFF999900,1,3  ,0,80 ,120,1 ,30 ,80 ,90 ,60 ,1,17,0xFF999900,1,32,32,16,16,0 ,0  ,50 ,10,5 ,100,0,0,0  ,0,0  ,50 ,3,0,50 ,70 ,6 ,1,6 ,0x88CC9933,1,12,48,16,16,0 ,5 ,25 ,20,0 ,98,1,0];
Item_Catalogue[231] = ["homing laser beam",4,7500,14,33,6,0xFFCCFF33,1,3  ,0,8  ,12 ,5 ,30 ,20 ,30 ,70 ,1,11,0xFFCCFF33,1,16,16,8 ,8 ,0 ,0  ,200,10,0 ,100,0,0,100,3,0  ,35 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[258] = ["3-round burst"    ,5,8E3 ,14,13,6,0xFF666666,1,603,0,24 ,36 ,3 ,30 ,20 ,30 ,60 ,1,17,0xFF666666,1,16,16,8 ,8 ,10,0  ,50 ,10,0 ,100,0,0,0  ,0,0  ,10 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[275] = ["missile"          ,5,8500,14,32,6,0xFFFFFFFF,1,4  ,1,300,500,1 ,80 ,160,180,80 ,1,17,0xFFFFFFFF,1,16,32,16,16,0 ,5  ,100,10,10,100,0,0,0  ,0,0  ,100,2,0,0  ,0  ,50,1,6 ,0x88666666,1,16,16,16,16,10,25,25 ,20,0 ,80,0,0];
Item_Catalogue[317] = ["mini uzi"         ,5,8500,14,27,6,0xFF333399,1,103,0,12 ,24 ,2 ,30 ,5  ,10 ,50 ,1,17,0xFF333399,1,16,16,8 ,8 ,5 ,0  ,50 ,10,0 ,100,0,0,0  ,0,0  ,25 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[333] = ["scattergun"       ,5,9E3 ,14,28,6,0xFF662200,1,803,0,1  ,80 ,9 ,30 ,50 ,60 ,50 ,0,13,0xFF662200,1,16,16,8 ,8 ,9 ,0  ,30 ,10,0 ,100,0,2,0  ,0,0  ,40 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[350] = ["hunting gun"      ,5,9500,14,29,6,0xFF663333,1,3  ,0,140,160,1 ,50 ,50 ,60 ,120,1,17,0xFF666666,1,16,32,8 ,8 ,0 ,0  ,300,10,0 ,100,0,0,0  ,0,0  ,30 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[365] = ["M9 grenade"       ,6,1E4 ,14,30,6,0xFFFF2211,1,4  ,0,18 ,48 ,1 ,40 ,70 ,80 ,60 ,1,17,0xFFFF2211,1,16,16,8 ,8 ,0 ,0  ,100,10,10,100,0,0,0  ,1,50 ,55 ,4,1,6  ,18 ,9 ,0,5 ,0xCCFF2211,2,16,32,16,32,0 ,0 ,100,10,15,90,0,1];
Item_Catalogue[399] = ["power laser gun"  ,6,11E3,14,31,6,0xFFCC0000,1,3  ,1,24 ,36 ,1 ,20 ,20 ,30 ,50 ,1,18,0xFFCC0000,1,8 ,16,8 ,8 ,0 ,0  ,200,10,0 ,100,1,0,0  ,1,100,45 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[403] = ["Napalm bomb"      ,6,2E4 ,14,32,6,0xFFFF3311,1,4  ,0,0  ,0  ,1 ,120,160,180,80 ,1,17,0xFFFF3311,1,32,32,8 ,8 ,0 ,200,200,10,5 ,100,0,0,0  ,1,50 ,200,8,1,8  ,8  ,30,1,6 ,0x88FF3311,2,32,32,24,24,10,0 ,150,30,0 ,95,0,2];
Item_Catalogue[415] = ["wave cannon"      ,6,12E3,14,32,6,0xFF666600,1,3  ,0,120,180,1 ,30 ,80 ,90 ,60 ,1,17,0xFF666600,1,32,32,16,16,0 ,0  ,50 ,10,5 ,100,0,0,0  ,0,0  ,70 ,9,0,100,150,6 ,1,11,0xFF664422,2,12,40,20,20,25,10,50 ,20,0 ,98,1,0];
Item_Catalogue[434] = ["pierce homing"    ,6,13E3,14,33,6,0xFFFFFF33,1,3  ,0,12 ,16 ,7 ,30 ,20 ,30 ,70 ,1,11,0xFFFFFF33,1,8 ,16,8 ,8 ,0 ,0  ,200,10,0 ,100,1,0,150,3,0  ,45 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[456] = ["magnum"           ,7,15E3,14,61,6,0xFFCCCCCC,1,3  ,1,80 ,120,1 ,30 ,20 ,30 ,60 ,1,17,0xFFCCCCCC,1,16,16,8 ,8 ,0 ,0  ,50 ,10,0 ,100,0,0,0  ,0,0  ,15 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[476] = ["micro uzi"        ,7,16E3,14,27,6,0xFF222266,1,103,0,16 ,32 ,3 ,30 ,5  ,10 ,50 ,1,17,0xFF222266,1,16,16,8 ,8 ,5 ,0  ,50 ,10,0 ,100,0,0,0  ,0,0  ,35 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[484] = ["triple shotgun"   ,7,17E3,14,28,6,0xFF884422,1,803,0,1  ,120,15,30 ,50 ,60 ,50 ,0,13,0xFF884422,1,16,16,8 ,8 ,11,0  ,30 ,10,0 ,100,0,2,0  ,0,0  ,50 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[501] = ["rail gun"         ,7,18E3,14,29,6,0xFF444444,1,3  ,0,300,320,1 ,50 ,50 ,60 ,150,1,17,0xFF444444,1,16,32,8 ,8 ,0 ,0  ,300,10,0 ,100,0,0,0  ,0,0  ,40 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[509] = ["napalm gun"       ,8,19E3,14,30,6,0xFFFF1100,1,4  ,0,26 ,96 ,1 ,40 ,70 ,80 ,60 ,1,17,0xFFFF1100,1,16,16,8 ,8 ,0 ,0  ,100,10,10,100,0,0,0  ,1,50 ,70 ,4,1,15 ,45 ,9 ,0,5 ,0xCCFF1808,2,16,32,16,32,0 ,0 ,100,10,8 ,94,0,1];
Item_Catalogue[517] = ["slow laser gun"   ,8,2E4 ,14,31,6,0xFFCC0000,1,3  ,1,32 ,48 ,1 ,10 ,20 ,30 ,50 ,1,18,0xFFCC0000,1,8 ,12,8 ,8 ,0 ,0  ,200,10,0 ,100,1,0,0  ,1,100,55 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,
Item_Catalogue[525] = ["rocket launcher"  ,8,21E3,14,32,6,0xFF444400,1,3  ,0,160,240,1 ,30 ,80 ,90 ,60 ,1,17,0xFF666600,1,32,32,16,16,0 ,0  ,50 ,10,5 ,100,0,0,0  ,0,0  ,80 ,3,0,200,300,6 ,1,24,0xFF664422,2,16,64,24,24,5 ,5 ,25 ,20,0 ,90,1,0];
Item_Catalogue[554] = ["homing laser wave",8,22E3,14,33,6,0xFFFFFF99,1,803,0,20 ,30 ,9 ,30 ,20 ,30 ,70 ,1,11,0xFFFFFF99,1,16,16,8 ,8 ,0 ,0  ,200,10,0 ,100,1,0,200,3,0  ,55 ,0];//  ,   ,  , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,  , ,

//   whips    [   ] = [0                ,1,2   ,3 ,4 ,5,6         ,7,8  ,9,10 ,11 ,12,13,14,15,16,7,18,19       ,20,21,22,23,24,25 ,26,27 ,28,29,30,31,2,3,34,35,36,37,38,39,40 ,41];
Item_Catalogue[188] = ["whip"           ,0,100 ,15,35,7,0xFFFF8800,1,0  ,0,1  ,4  ,0 ,0 ,15,20,40,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0  ,0 ,0  ,0 ,0 ,0  ,0,0,0,0,0  ,0  ,0];//  ,   ,
Item_Catalogue[189] = ["stone whip"     ,1,250 ,15,35,7,0xFF884400,1,4  ,0,1  ,4  ,3 ,80,15,20,40,0,12,0xFF444444,1,16,16,8 ,8 ,0  ,20,200,10,5 ,100,0,0,0,0,0  ,10 ,0,0,3  ,5  ,0];
Item_Catalogue[190] = ["fire whip"      ,1,500 ,15,35,7,0xFFFF4444,1,4  ,0,1  ,4  ,4 ,50,15,20,40,0,5 ,0x88FF6611,2,16,32,16,32,0  ,0 ,100,10,8 ,95 ,0,1,0,1,30 ,40 ,0,0,3  ,5  ,0];
Item_Catalogue[191] = ["iron whip"      ,1,750 ,15,35,7,0xFFAAAAAA,1,0  ,0,10 ,20 ,0 ,0 ,15,20,40,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0  ,0 ,0  ,0 ,0 ,0  ,0,0,0,0,0  ,0  ,0];//  ,   ,
Item_Catalogue[192] = ["thunder whip"   ,1,1000,15,35,7,0xFFFFFF00,1,5  ,0,1  ,4  ,5 ,5 ,15,20,40,1,10,0xFFFFFF44,2,16,16,8 ,8 ,50 ,0 ,100,10,0 ,100,0,0,0,3,0  ,90 ,0,0,1  ,33 ,0];
Item_Catalogue[193] = ["ice whip"       ,2,1500,15,35,7,0xFFCCCCFF,1,103,0,2  ,5  ,5 ,30,15,20,40,1,4 ,0x88CCCCFF,2,16,16,8 ,8 ,0  ,30,200,10,5 ,100,0,1,0,2,20 ,60 ,0,0,15 ,20 ,0];
Item_Catalogue[194] = ["thorn whip"     ,2,2E3 ,15,35,7,0xFFCCAA88,1,3  ,0,2  ,6  ,7 ,20,15,20,40,1,9 ,0xFFCCAA88,1,16,16,8 ,8 ,0  ,5 ,100,10,0 ,100,1,0,0,0,0  ,80 ,0,0,18 ,22 ,0];
Item_Catalogue[195] = ["poison whip"    ,2,2500,15,35,7,0xFF8800FF,1,9  ,0,2  ,7  ,5 ,1 ,15,20,40,0,6 ,0x888800FF,1,16,16,8 ,8 ,50 ,10,200,10,0 ,99 ,0,1,0,4,100,120,0,0,1  ,1  ,0];
Item_Catalogue[196] = ["explosion whip" ,2,3E3 ,15,35,7,0xFFFF6622,1,9  ,1,2  ,8  ,3 ,5 ,15,20,40,1,2 ,0x88FF4422,2,8 ,40,16,16,10 ,10,15 ,3 ,0 ,80 ,1,0,0,1,0  ,150,0,0,30 ,40 ,0];
Item_Catalogue[197] = ["stone chain"    ,3,4E3 ,15,36,7,0xFF884400,1,4  ,0,3  ,9  ,3 ,80,15,20,40,0,13,0xFF666666,1,16,16,8 ,8 ,0  ,20,200,10,7 ,100,0,0,0,0,0  ,40 ,0,0,18 ,30 ,0];
Item_Catalogue[198] = ["fire chain"     ,3,4500,15,36,7,0xFFFF4444,1,9  ,0,3  ,10 ,4 ,1 ,15,20,40,1,5 ,0x66FF9911,2,12,24,24,24,0  ,0 ,100,10,0 ,95 ,1,0,0,1,30 ,60 ,0,0,6  ,10 ,0];
Item_Catalogue[199] = ["iron chain"     ,3,5E3 ,15,36,7,0xFFAAAAAA,1,0  ,0,20 ,40 ,0 ,0 ,15,20,40,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0  ,0 ,0  ,0 ,0 ,0  ,0,0,0,0,0  ,0  ,0];//  ,   ,
Item_Catalogue[200] = ["thunder chain"  ,3,5500,15,36,7,0xFFFFFF00,1,105,0,3  ,12 ,5 ,5 ,15,20,40,1,18,0x88FFFF44,2,8 ,32,8 ,8 ,50 ,0 ,100,10,0 ,100,0,0,0,3,0  ,130,0,0,1  ,66 ,0];
Item_Catalogue[201] = ["ice chain"      ,4,6E3 ,15,36,7,0xFFCCCCFF,1,103,0,4  ,13 ,5 ,30,15,20,40,1,4 ,0x88CCCCFF,2,16,16,8 ,8 ,0  ,20,200,10,20,100,0,1,0,2,20 ,90 ,0,0,30 ,40 ,0];
Item_Catalogue[208] = ["thorn chain"    ,4,6500,15,36,7,0xFFCCAA88,1,803,0,4  ,14 ,15,20,15,20,40,1,9 ,0xFFCCAA88,1,16,16,8 ,8 ,0  ,5 ,100,10,0 ,100,1,0,0,0,0  ,120,0,0,18 ,22 ,0];
Item_Catalogue[220] = ["poison chain"   ,4,7E3 ,15,36,7,0xFF8800FF,1,9  ,0,4  ,15 ,5 ,1 ,15,20,40,0,6 ,0x888800FF,1,16,16,8 ,8 ,0  ,20,300,10,0 ,99 ,0,1,0,4,150,180,0,0,2  ,2  ,0];
Item_Catalogue[232] = ["explosion chain",4,7500,15,36,7,0xFFFF6622,1,9  ,1,4  ,16 ,3 ,5 ,15,20,40,1,2 ,0x88FF4422,2,32,8 ,16,16,0  ,19,20 ,3 ,0 ,80 ,1,0,0,1,0  ,220,0,0,60 ,80 ,0];
Item_Catalogue[259] = ["stone flail"    ,5,8E3 ,15,37,7,0xFF884400,1,4  ,0,5  ,17 ,3 ,80,15,20,40,0,13,0xFF666666,1,16,16,8 ,8 ,0  ,20,200,10,7 ,100,0,0,0,0,0  ,60 ,0,0,32 ,52 ,0];
Item_Catalogue[276] = ["freeze whip"    ,5,8500,15,35,7,0xFFCCCCFF,1,105,0,5  ,18 ,1 ,5 ,15,20,40,1,8 ,0x88CCCCFF,2,8 ,8 ,8 ,8 ,50 ,0 ,100,10,0 ,100,0,0,0,5,5  ,60 ,0,0,3  ,5  ,0];
Item_Catalogue[318] = ["fire flail"     ,5,8500,15,37,7,0xFFFF4444,1,9  ,0,5  ,18 ,4 ,1 ,15,20,40,1,5 ,0x88FF9911,2,8 ,16,20,20,0  ,0 ,300,10,0 ,99 ,1,0,0,1,30 ,80 ,0,0,8  ,15 ,0];
Item_Catalogue[334] = ["iron flail"     ,5,9E3 ,15,37,7,0xFFAAAAAA,1,0  ,0,40 ,80 ,0 ,0 ,15,20,40,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0  ,0 ,0  ,0 ,0 ,0  ,0,0,0,0,0  ,0  ,0];//  ,   ,
Item_Catalogue[351] = ["thunder flail"  ,5,9500,15,37,7,0xFFFFFF00,1,5  ,0,5  ,20 ,5 ,5 ,15,20,40,1,18,0xFFFFFF44,2,6 ,16,8 ,8 ,0  ,0 ,100,10,0 ,100,0,0,0,3,0  ,150,0,0,1  ,99 ,0];
Item_Catalogue[366] = ["ice flail"      ,6,1E4 ,15,37,7,0xFFCCCCFF,1,109,0,6  ,21 ,5 ,3 ,15,20,40,1,4 ,0x88CCCCFF,2,16,16,8 ,8 ,0  ,20,200,10,20,100,0,1,0,2,20 ,120,0,0,45 ,60 ,0];
Item_Catalogue[400] = ["thorn flail"    ,6,11E3,15,37,7,0xFFCCAA88,1,403,0,6  ,22 ,45,20,15,20,40,1,9 ,0xFFCCAA88,1,8 ,8 ,8 ,8 ,0  ,5 ,100,10,0 ,100,1,0,0,0,0  ,160,0,0,18 ,22 ,0];
Item_Catalogue[416] = ["poison flail"   ,6,12E3,15,37,7,0xFF8800FF,1,9  ,0,6  ,23 ,5 ,1 ,15,20,40,0,6 ,0x888800FF,1,16,16,8 ,8 ,100,20,300,20,0 ,99 ,0,1,0,4,200,240,0,0,4  ,5  ,0];
Item_Catalogue[435] = ["explosion flail",6,13E3,15,37,7,0xFFFF6622,1,9  ,1,6  ,24 ,3 ,5 ,15,20,40,1,19,0x88FF4422,2,16,16,16,16,0  ,19,20 ,3 ,0 ,80 ,1,0,0,1,0  ,360,0,0,120,160,0];
Item_Catalogue[457] = ["morning star"   ,7,15E3,15,38,7,0xFFAAAAAA,1,0  ,0,100,200,0 ,0 ,15,20,40,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0  ,0 ,0  ,0 ,0 ,0  ,0,0,0,0,0  ,0  ,0];//  ,   ,
Item_Catalogue[477] = ["stone ms"       ,7,16E3,15,38,7,0xFF884400,1,104,0,7  ,26 ,3 ,80,15,20,40,0,13,0xFF444444,1,16,16,8 ,8 ,0  ,20,200,10,9 ,100,0,0,0,0,0  ,70 ,0,0,60 ,110,0];
Item_Catalogue[485] = ["fire ms"        ,7,17E3,15,38,7,0xFFFF4444,1,9  ,1,7  ,27 ,4 ,1 ,15,20,40,1,22,0x66FF9911,2,16,16,20,20,0  ,0 ,100,10,0 ,98 ,1,0,0,1,30 ,90 ,0,0,8  ,15 ,0];
Item_Catalogue[502] = ["thunder ms"     ,7,18E3,15,38,7,0xFFFFFF00,1,5  ,0,7  ,28 ,5 ,5 ,15,20,40,1,20,0xFFFFFF44,2,16,32,8 ,8 ,50 ,0 ,100,10,0 ,100,0,0,0,3,0  ,170,0,0,1  ,222,0];
Item_Catalogue[510] = ["ice ms"         ,8,19E3,15,38,7,0xFFCCCCFF,1,11 ,0,8  ,29 ,5 ,3 ,15,20,40,1,4 ,0x88CCCCFF,2,16,16,8 ,8 ,0  ,20,200,10,10,100,0,1,0,2,25 ,120,0,0,90 ,120,0];
Item_Catalogue[518] = ["thorn ms"       ,8,2E4 ,15,38,7,0xFFCCAA88,1,103,0,8  ,30 ,90,20,15,20,40,1,9 ,0xFFCCAA88,1,8 ,8 ,8 ,8 ,0  ,0 ,100,10,0 ,100,1,0,0,0,0  ,160,0,0,18 ,22 ,0];
Item_Catalogue[526] = ["poison ms"      ,8,21E3,15,38,7,0xFF8800FF,1,9  ,1,8  ,31 ,5 ,1 ,15,20,40,0,6 ,0x888800FF,1,24,24,8 ,8 ,0  ,20,300,20,0 ,99 ,0,1,0,4,250,300,0,0,9  ,9  ,0];
Item_Catalogue[555] = ["explosion ms"   ,8,22E3,15,38,7,0xFFFF6622,1,9  ,1,8  ,32 ,3 ,5 ,15,20,40,1,19,0x88FF4422,2,8 ,40,16,16,10 ,10,15 ,3 ,0 ,80 ,1,0,0,1,0  ,500,0,0,360,480,0];

//   rings    [   ] = [0                ,1,2   ,3 ,4 ,5,6         ,7 ,8  ,9,10 ,11 ,12,13,14,15,16,17,18,19       ,20,21,22,23,24,25,26,27 ,28,29,30,1,2,33,4,35,36,37,8,39,40 ,41,2,43,44       ,45,46,47,48,49,0,51,52 ,53,54,55,56,57];
Item_Catalogue[289] = ["ring"           ,0,100 ,18,41,8,0xFFCCCCCC,25,0  ,0,2  ,3  ,0 ,0 ,20,30,60 ,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[290] = ["fire ring"      ,1,250 ,18,41,8,0xFFFF4444,25,3  ,0,3  ,4  ,1 ,1 ,20,30,60 ,0,6 ,0x88FF6611,2,24,24,16,16,0,0  ,100,10,0,98 ,1,0,0 ,1,50,30 ,0,0,4 ,6  ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[291] = ["thunder ring"   ,1,500 ,18,41,8,0xFFFFFF44,25,11 ,0,3  ,4  ,7 ,10,20,30,60 ,1,10,0xFFFFFF00,1,16,16,16,16,0,10 ,100,10,0,90 ,0,0,0 ,3,0 ,90 ,0,0,1 ,29 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[292] = ["long ring"      ,1,750 ,18,41,8,0xFF884400,25,0  ,0,5  ,10 ,0 ,0 ,20,30,90 ,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[293] = ["ice ring"       ,1,1000,18,41,8,0xFFAAAAFF,25,9  ,0,3  ,4  ,3 ,1 ,20,30,60 ,1,4 ,0xFFAAAAFF,2,16,24,16,16,0,25 ,50 ,10,0,90 ,0,1,0 ,2,20,80 ,0,0,15,30 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[294] = ["thorn ring"     ,2,1500,18,41,8,0xFFCCAA88,25,9  ,0,4  ,5  ,16,5 ,20,30,60 ,1,9 ,0xFFCCAA88,1,16,16,16,16,0,10 ,100,10,0,100,0,0,0 ,0,0 ,110,0,0,10,30 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[295] = ["power ring"     ,2,2E3 ,18,41,8,0xFFFFFFFF,25,0  ,0,15 ,30 ,0 ,0 ,20,30,60 ,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[296] = ["quick ring"     ,2,2500,18,41,8,0xFF99FF99,25,3  ,1,4  ,5  ,1 ,1 ,5 ,10,60 ,0,13,0xFFAAFFAA,1,80,12,40,8 ,0,15 ,50 ,10,0,98 ,1,0,0 ,0,0 ,50 ,0,0,10,10 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[297] = ["charge ring"    ,2,3E3 ,18,41,8,0xFFFF8844,25,3  ,0,4  ,5  ,1 ,1 ,20,30,60 ,0,2 ,0xFFFF4444,1,16,16,16,16,0,200,200,25,0,100,1,0,50,1,50,200,2,0,4 ,6  ,20,0,6 ,0xFFFF6611,2,16,16,16,16,0,0 ,50 ,10,0 ,86 ,0,0];
Item_Catalogue[298] = ["fire circle"    ,3,4E3 ,18,42,8,0xFFFF4444,25,3  ,0,5  ,6  ,1 ,1 ,20,30,60 ,0,6 ,0xFFFF6611,2,16,24,16,16,0,0  ,100,10,0,100,1,0,0 ,1,50,120,2,0,6 ,8  ,20,0,6 ,0x88FF6611,2,16,16,16,16,0,0 ,50 ,10,0 ,86 ,0,0];
Item_Catalogue[299] = ["thunder circle" ,3,4500,18,42,8,0xFFFFFF44,25,11 ,0,5  ,6  ,11,15,20,30,60 ,1,10,0xFFFFFF00,1,16,16,16,16,0,10 ,100,10,0,90 ,0,2,0 ,3,0 ,120,0,0,1 ,59 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[300] = ["long circle"    ,3,5E3 ,18,42,8,0xFF884400,25,0  ,0,10 ,15 ,0 ,0 ,20,30,120,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[301] = ["ice circle"     ,3,5500,18,42,8,0xFFAAAAFF,25,11 ,0,5  ,6  ,1 ,1 ,20,30,60 ,0,7 ,0xFFAAAAFF,2,16,16,16,16,0,100,100,10,0,100,1,0,0 ,2,20,120,2,0,5 ,10 ,30,1,4 ,0x88AAAAFF,2,8 ,24,8 ,8 ,0,10,50 ,10,0 ,86 ,0,0];
Item_Catalogue[302] = ["thorn circle"   ,4,6E3 ,18,42,8,0xFFCCAA88,25,9  ,0,6  ,7  ,16,5 ,20,30,60 ,1,9 ,0xFFCCAA88,1,16,16,16,16,0,10 ,100,10,0,100,0,2,0 ,0,0 ,130,0,0,20,60 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[303] = ["power circle"   ,4,6500,18,42,8,0xFFFFFFFF,25,0  ,0,30 ,60 ,0 ,0 ,20,30,60 ,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[304] = ["quick circle"   ,4,7E3 ,18,42,8,0xFF99FF99,25,9  ,1,6  ,7  ,3 ,1 ,5 ,10,60 ,0,13,0xFFAAFFAA,1,24,24,16,16,0,15 ,50 ,10,0,95 ,1,0,0 ,0,0 ,50 ,0,0,10,10 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[305] = ["charge circle"  ,4,7500,18,42,8,0xFFFFFF44,25,3  ,0,6  ,7  ,1 ,1 ,20,30,60 ,0,6 ,0xFF666666,1,32,24,16,16,0,200,200,25,0,100,1,0,50,3,50,400,2,0,1 ,99 ,20,1,10,0x88FFFF00,2,16,16,16,16,0,0 ,100,10,80,86 ,0,0];
Item_Catalogue[306] = ["fire chakram"   ,5,8E3 ,18,43,8,0xFFFF4444,25,3  ,0,7  ,8  ,1 ,5 ,20,30,60 ,0,6 ,0xFFFF6611,2,16,24,16,16,0,0  ,180,10,2,100,0,2,0 ,1,50,150,2,0,12,16 ,20,0,6 ,0x88FF6611,2,16,16,16,16,0,0 ,50 ,10,0 ,86 ,0,0];
Item_Catalogue[307] = ["chakram"        ,5,8500,18,43,8,0xFF444444,5 ,0  ,0,1  ,1  ,0 ,0 ,20,30,30 ,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[319] = ["thunder chakram",5,8500,18,43,8,0xFFFFFF44,25,11 ,0,7  ,8  ,15,20,20,30,60 ,1,10,0x88FFFF00,1,16,16,16,16,0,10 ,100,10,0,95 ,0,2,0 ,3,0 ,150,0,0,1 ,149,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[335] = ["long chakram"   ,5,9E3 ,18,43,8,0xFF884400,25,0  ,0,20 ,30 ,0 ,0 ,20,30,150,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[352] = ["ice chakram"    ,5,9500,18,43,8,0xFFAAAAFF,20,9  ,0,7  ,8  ,3 ,1 ,20,30,60 ,1,4 ,0xFFAAAAFF,2,16,24,16,16,0,25 ,50 ,10,0,90 ,0,1,0 ,2,20,40 ,0,0,30,45 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[367] = ["thorn chakram"  ,6,1E4 ,18,43,8,0xFFCCAA88,25,9  ,0,8  ,9  ,16,5 ,20,30,60 ,1,9 ,0xFFCCAA88,1,16,16,16,16,0,10 ,150,10,0,90 ,0,2,0 ,0,0 ,150,0,0,30,90 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[401] = ["power chakram"  ,6,11E3,18,43,8,0xFFFFFFFF,20,0  ,0,60 ,120,0 ,0 ,20,30,60 ,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[417] = ["quick chakram"  ,6,12E3,18,43,8,0xFF99FF99,25,9  ,1,8  ,9  ,3 ,1 ,5 ,10,60 ,1,9 ,0xFFAAFFAA,2,16,16,16,16,0,15 ,50 ,10,0,95 ,1,0,0 ,0,0 ,50 ,0,0,33,33 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[417] = ["quick chakram"  ,6,12E3,18,43,8,0xFF99FF99,25,9  ,1,8  ,9  ,3 ,1 ,5 ,10,60 ,1,9 ,0xFFAAFFAA,2,16,16,16,16,0,15 ,50 ,10,0,95 ,1,0,0 ,0,0 ,50 ,0,0,33,33 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[436] = ["charge chakram" ,6,13E3,18,43,8,0xFF99CCFF,25,11 ,0,8  ,9  ,1 ,1 ,20,30,60 ,0,7 ,0xFF99CCFF,2,16,16,16,16,0,200,200,25,0,100,0,2,0 ,2,20,600,2,0,40,60 ,50,1,4 ,0x88AAAAFF,2,8 ,16,8 ,8 ,0,5 ,100,10,0 ,104,0,0];
Item_Catalogue[458] = ["fire god"       ,7,15E3,18,44,8,0xFFFF4444,25,109,0,9  ,10 ,20,1 ,20,30,60 ,1,22,0x66FF6611,2,16,16,16,16,0,0  ,100,15,0,98 ,1,0,0 ,1,50,200,0,0,36,48 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[478] = ["thunder god"    ,7,16E3,18,44,8,0xFFFFFF44,25,11 ,0,9  ,10 ,20,20,20,30,60 ,1,10,0x88FFFF00,1,16,16,16,16,0,5  ,100,10,0,98 ,0,2,0 ,3,0 ,180,0,0,1 ,399,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[486] = ["long god"       ,7,17E3,18,44,8,0xFF884400,10,0  ,0,40 ,60 ,0 ,0 ,20,30,180,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[503] = ["ice god"        ,7,18E3,18,44,8,0xFFAAAAFF,25,11 ,0,9  ,10 ,1 ,1 ,20,30,60 ,0,7 ,0xFFAAAAFF,2,16,16,16,16,0,100,100,10,0,100,1,0,0 ,2,30,120,2,0,30,45 ,30,1,9 ,0x88AAAAFF,2,16,16,8 ,8 ,0,10,50 ,10,0 ,86 ,0,0];
Item_Catalogue[511] = ["thorn god"      ,8,19E3,18,44,8,0xFFCCAA88,25,9  ,0,10 ,11 ,32,5 ,20,30,60 ,1,9 ,0xFFCCAA88,1,16,16,16,16,0,10 ,100,10,0,100,0,2,0 ,0,0 ,160,0,0,40,120,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[519] = ["power god"      ,8,2E4 ,18,44,8,0xFFFFFFFF,10,0  ,0,180,360,0 ,0 ,20,30,60 ,0,0 ,0         ,1,0 ,0 ,0 ,0 ,0,0  ,0  ,0 ,0,0  ,0,0,0 ,0,0 ,0  ,0];// ,   ,  , ,  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[527] = ["quick god"      ,8,21E3,18,44,8,0xFF99FF99,10,9  ,1,10 ,11 ,5 ,1 ,5 ,10,60 ,1,20,0xFFAAFFAA,2,16,16,16,16,0,15 ,50 ,10,0,95 ,1,0,0 ,0,0 ,50 ,0,0,55,55 ,0];//  ,          , ,  ,  ,  ,  , ,  ,   ,  ,  ,   , ,
Item_Catalogue[556] = ["charge god"     ,8,22E3,18,44,8,0xFF444444,25,3  ,0,10 ,11 ,1 ,1 ,20,30,60 ,0,6 ,0xFF664422,1,16,16,16,16,0,200,200,25,0,100,1,0,50,0,0 ,800,2,1,40,60 ,50,1,24,0xFF664422,2,16,64,24,24,0,5 ,25 ,20,0 ,90 ,0,0];

//   stones   [   ] = [0            ,1,2   ,3,4,5          ,6         ,7          ,8  ,9,10               ,11];
Item_Catalogue[19] =  ["White Stone",1,400 ,7,6,Class_Compo,0xFFFFFFFF,Stone_White,50 ,0,"LP +50"         ,""];
Item_Catalogue[84] =  ["White Stone",2,800 ,7,6,Class_Compo,0xFFFFFFFF,Stone_White,100,0,"LP +100"        ,""];
Item_Catalogue[143] = ["White Stone",3,1200,7,6,Class_Compo,0xFFFFFFFF,Stone_White,150,0,"LP +150"        ,""];
Item_Catalogue[209] = ["White Stone",4,1600,7,6,Class_Compo,0xFFFFFFFF,Stone_White,200,0,"LP +200"        ,""];
Item_Catalogue[323] = ["White Stone",5,2E3 ,7,6,Class_Compo,0xFFFFFFFF,Stone_White,300,0,"LP +300"        ,""];
Item_Catalogue[418] = ["White Stone",6,2400,7,6,Class_Compo,0xFFFFFFFF,Stone_White,400,0,"LP +400"        ,""];
Item_Catalogue[491] = ["White Stone",7,2800,7,6,Class_Compo,0xFFFFFFFF,Stone_White,500,0,"LP +500"        ,""];
Item_Catalogue[20] =  ["Red Stone"  ,1,400 ,7,6,Class_Compo,0xFFFF3333,Stone_Red  ,5  ,0,"STR +5"         ,""];
Item_Catalogue[85] =  ["Red Stone"  ,2,800 ,7,6,Class_Compo,0xFFFF3333,Stone_Red  ,10 ,0,"STR +10"        ,""];
Item_Catalogue[144] = ["Red Stone"  ,3,1200,7,6,Class_Compo,0xFFFF3333,Stone_Red  ,15 ,0,"STR +15"        ,""];
Item_Catalogue[210] = ["Red Stone"  ,4,1600,7,6,Class_Compo,0xFFFF3333,Stone_Red  ,20 ,0,"STR +20"        ,""];
Item_Catalogue[324] = ["Red Stone"  ,5,2E3 ,7,6,Class_Compo,0xFFFF3333,Stone_Red  ,25 ,0,"STR +25"        ,""];
Item_Catalogue[419] = ["Red Stone"  ,6,2400,7,6,Class_Compo,0xFFFF3333,Stone_Red  ,30 ,0,"STR +30"        ,""];
Item_Catalogue[492] = ["Red Stone"  ,7,2800,7,6,Class_Compo,0xFFFF3333,Stone_Red  ,40 ,0,"STR +40"        ,""];
Item_Catalogue[21] =  ["Green Stone",1,400 ,7,6,Class_Compo,0xFF33FF33,Stone_Green,5  ,0,"DEX +5"         ,""];
Item_Catalogue[86] =  ["Green Stone",2,800 ,7,6,Class_Compo,0xFF33FF33,Stone_Green,10 ,0,"DEX +10"        ,""];
Item_Catalogue[145] = ["Green Stone",3,1200,7,6,Class_Compo,0xFF33FF33,Stone_Green,15 ,0,"DEX +15"        ,""];
Item_Catalogue[211] = ["Green Stone",4,1600,7,6,Class_Compo,0xFF33FF33,Stone_Green,20 ,0,"DEX +20"        ,""];
Item_Catalogue[325] = ["Green Stone",5,2E3 ,7,6,Class_Compo,0xFF33FF33,Stone_Green,25 ,0,"DEX +25"        ,""];
Item_Catalogue[420] = ["Green Stone",6,2400,7,6,Class_Compo,0xFF33FF33,Stone_Green,30 ,0,"DEX +30"        ,""];
Item_Catalogue[493] = ["Green Stone",7,2800,7,6,Class_Compo,0xFF33FF33,Stone_Green,40 ,0,"DEX +40"        ,""];
Item_Catalogue[22] =  ["Blue Stone" ,1,400 ,7,6,Class_Compo,0xFF3333FF,Stone_Blue ,5  ,0,"MAG +5"         ,""];
Item_Catalogue[87] =  ["Blue Stone" ,2,800 ,7,6,Class_Compo,0xFF3333FF,Stone_Blue ,10 ,0,"MAG +10"        ,""];
Item_Catalogue[146] = ["Blue Stone" ,3,1200,7,6,Class_Compo,0xFF3333FF,Stone_Blue ,15 ,0,"MAG +15"        ,""];
Item_Catalogue[212] = ["Blue Stone" ,4,1600,7,6,Class_Compo,0xFF3333FF,Stone_Blue ,20 ,0,"MAG +20"        ,""];
Item_Catalogue[326] = ["Blue Stone" ,5,2E3 ,7,6,Class_Compo,0xFF3333FF,Stone_Blue ,25 ,0,"MAG +25"        ,""];
Item_Catalogue[421] = ["Blue Stone" ,6,2400,7,6,Class_Compo,0xFF3333FF,Stone_Blue ,30 ,0,"MAG +30"        ,""];
Item_Catalogue[494] = ["Blue Stone" ,7,2800,7,6,Class_Compo,0xFF3333FF,Stone_Blue ,40 ,0,"MAG +40"        ,""];
Item_Catalogue[23] =  ["Black Stone",1,400 ,7,6,Class_Compo,0xFF666666,Stone_Black,2  ,0,"STR DEX MAG +2" ,""];
Item_Catalogue[88] =  ["Black Stone",2,800 ,7,6,Class_Compo,0xFF666666,Stone_Black,4  ,0,"STR DEX MAG +4" ,""];
Item_Catalogue[147] = ["Black Stone",3,1200,7,6,Class_Compo,0xFF666666,Stone_Black,6  ,0,"STR DEX MAG +6" ,""];
Item_Catalogue[213] = ["Black Stone",4,1600,7,6,Class_Compo,0xFF666666,Stone_Black,8  ,0,"STR DEX MAG +8" ,""];
Item_Catalogue[327] = ["Black Stone",5,2E3 ,7,6,Class_Compo,0xFF666666,Stone_Black,10 ,0,"STR DEX MAG +10",""];
Item_Catalogue[422] = ["Black Stone",6,2400,7,6,Class_Compo,0xFF666666,Stone_Black,15 ,0,"STR DEX MAG +15",""];
Item_Catalogue[495] = ["Black Stone",7,2800,7,6,Class_Compo,0xFF666666,Stone_Black,20 ,0,"STR DEX MAG +20",""];

//  crystals  [   ] = [0               ,1,2   ,3,4,5          ,6         ,7             ,8  ,9 ,10                 ,11];
Item_Catalogue[24] =  ["Red Crystal"   ,1,1200,8,7,Class_Compo,0xFFFF8888,Crystal_Red   ,1  ,3 ,"AT +(1-3)"        ,""];
Item_Catalogue[89] =  ["Red Crystal"   ,2,2400,8,7,Class_Compo,0xFFFF8888,Crystal_Red   ,2  ,6 ,"AT +(2-6)"        ,""];
Item_Catalogue[148] = ["Red Crystal"   ,3,3600,8,7,Class_Compo,0xFFFF8888,Crystal_Red   ,3  ,9 ,"AT +(3-9)"        ,""];
Item_Catalogue[221] = ["Red Crystal"   ,4,4800,8,7,Class_Compo,0xFFFF8888,Crystal_Red   ,4  ,12,"AT +(4-12)"       ,""];
Item_Catalogue[336] = ["Red Crystal"   ,5,6E3 ,8,7,Class_Compo,0xFFFF8888,Crystal_Red   ,5  ,15,"AT +(5-15)"       ,""];
Item_Catalogue[424] = ["Red Crystal"   ,6,7200,8,7,Class_Compo,0xFFFF8888,Crystal_Red   ,6  ,18,"AT +(6-18)"       ,""];
Item_Catalogue[528] = ["Red Crystal"   ,7,8400,8,7,Class_Compo,0xFFFF8888,Crystal_Red   ,7  ,21,"AT +(7-21)"       ,""];
Item_Catalogue[25] =  ["Yellow Crystal",1,1200,8,7,Class_Compo,0xFFFFFF88,Crystal_Yellow,20 ,0 ,"AT +20%"          ,""];
Item_Catalogue[90] =  ["Yellow Crystal",2,2400,8,7,Class_Compo,0xFFFFFF88,Crystal_Yellow,30 ,0 ,"AT +30%"          ,""];
Item_Catalogue[149] = ["Yellow Crystal",3,3600,8,7,Class_Compo,0xFFFFFF88,Crystal_Yellow,40 ,0 ,"AT +40%"          ,""];
Item_Catalogue[222] = ["Yellow Crystal",4,4800,8,7,Class_Compo,0xFFFFFF88,Crystal_Yellow,50 ,0 ,"AT +50%"          ,""];
Item_Catalogue[337] = ["Yellow Crystal",5,6E3 ,8,7,Class_Compo,0xFFFFFF88,Crystal_Yellow,60 ,0 ,"AT +60%"          ,""];
Item_Catalogue[425] = ["Yellow Crystal",6,7200,8,7,Class_Compo,0xFFFFFF88,Crystal_Yellow,70 ,0 ,"AT +70%"          ,""];
Item_Catalogue[529] = ["Yellow Crystal",7,8400,8,7,Class_Compo,0xFFFFFF88,Crystal_Yellow,80 ,0 ,"AT +80%"          ,""];
Item_Catalogue[26] =  ["Silver Crystal",1,1200,8,7,Class_Compo,0xFFCCCCCC,Crystal_Silver,1  ,0 ,"Defense +1"       ,""];
Item_Catalogue[91] =  ["Silver Crystal",2,2400,8,7,Class_Compo,0xFFCCCCCC,Crystal_Silver,3  ,0 ,"Defense +3"       ,""];
Item_Catalogue[150] = ["Silver Crystal",3,3600,8,7,Class_Compo,0xFFCCCCCC,Crystal_Silver,6  ,0 ,"Defense +6"       ,""];
Item_Catalogue[223] = ["Silver Crystal",4,4800,8,7,Class_Compo,0xFFCCCCCC,Crystal_Silver,9  ,0 ,"Defense +9"       ,""];
Item_Catalogue[338] = ["Silver Crystal",5,6E3 ,8,7,Class_Compo,0xFFCCCCCC,Crystal_Silver,12 ,0 ,"Defense +12"      ,""];
Item_Catalogue[426] = ["Silver Crystal",6,7200,8,7,Class_Compo,0xFFCCCCCC,Crystal_Silver,15 ,0 ,"Defense +15"      ,""];
Item_Catalogue[530] = ["Silver Crystal",7,8400,8,7,Class_Compo,0xFFCCCCCC,Crystal_Silver,18 ,0 ,"Defense +18"      ,""];
Item_Catalogue[27] =  ["Purple Crystal",1,1200,8,7,Class_Compo,0xFFCC99FF,Crystal_Purple,10 ,0 ,"Magic Defense 10%",""];
Item_Catalogue[92] =  ["Purple Crystal",2,2400,8,7,Class_Compo,0xFFCC99FF,Crystal_Purple,20 ,0 ,"Magic Defense 20%",""];
Item_Catalogue[151] = ["Purple Crystal",3,3600,8,7,Class_Compo,0xFFCC99FF,Crystal_Purple,30 ,0 ,"Magic Defense 30%",""];
Item_Catalogue[224] = ["Purple Crystal",4,4800,8,7,Class_Compo,0xFFCC99FF,Crystal_Purple,40 ,0 ,"Magic Defense 40%",""];
Item_Catalogue[339] = ["Purple Crystal",5,6E3 ,8,7,Class_Compo,0xFFCC99FF,Crystal_Purple,50 ,0 ,"Magic Defense 50%",""];
Item_Catalogue[427] = ["Purple Crystal",6,7200,8,7,Class_Compo,0xFFCC99FF,Crystal_Purple,60 ,0 ,"Magic Defense 60%",""];
Item_Catalogue[531] = ["Purple Crystal",7,8400,8,7,Class_Compo,0xFFCC99FF,Crystal_Purple,70 ,0 ,"Magic Defense 70%",""];
Item_Catalogue[28] =  ["Black Crystal" ,1,1200,8,7,Class_Compo,0xFF666666,Crystal_Black ,10 ,0 ,"Block rate 10%"   ,""];
Item_Catalogue[93] =  ["Black Crystal" ,2,2400,8,7,Class_Compo,0xFF666666,Crystal_Black ,20 ,0 ,"Block rate 20%"   ,""];
Item_Catalogue[152] = ["Black Crystal" ,3,3600,8,7,Class_Compo,0xFF666666,Crystal_Black ,30 ,0 ,"Block rate 30%"   ,""];
Item_Catalogue[225] = ["Black Crystal" ,4,4800,8,7,Class_Compo,0xFF666666,Crystal_Black ,40 ,0 ,"Block rate 40%"   ,""];
Item_Catalogue[340] = ["Black Crystal" ,5,6E3 ,8,7,Class_Compo,0xFF666666,Crystal_Black ,50 ,0 ,"Block rate 50%"   ,""];
Item_Catalogue[428] = ["Black Crystal" ,6,7200,8,7,Class_Compo,0xFF666666,Crystal_Black ,60 ,0 ,"Block rate 60%"   ,""];
Item_Catalogue[532] = ["Black Crystal" ,7,8400,8,7,Class_Compo,0xFF666666,Crystal_Black ,70 ,0 ,"Block rate 70%"   ,""];

//   jewels   [   ] = [0           ,1,2   ,3,4,5           ,6        ,7               ,8  ,9 ,10                   ,11];
Item_Catalogue[31] =  ["Ruby"      ,1,2E3 ,9,8,Class_Compo,0xFFFF0000,Jewel_Ruby      ,1  ,2 ,"Add 1-2 fire"       ,"damage"];
Item_Catalogue[96] =  ["Ruby"      ,2,4E3 ,9,8,Class_Compo,0xFFFF0000,Jewel_Ruby      ,3  ,4 ,"Add 3-4 fire"       ,"damage"];
Item_Catalogue[161] = ["Ruby"      ,3,6E3 ,9,8,Class_Compo,0xFFFF0000,Jewel_Ruby      ,5  ,6 ,"Add 5-6 fire"       ,"damage"];
Item_Catalogue[260] = ["Ruby"      ,4,8E3 ,9,8,Class_Compo,0xFFFF0000,Jewel_Ruby      ,6  ,9 ,"Add 6-9 fire"       ,"damage"];
Item_Catalogue[369] = ["Ruby"      ,5,1E4 ,9,8,Class_Compo,0xFFFF0000,Jewel_Ruby      ,8  ,12,"Add 8-12 fire"      ,"damage"];
Item_Catalogue[443] = ["Ruby"      ,6,12E3,9,8,Class_Compo,0xFFFF0000,Jewel_Ruby      ,10 ,15,"Add 10-15 fire"     ,"damage"];
Item_Catalogue[533] = ["Ruby"      ,7,14E3,9,8,Class_Compo,0xFFFF0000,Jewel_Ruby      ,15 ,20,"Add 15-20 fire"     ,"damage"];
Item_Catalogue[32] =  ["Garnet"    ,1,2E3 ,9,8,Class_Compo,0xFFFF3333,Jewel_Garnet    ,20 ,0 ,"+0.4s Fire Length"  ,""];
Item_Catalogue[97] =  ["Garnet"    ,2,4E3 ,9,8,Class_Compo,0xFFFF3333,Jewel_Garnet    ,30 ,0 ,"+0.6s Fire Length"  ,""];
Item_Catalogue[162] = ["Garnet"    ,3,6E3 ,9,8,Class_Compo,0xFFFF3333,Jewel_Garnet    ,40 ,0 ,"+0.8s Fire Length"  ,""];
Item_Catalogue[261] = ["Garnet"    ,4,8E3 ,9,8,Class_Compo,0xFFFF3333,Jewel_Garnet    ,55 ,0 ,"+1.1s Fire Length"  ,""];
Item_Catalogue[370] = ["Garnet"    ,5,1E4 ,9,8,Class_Compo,0xFFFF3333,Jewel_Garnet    ,70 ,0 ,"+1.4s Fire Length"  ,""];
Item_Catalogue[444] = ["Garnet"    ,6,12E3,9,8,Class_Compo,0xFFFF3333,Jewel_Garnet    ,85 ,0 ,"+1.7s Fire Length"  ,""];
Item_Catalogue[534] = ["Garnet"    ,7,14E3,9,8,Class_Compo,0xFFFF3333,Jewel_Garnet    ,100,0 ,"+2.0s Fire Length"  ,""];
Item_Catalogue[33] =  ["Sapphire"  ,1,2E3 ,9,8,Class_Compo,0xFF6699FF,Jewel_Sapphire  ,3  ,5 ,"Add 3-5 ice"        ,"damage"];
Item_Catalogue[98] =  ["Sapphire"  ,2,4E3 ,9,8,Class_Compo,0xFF6699FF,Jewel_Sapphire  ,6  ,10,"Add 6-10 ice"       ,"damage"];
Item_Catalogue[163] = ["Sapphire"  ,3,6E3 ,9,8,Class_Compo,0xFF6699FF,Jewel_Sapphire  ,9  ,15,"Add 9-15 ice"       ,"damage"];
Item_Catalogue[262] = ["Sapphire"  ,4,8E3 ,9,8,Class_Compo,0xFF6699FF,Jewel_Sapphire  ,12 ,20,"Add 12-20 ice"      ,"damage"];
Item_Catalogue[371] = ["Sapphire"  ,5,1E4 ,9,8,Class_Compo,0xFF6699FF,Jewel_Sapphire  ,15 ,25,"Add 15-25 ice"      ,"damage"];
Item_Catalogue[446] = ["Sapphire"  ,6,12E3,9,8,Class_Compo,0xFF6699FF,Jewel_Sapphire  ,18 ,30,"Add 18-30 ice"      ,"damage"];
Item_Catalogue[535] = ["Sapphire"  ,7,14E3,9,8,Class_Compo,0xFF6699FF,Jewel_Sapphire  ,21 ,35,"Add 21-35 ice"      ,"damage"];
Item_Catalogue[34] =  ["Aquamarine",1,2E3 ,9,8,Class_Compo,0xFF66CCFF,Jewel_Aquamarine,5  ,0 ,"+5% Cold effect"    ,""];
Item_Catalogue[99] =  ["Aquamarine",2,4E3 ,9,8,Class_Compo,0xFF66CCFF,Jewel_Aquamarine,10 ,0 ,"+10% Cold effect"   ,""];
Item_Catalogue[164] = ["Aquamarine",3,6E3 ,9,8,Class_Compo,0xFF66CCFF,Jewel_Aquamarine,15 ,0 ,"+15% Cold effect"   ,""];
Item_Catalogue[263] = ["Aquamarine",4,8E3 ,9,8,Class_Compo,0xFF66CCFF,Jewel_Aquamarine,20 ,0 ,"+20% Cold effect"   ,""];
Item_Catalogue[372] = ["Aquamarine",5,1E4 ,9,8,Class_Compo,0xFF66CCFF,Jewel_Aquamarine,25 ,0 ,"+25% Cold effect"   ,""];
Item_Catalogue[447] = ["Aquamarine",6,12E3,9,8,Class_Compo,0xFF66CCFF,Jewel_Aquamarine,30 ,0 ,"+30% Cold effect"   ,""];
Item_Catalogue[536] = ["Aquamarine",7,14E3,9,8,Class_Compo,0xFF66CCFF,Jewel_Aquamarine,35 ,0 ,"+35% Cold effect"   ,""];
Item_Catalogue[35] =  ["Topaz"     ,1,2E3 ,9,8,Class_Compo,0xFFFFCC33,Jewel_Topaz     ,0  ,4 ,"Add 0-4 thunder"    ,"damage"];
Item_Catalogue[100] = ["Topaz"     ,2,4E3 ,9,8,Class_Compo,0xFFFFCC33,Jewel_Topaz     ,0  ,9 ,"Add 0-9 thunder"    ,"damage"];
Item_Catalogue[165] = ["Topaz"     ,3,6E3 ,9,8,Class_Compo,0xFFFFCC33,Jewel_Topaz     ,0  ,15,"Add 0-15 thunder"   ,"damage"];
Item_Catalogue[264] = ["Topaz"     ,4,8E3 ,9,8,Class_Compo,0xFFFFCC33,Jewel_Topaz     ,0  ,22,"Add 0-22 thunder"   ,"damage"];
Item_Catalogue[373] = ["Topaz"     ,5,1E4 ,9,8,Class_Compo,0xFFFFCC33,Jewel_Topaz     ,0  ,30,"Add 0-30 thunder"   ,"damage"];
Item_Catalogue[448] = ["Topaz"     ,6,12E3,9,8,Class_Compo,0xFFFFCC33,Jewel_Topaz     ,0  ,39,"Add 0-39 thunder"   ,"damage"];
Item_Catalogue[537] = ["Topaz"     ,7,14E3,9,8,Class_Compo,0xFFFFCC33,Jewel_Topaz     ,0  ,49,"Add 0-49 thunder"   ,"damage"];
Item_Catalogue[36] =  ["Emerald"   ,1,2E3 ,9,8,Class_Compo,0xFF33FF33,Jewel_Emerald   ,0  ,1 ,"Add 0-1 poison"     ,"damage"];
Item_Catalogue[101] = ["Emerald"   ,2,4E3 ,9,8,Class_Compo,0xFF33FF33,Jewel_Emerald   ,1  ,1 ,"Add 1-1 poison"     ,"damage"];
Item_Catalogue[166] = ["Emerald"   ,3,6E3 ,9,8,Class_Compo,0xFF33FF33,Jewel_Emerald   ,1  ,2 ,"Add 1-2 poison"     ,"damage"];
Item_Catalogue[265] = ["Emerald"   ,4,8E3 ,9,8,Class_Compo,0xFF33FF33,Jewel_Emerald   ,2  ,2 ,"Add 2-2 poison"     ,"damage"];
Item_Catalogue[374] = ["Emerald"   ,5,1E4 ,9,8,Class_Compo,0xFF33FF33,Jewel_Emerald   ,2  ,3 ,"Add 2-3 poison"     ,"damage"];
Item_Catalogue[449] = ["Emerald"   ,6,12E3,9,8,Class_Compo,0xFF33FF33,Jewel_Emerald   ,3  ,3 ,"Add 3-3 poison"     ,"damage"];
Item_Catalogue[538] = ["Emerald"   ,7,14E3,9,8,Class_Compo,0xFF33FF33,Jewel_Emerald   ,3  ,4 ,"Add 3-4 poison"     ,"damage"];
Item_Catalogue[37] =  ["Peridot"   ,1,2E3 ,9,8,Class_Compo,0xFF99FF33,Jewel_Peridot   ,50 ,0 ,"+1s Poison Length"  ,""];
Item_Catalogue[102] = ["Peridot"   ,2,4E3 ,9,8,Class_Compo,0xFF99FF33,Jewel_Peridot   ,100,0 ,"+2s Poison Length"  ,""];
Item_Catalogue[167] = ["Peridot"   ,3,6E3 ,9,8,Class_Compo,0xFF99FF33,Jewel_Peridot   ,150,0 ,"+3s Poison Length"  ,""];
Item_Catalogue[266] = ["Peridot"   ,4,8E3 ,9,8,Class_Compo,0xFF99FF33,Jewel_Peridot   ,200,0 ,"+4s Poison Length"  ,""];
Item_Catalogue[375] = ["Peridot"   ,5,1E4 ,9,8,Class_Compo,0xFF99FF33,Jewel_Peridot   ,250,0 ,"+5s Poison Length"  ,""];
Item_Catalogue[450] = ["Peridot"   ,6,12E3,9,8,Class_Compo,0xFF99FF33,Jewel_Peridot   ,300,0 ,"+6s Poison Length"  ,""];
Item_Catalogue[539] = ["Peridot"   ,7,14E3,9,8,Class_Compo,0xFF99FF33,Jewel_Peridot   ,350,0 ,"+7s Poison Length"  ,""];
Item_Catalogue[38] =  ["Diamond"   ,1,4E3 ,9,8,Class_Compo,0xFFFFFFFF,Jewel_Diamond   ,5  ,0 ,"+0.1s Freeze Length",""];
Item_Catalogue[103] = ["Diamond"   ,2,4E3 ,9,8,Class_Compo,0xFFFFFFFF,Jewel_Diamond   ,10 ,0 ,"+0.2s Freeze Length",""];
Item_Catalogue[168] = ["Diamond"   ,3,6E3 ,9,8,Class_Compo,0xFFFFFFFF,Jewel_Diamond   ,15 ,0 ,"+0.3s Freeze Length",""];
Item_Catalogue[267] = ["Diamond"   ,4,8E3 ,9,8,Class_Compo,0xFFFFFFFF,Jewel_Diamond   ,20 ,0 ,"+0.4s Freeze Length",""];
Item_Catalogue[376] = ["Diamond"   ,5,1E4 ,9,8,Class_Compo,0xFFFFFFFF,Jewel_Diamond   ,25 ,0 ,"+0.5s Freeze Length",""];
Item_Catalogue[445] = ["Diamond"   ,6,12E3,9,8,Class_Compo,0xFFFFFFFF,Jewel_Diamond   ,30 ,0 ,"+0.6s Freeze Length",""];
Item_Catalogue[540] = ["Diamond"   ,7,14E3,9,8,Class_Compo,0xFFFFFFFF,Jewel_Diamond   ,35 ,0 ,"+0.7s Freeze Length",""];

//   cards    [   ] = [0                  ,1,2   ,3 ,4 ,5          ,6         ,7          ,8  ,9  ,10                   ,11];
Item_Catalogue[39] =  ["Quick's Card"     ,1,4E3 ,10,46,Class_Compo,0xFF885500,Card_Quicks,10 ,0  ,"-10% Limit AGI"     ,""];
Item_Catalogue[104] = ["Quick's Card"     ,2,8E3 ,10,46,Class_Compo,0xFF885500,Card_Quicks,20 ,0  ,"-20% Limit AGI"     ,""];
Item_Catalogue[169] = ["Quick's Card"     ,3,12E3,10,46,Class_Compo,0xFF885500,Card_Quicks,30 ,0  ,"-30% Limit AGI"     ,""];
Item_Catalogue[237] = ["Quick's Card"     ,4,16E3,10,46,Class_Compo,0xFF885500,Card_Quicks,40 ,0  ,"-40% Limit AGI"     ,""];
Item_Catalogue[353] = ["Quick's Card"     ,5,2E4 ,10,46,Class_Compo,0xFF885500,Card_Quicks,50 ,0  ,"-50% Limit AGI"     ,""];
Item_Catalogue[542] = ["Quick's Card"     ,7,28E3,10,46,Class_Compo,0xFF885500,Card_Quicks,60 ,0  ,"-60% Limit AGI"     ,""];
Item_Catalogue[40] =  ["Long Sword's Card",1,4E3 ,10,47,Class_Compo,0xFF333333,Card_Longsw,5  ,0  ,"+5 Length of sword" ,""];
Item_Catalogue[105] = ["Long Sword's Card",2,8E3 ,10,47,Class_Compo,0xFF333333,Card_Longsw,8  ,0  ,"+8 Length of sword" ,""];
Item_Catalogue[170] = ["Long Sword's Card",3,12E3,10,47,Class_Compo,0xFF333333,Card_Longsw,10 ,0  ,"+10 Length of sword",""];
Item_Catalogue[242] = ["Long Sword's Card",4,16E3,10,47,Class_Compo,0xFF333333,Card_Longsw,12 ,0  ,"+12 Length of sword",""];
Item_Catalogue[354] = ["Long Sword's Card",5,2E4 ,10,47,Class_Compo,0xFF333333,Card_Longsw,15 ,0  ,"+15 Length of sword",""];
Item_Catalogue[465] = ["Long Sword's Card",6,24E3,10,47,Class_Compo,0xFF333333,Card_Longsw,20 ,0  ,"+20 Length of sword",""];
Item_Catalogue[543] = ["Long Sword's Card",7,28E3,10,47,Class_Compo,0xFF333333,Card_Longsw,25 ,0  ,"+25 Length of sword",""];
Item_Catalogue[41] =  ["Catapult's Card"  ,1,4E3 ,10,48,Class_Compo,0xFF663300,Card_Catapt,20 ,0  ,"+20 Length"         ,""];
Item_Catalogue[106] = ["Catapult's Card"  ,2,8E3 ,10,48,Class_Compo,0xFF663300,Card_Catapt,40 ,0  ,"+40 Length"         ,""];
Item_Catalogue[171] = ["Catapult's Card"  ,3,12E3,10,48,Class_Compo,0xFF663300,Card_Catapt,60 ,0  ,"+60 Length"         ,""];
Item_Catalogue[240] = ["Catapult's Card"  ,4,16E3,10,48,Class_Compo,0xFF663300,Card_Catapt,80 ,0  ,"+80 Length"         ,""];
Item_Catalogue[355] = ["Catapult's Card"  ,5,2E4 ,10,48,Class_Compo,0xFF663300,Card_Catapt,100,0  ,"+100 Length"        ,""];
Item_Catalogue[466] = ["Catapult's Card"  ,6,24E3,10,48,Class_Compo,0xFF663300,Card_Catapt,120,0  ,"+120 Length"        ,""];
Item_Catalogue[544] = ["Catapult's Card"  ,7,28E3,10,48,Class_Compo,0xFF663300,Card_Catapt,150,0  ,"+150 Length"        ,""];
Item_Catalogue[42] =  ["Pierce's Card"    ,1,4E3 ,10,49,Class_Compo,0xFFCCCCFF,Card_Catapt,25 ,0  ,"25% chance of"      ,"penetrate"];
Item_Catalogue[107] = ["Pierce's Card"    ,2,8E3 ,10,49,Class_Compo,0xFFCCCCFF,Card_Catapt,50 ,0  ,"50% chance of"      ,"penetrate"];
Item_Catalogue[172] = ["Pierce's Card"    ,3,12E3,10,49,Class_Compo,0xFFCCCCFF,Card_Catapt,75 ,0  ,"75% chance of"      ,"penetrate"];
Item_Catalogue[268] = ["Pierce's Card"    ,4,16E3,10,49,Class_Compo,0xFFCCCCFF,Card_Catapt,100,0  ,"100% chance of"     ,"penetrate"];
Item_Catalogue[43] =  ["Guide's Card"     ,1,4E3 ,10,50,Class_Compo,0xFF99FF99,Card_Guides,10 ,0  ,"+10 guide Range"   ,""];
Item_Catalogue[108] = ["Guide's Card"     ,2,8E3 ,10,50,Class_Compo,0xFF99FF99,Card_Guides,20 ,0  ,"+20 guide Range"   ,""];
Item_Catalogue[173] = ["Guide's Card"     ,3,12E3,10,50,Class_Compo,0xFF99FF99,Card_Guides,30 ,0  ,"+30 guide Range"   ,""];
Item_Catalogue[269] = ["Guide's Card"     ,4,16E3,10,50,Class_Compo,0xFF99FF99,Card_Guides,40 ,0  ,"+40 guide Range"   ,""];
Item_Catalogue[356] = ["Guide's Card"     ,5,2E4 ,10,50,Class_Compo,0xFF99FF99,Card_Guides,50 ,0  ,"+50 guide Range"   ,""];
Item_Catalogue[467] = ["Guide's Card"     ,6,24E3,10,50,Class_Compo,0xFF99FF99,Card_Guides,60 ,0  ,"+60 guide Range"   ,""];
Item_Catalogue[545] = ["Guide's Card"     ,7,28E3,10,50,Class_Compo,0xFF99FF99,Card_Guides,70 ,0  ,"+70 guide Range"   ,""];
Item_Catalogue[44] =  ["Bullet's Card"    ,1,4E3 ,10,51,Class_Compo,0xFF333333,Card_Bullet,1  ,0  ,"+1 bullet"          ,""];
Item_Catalogue[109] = ["Bullet's Card"    ,2,8E3 ,10,51,Class_Compo,0xFF333333,Card_Bullet,2  ,0  ,"+2 bullet"          ,""];
Item_Catalogue[174] = ["Bullet's Card"    ,3,12E3,10,51,Class_Compo,0xFF333333,Card_Bullet,0  ,75 ,"+75% bullet"        ,""];
Item_Catalogue[238] = ["Bullet's Card"    ,4,16E3,10,51,Class_Compo,0xFF333333,Card_Bullet,0  ,100,"+100% bullet"       ,""];
Item_Catalogue[357] = ["Bullet's Card"    ,5,2E4 ,10,51,Class_Compo,0xFF333333,Card_Bullet,6  ,0  ,"+6 bullet"          ,""];
Item_Catalogue[468] = ["Bullet's Card"    ,6,24E3,10,51,Class_Compo,0xFF333333,Card_Bullet,0  ,125,"+125% bullet"       ,""];
Item_Catalogue[546] = ["Bullet's Card"    ,7,28E3,10,51,Class_Compo,0xFF333333,Card_Bullet,0  ,150,"+150% bullet"       ,""];
Item_Catalogue[45] =  ["Explosion's Card" ,1,4E3 ,10,52,Class_Compo,0xFFFF9900,Card_Explsn,25 ,0  ,"25% chance of"      ,"Explosion damage"];
Item_Catalogue[110] = ["Explosion's Card" ,2,8E3 ,10,52,Class_Compo,0xFFFF9900,Card_Explsn,50 ,0  ,"50% chance of"      ,"Explosion damage"];
Item_Catalogue[175] = ["Explosion's Card" ,3,12E3,10,52,Class_Compo,0xFFFF9900,Card_Explsn,75 ,0  ,"75% chance of"      ,"Explosion damage"];
Item_Catalogue[249] = ["Explosion's Card" ,4,16E3,10,52,Class_Compo,0xFFFF9900,Card_Explsn,100,0  ,"100% chance of"     ,"Explosion damage"];
Item_Catalogue[47] =  ["Critical's Card"  ,1,4E3 ,10,53,Class_Compo,0xFFFFFF66,Card_Critcl,25 ,100,"25% chance of"      ,"AT +100%"];
Item_Catalogue[111] = ["Critical's Card"  ,2,8E3 ,10,53,Class_Compo,0xFFFFFF66,Card_Critcl,25 ,150,"25% chance of"      ,"AT +150%"];
Item_Catalogue[176] = ["Critical's Card"  ,3,12E3,10,53,Class_Compo,0xFFFFFF66,Card_Critcl,25 ,200,"25% chance of"      ,"AT +200%"];
Item_Catalogue[239] = ["Critical's Card"  ,4,16E3,10,53,Class_Compo,0xFFFFFF66,Card_Critcl,25 ,300,"25% chance of"      ,"AT +300%"];
Item_Catalogue[358] = ["Critical's Card"  ,5,2E4 ,10,53,Class_Compo,0xFFFFFF66,Card_Critcl,25 ,400,"25% chance of"      ,"AT +400%"];
Item_Catalogue[469] = ["Critical's Card"  ,6,24E3,10,53,Class_Compo,0xFFFFFF66,Card_Critcl,20 ,600,"20% chance of"      ,"AT +600%"];
Item_Catalogue[547] = ["Critical's Card"  ,7,28E3,10,53,Class_Compo,0xFFFFFF66,Card_Critcl,15 ,900,"15% chance of"      ,"AT +900%"];
Item_Catalogue[46] =  ["Berserk Card"     ,1,4E3 ,10,54,Class_Compo,0xFFCC0000,Card_Bersrk,50 ,50 ,"AT +50%"            ,"DF -50%"];
Item_Catalogue[130] = ["Berserk Card"     ,2,8E3 ,10,54,Class_Compo,0xFFCC0000,Card_Bersrk,100,100,"AT +100%"           ,"DF -100%"];
Item_Catalogue[177] = ["Berserk Card"     ,3,12E3,10,54,Class_Compo,0xFFCC0000,Card_Bersrk,150,150,"AT +150%"           ,"DF -150%"];
Item_Catalogue[241] = ["Berserk Card"     ,4,16E3,10,54,Class_Compo,0xFFCC0000,Card_Bersrk,200,200,"AT +200%"           ,"DF -200%"];
Item_Catalogue[359] = ["Berserk Card"     ,5,2E4 ,10,54,Class_Compo,0xFFCC0000,Card_Bersrk,250,250,"AT +250%"           ,"DF -250%"];
Item_Catalogue[470] = ["Berserk Card"     ,6,24E3,10,54,Class_Compo,0xFFCC0000,Card_Bersrk,300,200,"AT +300%"           ,"DF -200%"];
Item_Catalogue[548] = ["Berserk Card"     ,7,28E3,10,54,Class_Compo,0xFFCC0000,Card_Bersrk,350,200,"AT +350%"           ,"DF -200%"];
Item_Catalogue[341] = ["Big Card"         ,1,4E3 ,10,55,Class_Compo,0xFFEEEEEE,Card_Big   ,50 ,0  ,"50% Attack Range"   ,""];
Item_Catalogue[342] = ["Big Card"         ,2,8E3 ,10,55,Class_Compo,0xFFEEEEEE,Card_Big   ,100,0  ,"100% Attack Range"  ,""];
Item_Catalogue[343] = ["Big Card"         ,3,12E3,10,55,Class_Compo,0xFFEEEEEE,Card_Big   ,150,0  ,"150% Attack Range"  ,""];
Item_Catalogue[344] = ["Big Card"         ,4,16E3,10,55,Class_Compo,0xFFEEEEEE,Card_Big   ,200,0  ,"200% Attack Range"  ,""];
Item_Catalogue[368] = ["Big Card"         ,5,2E4 ,10,55,Class_Compo,0xFFEEEEEE,Card_Big   ,300,0  ,"300% Attack Range"  ,""];
Item_Catalogue[389] = ["Knockback's Card" ,1,4E3 ,10,56,Class_Compo,0xFF99FFCC,Card_Knockb,25 ,20 ,"25% chance of"      ,"Knockback 20"];
Item_Catalogue[390] = ["Knockback's Card" ,2,8E3 ,10,56,Class_Compo,0xFF99FFCC,Card_Knockb,50 ,20 ,"50% chance of"      ,"Knockback 20"];
Item_Catalogue[391] = ["Knockback's Card" ,3,12E3,10,56,Class_Compo,0xFF99FFCC,Card_Knockb,50 ,30 ,"50% chance of"      ,"Knockback 30"];
Item_Catalogue[392] = ["Knockback's Card" ,4,16E3,10,56,Class_Compo,0xFF99FFCC,Card_Knockb,100,30 ,"100% chance of"     ,"Knockback 30"];
Item_Catalogue[393] = ["Knockback's Card" ,5,2E4 ,10,56,Class_Compo,0xFF99FFCC,Card_Knockb,30 ,90 ,"30% chance of"      ,"Knockback 90"];
Item_Catalogue[406] = ["Reflection Card"  ,1,4E3 ,10,57,Class_Compo,0xFFFFFFCC,Card_Reflct,25 ,0  ,"25% chance of"      ,"Reflection"];
Item_Catalogue[407] = ["Reflection Card"  ,2,8E3 ,10,57,Class_Compo,0xFFFFFFCC,Card_Reflct,50 ,0  ,"50% chance of"      ,"Reflection"];
Item_Catalogue[408] = ["Reflection Card"  ,3,12E3,10,57,Class_Compo,0xFFFFFFCC,Card_Reflct,75 ,0  ,"75% chance of"      ,"Reflection"];
Item_Catalogue[409] = ["Reflection Card"  ,4,16E3,10,57,Class_Compo,0xFFFFFFCC,Card_Reflct,100,0  ,"100% chance of"     ,"Reflection"];
Item_Catalogue[459] = ["Ring's Card"      ,1,4E3 ,10,62,Class_Compo,0xFFFFFF33,Card_Rings ,1  ,0  ,"Ring +1"            ,""];
Item_Catalogue[460] = ["Ring's Card"      ,2,8E3 ,10,62,Class_Compo,0xFFFFFF33,Card_Rings ,1  ,50 ,"Ring +1"            ,"LP +50"];
Item_Catalogue[461] = ["Ring's Card"      ,3,12E3,10,62,Class_Compo,0xFFFFFF33,Card_Rings ,1  ,100,"Ring +1"            ,"LP +100"];
Item_Catalogue[462] = ["Ring's Card"      ,4,16E3,10,62,Class_Compo,0xFFFFFF33,Card_Rings ,1  ,150,"Ring +1"            ,"LP +150"];
Item_Catalogue[463] = ["Ring's Card"      ,5,2E4 ,10,62,Class_Compo,0xFFFFFF33,Card_Rings ,1  ,200,"Ring +1"            ,"LP +200"];
Item_Catalogue[464] = ["Ring's Card"      ,6,24E3,10,62,Class_Compo,0xFFFFFF33,Card_Rings ,1  ,300,"Ring +1"            ,"LP +300"];
Item_Catalogue[441] = ["Heal's Card"      ,1,48E3,10,59,Class_Compo,0xFFFFFFFF,Card_Heals ,1  ,0  ,"Heal to attack each","+1"];
Item_Catalogue[442] = ["Heal's Card"      ,2,48E3,10,59,Class_Compo,0xFFFFFFFF,Card_Heals ,2  ,0  ,"Heal to attack each","+2"];
Item_Catalogue[541] = ["Katana's Card"    ,7,28E3,10,58,Class_Compo,0xFF333333,Card_Katana,50 ,10 ,"AT +50%"            ,"+10 Length of sword"];
Item_Catalogue[423] = ["Katana's Card"    ,6,24E3,10,58,Class_Compo,0xFF333333,Card_Katana,40 ,10 ,"AT +40%"            ,"+10 Length of sword"];
Item_Catalogue[50] =  [""                 ,0,4E3 ,10,9 ,Class_Compo,0xFFFFFFFF,0          ,0  ,0  ,""                   ,""]; // rubber card
Item_Catalogue[29] =  ["Vampire's Card"   ,1,4E3 ,10,9 ,Class_Compo,0xFF990000,Card_Vampir,3  ,0  ,"3% LP recovery"     ,"per damage"];
Item_Catalogue[94] =  ["Vampire's Card"   ,3,8E3 ,10,9 ,Class_Compo,0xFF990000,Card_Vampir,4  ,0  ,"4% LP recovery"     ,"per damage"];
Item_Catalogue[159] = ["Vampire's Card"   ,4,12E3,10,9 ,Class_Compo,0xFF990000,Card_Vampir,5  ,0  ,"5% LP recovery"     ,"per damage"];
Item_Catalogue[30] =  ["ONIGIRI's Card"   ,1,8E3 ,10,9 ,Class_Compo,0xFFFFFFFF,Card_ONIGIR,5  ,0  ,"5% chance of"       ,"ONIGIRI drop per hit"];
Item_Catalogue[95] =  ["Gold rush Card"   ,1,16E3,10,9 ,Class_Compo,0xFFFFFF00,Card_Gldrsh,5  ,0  ,"5% chance of"       ,"GOLD drop per hit"];
Item_Catalogue[160] = ["Zombie's Card"    ,4,24E3,10,9 ,Class_Compo,0xFF330066,Card_Zombie,50 ,100,"LP +50% "           ,"-100% Fire damage"];

//   medals   [   ] = [0             ,1,2   ,3 ,4 ,5          ,6         ,7           ,8  ,9,10                  ,11];
Item_Catalogue[51] =  ["Bronze Medal",1,2E3 ,11,10,Class_Compo,0xFFDD8811,Medal_Bronze,10 ,0,"+10% Drop rate"    ,""];
Item_Catalogue[112] = ["Bronze Medal",2,4E3 ,11,10,Class_Compo,0xFFDD8811,Medal_Bronze,20 ,0,"+20% Drop rate"    ,""];
Item_Catalogue[184] = ["Bronze Medal",3,6E3 ,11,10,Class_Compo,0xFFDD8811,Medal_Bronze,30 ,0,"+30% Drop rate"    ,""];
Item_Catalogue[233] = ["Bronze Medal",4,8E3 ,11,10,Class_Compo,0xFFDD8811,Medal_Bronze,40 ,0,"+40% Drop rate"    ,""];
Item_Catalogue[385] = ["Bronze Medal",5,1E4 ,11,10,Class_Compo,0xFFDD8811,Medal_Bronze,50 ,0,"+50% Drop rate"    ,""];
Item_Catalogue[437] = ["Bronze Medal",6,12E3,11,10,Class_Compo,0xFFDD8811,Medal_Bronze,75 ,0,"+75% Drop rate"    ,""];
Item_Catalogue[487] = ["Bronze Medal",7,14E3,11,10,Class_Compo,0xFFDD8811,Medal_Bronze,100,0,"+100% Drop rate"   ,""];
Item_Catalogue[52] =  ["Silver Medal",1,2E3 ,11,10,Class_Compo,0xFFCCCCCC,Medal_Silver,10 ,0,"+10% ONIGIRI Drop" ,""];
Item_Catalogue[113] = ["Silver Medal",2,4E3 ,11,10,Class_Compo,0xFFCCCCCC,Medal_Silver,20 ,0,"+20% ONIGIRI Drop" ,""];
Item_Catalogue[185] = ["Silver Medal",3,6E3 ,11,10,Class_Compo,0xFFCCCCCC,Medal_Silver,30 ,0,"+30% ONIGIRI Drop" ,""];
Item_Catalogue[234] = ["Silver Medal",4,8E3 ,11,10,Class_Compo,0xFFCCCCCC,Medal_Silver,40 ,0,"+40% ONIGIRI Drop" ,""];
Item_Catalogue[386] = ["Silver Medal",5,1E4 ,11,10,Class_Compo,0xFFCCCCCC,Medal_Silver,50 ,0,"+50% ONIGIRI Drop" ,""];
Item_Catalogue[438] = ["Silver Medal",6,12E3,11,10,Class_Compo,0xFFCCCCCC,Medal_Silver,75 ,0,"+75% ONIGIRI Drop" ,""];
Item_Catalogue[488] = ["Silver Medal",7,14E3,11,10,Class_Compo,0xFFCCCCCC,Medal_Silver,100,0,"+100% ONIGIRI Drop",""];
Item_Catalogue[53] =  ["Gold Medal"  ,1,2E3 ,11,10,Class_Compo,0xFFFFDD00,Medal_Gold  ,10 ,0,"+10% Gold UP"      ,""];
Item_Catalogue[114] = ["Gold Medal"  ,2,4E3 ,11,10,Class_Compo,0xFFFFDD00,Medal_Gold  ,20 ,0,"+20% Gold UP"      ,""];
Item_Catalogue[186] = ["Gold Medal"  ,3,6E3 ,11,10,Class_Compo,0xFFFFDD00,Medal_Gold  ,30 ,0,"+30% Gold UP"      ,""];
Item_Catalogue[235] = ["Gold Medal"  ,4,8E3 ,11,10,Class_Compo,0xFFFFDD00,Medal_Gold  ,40 ,0,"+40% Gold UP"      ,""];
Item_Catalogue[387] = ["Gold Medal"  ,5,1E4 ,11,10,Class_Compo,0xFFFFDD00,Medal_Gold  ,50 ,0,"+50% Gold UP"      ,""];
Item_Catalogue[439] = ["Gold Medal"  ,6,12E3,11,10,Class_Compo,0xFFFFDD00,Medal_Gold  ,75 ,0,"+75% Gold UP"      ,""];
Item_Catalogue[489] = ["Gold Medal"  ,7,14E3,11,10,Class_Compo,0xFFFFDD00,Medal_Gold  ,100,0,"+100% Gold UP"     ,""];
Item_Catalogue[48] =  ["Iron Medal"  ,1,2E3 ,11,10,Class_Compo,0xFF666666,Medal_Iron  ,10 ,0,"+10% EXP UP"       ,""];
Item_Catalogue[49] =  ["Iron Medal"  ,2,4E3 ,11,10,Class_Compo,0xFF666666,Medal_Iron  ,20 ,0,"+20% EXP UP"       ,""];
Item_Catalogue[187] = ["Iron Medal"  ,3,6E3 ,11,10,Class_Compo,0xFF666666,Medal_Iron  ,30 ,0,"+30% EXP UP"       ,""];
Item_Catalogue[236] = ["Iron Medal"  ,4,8E3 ,11,10,Class_Compo,0xFF666666,Medal_Iron  ,40 ,0,"+40% EXP UP"       ,""];
Item_Catalogue[388] = ["Iron Medal"  ,5,1E4 ,11,10,Class_Compo,0xFF666666,Medal_Iron  ,50 ,0,"+50% EXP UP"       ,""];
Item_Catalogue[440] = ["Iron Medal"  ,6,12E3,11,10,Class_Compo,0xFF666666,Medal_Iron  ,75 ,0,"+75% EXP UP"       ,""];
Item_Catalogue[490] = ["Iron Medal"  ,7,14E3,11,10,Class_Compo,0xFF666666,Medal_Iron  ,100,0,"+100% EXP UP"      ,""];

//   wards    [   ] = [0             ,1,2  ,3 ,4 ,5          ,6         ,7           ,8 ,9,10                  ,11];
Item_Catalogue[243] = ["Ice Ward"   ,1,2E3,16,39,Class_Compo,0xFF66CCFF,Ward_Ice   ,50,0,"50% Ice invalid"   ,""];
Item_Catalogue[246] = ["Ice Ward"   ,2,4E3,16,39,Class_Compo,0xFF66CCFF,Ward_Ice   ,80,0,"80% Ice invalid"   ,""];
Item_Catalogue[250] = ["Ice Ward"   ,3,6E3,16,39,Class_Compo,0xFF66CCFF,Ward_Ice   ,90,0,"90% Ice invalid"   ,""];
Item_Catalogue[320] = ["Ice Ward"   ,4,8E3,16,39,Class_Compo,0xFF66CCFF,Ward_Ice   ,95,0,"95% Ice invalid"   ,""];
Item_Catalogue[244] = ["Poison Ward",1,2E3,16,39,Class_Compo,0xFF99FF33,Ward_Poison,50,0,"50% Poison invalid",""];
Item_Catalogue[247] = ["Poison Ward",2,4E3,16,39,Class_Compo,0xFF99FF33,Ward_Poison,80,0,"80% Poison invalid",""];
Item_Catalogue[251] = ["Poison Ward",3,6E3,16,39,Class_Compo,0xFF99FF33,Ward_Poison,90,0,"90% Poison invalid",""];
Item_Catalogue[321] = ["Poison Ward",4,8E3,16,39,Class_Compo,0xFF99FF33,Ward_Poison,95,0,"95% Poison invalid",""];
Item_Catalogue[245] = ["Freeze Ward",1,2E3,16,39,Class_Compo,0xFFFFFFFF,Ward_Freeze,50,0,"50% Freeze invalid",""];
Item_Catalogue[248] = ["Freeze Ward",2,4E3,16,39,Class_Compo,0xFFFFFFFF,Ward_Freeze,80,0,"80% Freeze invalid",""];
Item_Catalogue[252] = ["Freeze Ward",3,6E3,16,39,Class_Compo,0xFFFFFFFF,Ward_Freeze,90,0,"90% Freeze invalid",""];
Item_Catalogue[322] = ["Freeze Ward",4,8E3,16,39,Class_Compo,0xFFFFFFFF,Ward_Freeze,95,0,"95% Freeze invalid",""];

//  charms   [   ] = [0               ,1,2   ,3 ,4 ,5          ,6         ,7         ,8   ,9  ,10               ,11              ,12,13,14,5,6,7,18,19       ,20,21,22,23,24,25,26,27 ,28,29,30,31,2,3,4,35,36,7,8,39,40,41,2,43,44       ,45,46,47,8,9,0,51,52 ,53,4,55,56,57];
Item_Catalogue[277] = ["Fire Charm"   ,1,4E3 ,17,40,Class_Compo,0xFFFF4422,Charm_Eff,100 ,278,"100% enemy dies","Fire"          ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[278] = ["Fire Charm"   ,0,0   ,0 ,0 ,0          ,0         ,1         ,109 ,0  ,5                ,15              ,3 ,1  ,0,0,0,1,6 ,0xFFFF6611,2,16,16,16,16,0 ,0 ,100,10,0 ,90 ,1,0,0,1,50 ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[279] = ["Fire Charm"   ,2,8E3 ,17,40,Class_Compo,0xFFFF4422,Charm_Eff,10  ,280,"10% enemy dies" ,"Fire explosion"];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[280] = ["Fire Charm"   ,0,0   ,0 ,0 ,0          ,0         ,1         ,109 ,0  ,30               ,50              ,16,2  ,0,0,0,1,6 ,0xFFFF6611,2,16,16,16,16,0 ,0 ,150,30,0 ,95 ,1,0,0,1,50 ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[281] = ["Fire Charm"   ,3,12E3,17,40,Class_Compo,0xFFFF4422,Charm_Eff,10  ,282,"10% enemy dies" ,"Flame"         ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[282] = ["Fire Charm"   ,0,0   ,0 ,0 ,0          ,0         ,1         ,204 ,0  ,30               ,50              ,16,40 ,0,0,0,1,6 ,0x88FF6611,2,16,20,12,12,50,0 ,100,10,-1,99 ,1,0,0,1,50 ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[283] = ["Fire Charm"   ,4,16E3,17,40,Class_Compo,0xFFFF4422,Charm_Eff,10  ,284,"10% enemy dies" ,"Atomic ray"    ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[284] = ["Fire Charm"   ,0,0   ,0 ,0 ,0          ,0         ,1         ,109 ,0  ,60               ,100             ,4 ,2  ,0,0,0,1,18,0xFFFF6611,2,12,20,16,16,0 ,0 ,1E3,10,0 ,100,0,2,0,1,80 ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[285] = ["Thunder Charm",1,4E3 ,17,40,Class_Compo,0xFFEEEE00,Charm_Eff,50  ,286,"50% enemy dies" ,"Thunder"       ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[286] = ["Thunder Charm",0,0   ,0 ,0 ,0          ,0         ,1         ,105 ,0  ,1                ,99              ,1 ,5  ,0,0,0,1,10,0xFFFFFF66,2,16,16,16,16,0 ,0 ,200,10,0 ,100,0,0,0,3,0  ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[287] = ["Thunder Charm",2,8E3 ,17,40,Class_Compo,0xFFEEEE00,Charm_Eff,10  ,288,"10% enemy dies" ,"Lightning"     ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[288] = ["Thunder Charm",0,0   ,0 ,0 ,0          ,0         ,1         ,2   ,0  ,1                ,99              ,10,20 ,0,0,0,1,10,0x889999FF,2,12,16,8 ,8 ,10,0 ,500,10,0 ,100,0,0,0,3,0  ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[308] = ["Thunder Charm",3,12E3,17,40,Class_Compo,0xFFEEEE00,Charm_Eff,10  ,309,"10% enemy dies" ,"Big Thunder"   ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[309] = ["Thunder Charm",0,0   ,0 ,0 ,0          ,0         ,1         ,108 ,1  ,1                ,333             ,1 ,0  ,0,0,0,1,10,0xFFFFFF66,2,64,64,64,64,0 ,25,26 ,10,50,100,0,1,0,3,0  ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[310] = ["Thunder Charm",4,16E3,17,40,Class_Compo,0xFFEEEE00,Charm_Eff,5   ,311,"5% enemy dies"  ,"Thunder Ball"  ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[311] = ["Thunder Charm",0,0   ,0 ,0 ,0          ,0         ,1         ,105 ,0  ,1                ,9999            ,1 ,4  ,0,0,0,1,2 ,0xFFFFFF66,2,16,16,16,16,0 ,0 ,200,10,0 ,100,0,0,0,3,0  ,0,2,0,1 ,9 ,30,0,15,0xFFFFFF66,1,16,16,8,8,0,0 ,50 ,10,0,0  ,0,0];
Item_Catalogue[377] = ["Ice Charm"    ,1,4E3 ,17,40,Class_Compo,0xFF66CCFF,Charm_Eff,50  ,378,"50% enemy dies" ,"Freeze arrow"  ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[378] = ["Ice Charm"    ,0,0   ,0 ,0 ,0          ,0         ,1         ,109 ,0  ,25               ,50              ,4 ,1  ,0,0,0,1,3 ,0xFFCCCCFF,2,16,16,8 ,8 ,0 ,25,2E3,10,0 ,100,0,2,0,5,50 ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[379] = ["Ice Charm"    ,2,8E3 ,17,40,Class_Compo,0xFF66CCFF,Charm_Eff,20  ,380,"20% enemy dies" ,"Ice mist"      ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[380] = ["Ice Charm"    ,0,0   ,0 ,0 ,0          ,0         ,1         ,2404,1  ,5                ,5               ,9 ,50 ,0,0,0,0,6 ,0x44CCCCFF,2,32,32,48,48,0 ,50,51 ,10,2 ,95 ,0,1,0,2,40 ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[381] = ["Ice Charm"    ,3,12E3,17,40,Class_Compo,0xFF66CCFF,Charm_Eff,20  ,382,"20% enemy dies" ,"Freeze spike"  ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[382] = ["Ice Charm"    ,0,0   ,0 ,0 ,0          ,0         ,1         ,4   ,0  ,5                ,5               ,25,100,0,0,0,1,9 ,0xCCCCCCFF,2,12,12,6 ,6 ,0 ,25,200,10,5 ,100,0,0,0,5,20 ,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[383] = ["Ice Charm"    ,4,2E4 ,17,40,Class_Compo,0xFF66CCFF,Charm_Eff,40  ,384,"40% enemy dies" ,"Ice meteor"    ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[384] = ["Ice Charm"    ,0,0   ,0 ,0 ,0          ,0         ,1         ,105 ,0  ,100              ,150             ,1 ,5  ,0,0,0,1,16,0xFFCCCCFF,2,16,16,8 ,8 ,0 ,0 ,100,10,0 ,100,0,0,0,2,20 ,0,4,0,10,15,9 ,1,16,0xCC8888FF,2,12,12,6,6,0,10,100,10,5,100,0,0];
Item_Catalogue[404] = ["Poison Charm" ,4,2E4 ,17,40,Class_Compo,0xFF00FF00,Charm_Eff,60  ,405,"60% enemy dies" ,"Poison"        ];//   , , , , ,  ,          , ,  ,  ,  ,  ,  ,  ,   ,  ,  ,   , , , , ,   , , , ,  ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,
Item_Catalogue[405] = ["Poison Charm" ,0,0   ,0 ,0 ,0          ,0         ,1         ,109 ,1  ,1                ,1               ,6 ,1  ,0,0,0,0,6 ,0x4466FF00,2,24,24,32,32,0 ,50,51 ,10,0 ,88 ,0,1,0,4,1E3,0,0];// ,  ,  , ,  ,          , ,  ,  , , , ,  ,   ,  , ,   , ,

//   crowns   [   ] = [0               ,1,2  ,3 ,4 ,5          ,6         ,7          ,8  ,9,10             ,11         ];
Item_Catalogue[557] = ["Imperial Crown",0,400,19,63,Class_Compo,0xFFFFD700,Crown_Imprl,50 ,0,"+50% Enemies" ,"(Passive)"];
Item_Catalogue[558] = ["Imperial Crown",2,400,19,63,Class_Compo,0xFFFFD700,Crown_Imprl,100,0,"+100% Enemies","(Passive)"];
Item_Catalogue[559] = ["Imperial Crown",3,400,19,63,Class_Compo,0xFFFFD700,Crown_Imprl,150,0,"+150% Enemies","(Passive)"];
Item_Catalogue[560] = ["Imperial Crown",4,400,19,63,Class_Compo,0xFFFFD700,Crown_Imprl,200,0,"+200% Enemies","(Passive)"];
Item_Catalogue[561] = ["Anger Crown"   ,0,400,19,63,Class_Compo,0xFFDDDDDD,Crown_Anger,0  ,0,"LV up effect" ,"(Passive)"];
Item_Catalogue[562] = ["Anger Crown"   ,0,0  ,0 ,0 ,0          ,0         ,1          ,1  ,1,1              ,9999,1,0,0,0,0,0,18,0xFFFFFF99,2,64,512,64,512,0,0,10,20,0 ,100,1,0,0,3,0,0,0];
Item_Catalogue[563] = ["Anger Crown"   ,0,0  ,0 ,0 ,0          ,0         ,1          ,1  ,0,1              ,999 ,1,0,0,0,0,0,21,0xFFFFFF99,2,8 ,8  ,16,16 ,0,0,10,3 ,-9,100,1,0,0,3,0,0,0];

//   shards   [   ] = [0               ,1,2  ,3 ,4 ,5          ,6         ,7    ,8  ,9,10            ,11                 ];
Item_Catalogue[564] = ["Pearl Shard"  ,0,200,20,64,Class_Compo,0xFFFFFFCC,Shard,50 ,0,"It shines" ,"with potential..."];
Item_Catalogue[565] = ["Spinel Shard"  ,0,200,20,64,Class_Compo,0xFFFF3322,Shard,50 ,0,"It sizzles"  ,"with potential..."];
Item_Catalogue[566] = ["Opal Shard"    ,0,200,20,64,Class_Compo,0xFF4466FF,Shard,50 ,0,"It twinkles" ,"with potential..."];
Item_Catalogue[567] = ["Zircon Shard"  ,0,200,20,64,Class_Compo,0xFFFFCC22,Shard,50 ,0,"It crackles" ,"with potential..."];
Item_Catalogue[568] = ["Jade Shard"    ,0,200,20,64,Class_Compo,0xFFAAFF77,Shard,50 ,0,"It bubbles"  ,"with potential..."];
Item_Catalogue[569] = ["Quartz Shard"   ,0,200,20,64,Class_Compo,0xFFFFFFFF,Shard,50 ,0,"It glitters"   ,"with potential..."];
Item_Catalogue[570] = ["Ancient Shard" ,0,1E3,20,64,Class_Compo,0xCCAA88,Shard,50 ,0,"A great beast","once held this. "];

var Save_Code1 = 0;        // original name: fe
var Saving_Text_Timer = 0; // original name: ge
var Save_Code3 = "";       // original name: he

window.GameSave = getSaveCode;
function getSaveCode(save_string_var){ // original name: ie()
    if (save_string_var.length==0)
        return "";
    else
        return Save_Code3;
}

var Save_Error = 0;            // original name: je
var Save_Error_Text_Timer = 0; // original name: ke
var Save_Code6 = "";           // original name: le

window.GameLoad = setSaveCode;
function setSaveCode(save_string_var){ // original name: me()
    if (save_string_var.length != 0){
        Save_Code6 = save_string_var;
        return 0;
    }
    if (save_string_var.length==0){
        if (Save_Code6.length==0)
            return -1;

        Displayed_Object = Sign_Touched_Mode = Current_Screen = Current_Stage = Text_Fade = Sequence_Step = 0;
        Selected_Player = 3;
        Mouse_Up = false;
        for (var s=0; s<Stickman_Count; s++)
            MP_Bar[s] = 0;
        Click_To_Sell_Mode = 0;
        Forge_Mode = 0;
        Players.PLreset();
        Indicators.INreset();
        Projectiles.PJreset();
        Drops.DPreset();
        WorldMap.MAPset();
        Save_Error = loadGame(Save_Code6,0);

        if (Save_Error>0)
            Save_Error_Text_Timer = 50;
        else
            Save_Code3 = genSaveCode(0);

        Save_Code6 = "";
        antiCheatSet();
    }
    return -1;
}

window.AutoSave = saveGame;
function saveGame(save_string_var){ // original name: ue()
    if (save_string_var.length==0 || Save_Code1==0)
        return "";

    Save_Code1 = 0;
    Saving_Text_Timer = 50;
    return getSaveCode("0");
}

// takes the item array and the element number and returns the value of that element in that array
function getVal(item,element){ // original name: w()
    // if the element you are trying to access is beyond the range of the array
    if (Item_Catalogue[item].length <= element){
        return 0;
    } else { // if the value is a weapon/item color, projectile color, or residue color
         if (element == Item_Color || element == Proj_Color || element == Res_Color)
            return Item_Catalogue[item][element]>>>0;
         else
            return Item_Catalogue[item][element];
    }
}

// checks if effect "compo_eff" is found in either slot of "weapon",if found set that slot to true
var Slot1 = false;
var Slot2 = false;
function checkEff(weapon,compo_eff){ // original name: x()
    Slot2 = Slot1 = false;

    if (getVal(Comp1_Inv[weapon],Eff_ID) == compo_eff) // check if the effect of weapon's second compo is compo_eff
        Slot1 = true;
    if (getVal(Comp2_Inv[weapon],Eff_ID) == compo_eff) // check if the effect of weapon's second compo is compo_eff
        Slot2 = true;

    if (Slot1 || Slot2) // if either slot contains a compo item
        return true;
    else
        return false;
}

// reads the two compo slots and returns the compo items' effects' values
function getEff(compo,eff_num){ // original name: y()
    var value = 0;

    if (Slot1==true)
        value += getVal(Comp1_Inv[compo],eff_num);
    if (Slot2==true)
        value += getVal(Comp2_Inv[compo],eff_num);

    return value;
}

// save code
var Char_List = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.*".split(""); // original name: ye
function genSaveCode(gen_vs_mode){
    var arr_len = 0;
    var save_arr = new Int32Array(512);

    save_arr[arr_len++] = 1;
    save_arr[arr_len++] = 0;
    save_arr[arr_len++] = 0;
    save_arr[arr_len++] = floor(random(64));
    save_arr[arr_len++] = floor(random(64));

    for (var s=0; s<Stickmen_Slots<<1; s++)
        save_arr[arr_len++] = VS_Game_ID_Plain[s];

    if (gen_vs_mode==0){
        save_arr[arr_len++] = Current_Stage>>6&63;
        save_arr[arr_len++] = Current_Stage>>0&63;
    }
    save_arr[arr_len++] = LV[0]>>6&63;
    save_arr[arr_len++] = LV[0]>>0&63;

    if (gen_vs_mode==1)
        save_arr[arr_len++] = Rank[0];

    for (var s=0; s<Stickmen_Slots; s++){
        save_arr[arr_len++] = SP[s]>>6&63;
        save_arr[arr_len++] = SP[s]>>0&63;
    }
    if (gen_vs_mode==0){
        save_arr[arr_len++] = Team_EXP>>18&63;
        save_arr[arr_len++] = Team_EXP>>12&63;
        save_arr[arr_len++] = Team_EXP>>6&63;
        save_arr[arr_len++] = Team_EXP>>0&63;
        save_arr[arr_len++] = Team_Gold>>18&63;
        save_arr[arr_len++] = Team_Gold>>12&63;
        save_arr[arr_len++] = Team_Gold>>6&63;
        save_arr[arr_len++] = Team_Gold>>0&63;
    }

    for (var s=0; s<Stickmen_Slots; s++)
        save_arr[arr_len++] = Team_List[s]>>0&63;

    if (gen_vs_mode==0){
        for (var s=0; s<Stickmen_Slots; s++){
            save_arr[arr_len++] = LP_Current[s]>>12&63; // "hundreds" place
            save_arr[arr_len++] = LP_Current[s]>>6&63; // "tens" place
            save_arr[arr_len++] = LP_Current[s]>>0&63; // "ones" place
        }
    }
    for (var s=0; s<Stickmen_Slots; s++){
        save_arr[arr_len++] = LP_SP[s]>>6&63;
        save_arr[arr_len++] = LP_SP[s]>>0&63;
        save_arr[arr_len++] = STR_SP[s]>>6&63;
        save_arr[arr_len++] = STR_SP[s]>>0&63;
        save_arr[arr_len++] = DEX_SP[s]>>6&63;
        save_arr[arr_len++] = DEX_SP[s]>>0&63;
        save_arr[arr_len++] = MAG_SP[s]>>6&63;
        save_arr[arr_len++] = MAG_SP[s]>>0&63;
    }
    for (var s=Stickmen_Slots; s<Stickmen_Slots<<1; s++){
        save_arr[arr_len++] = Item_Inv[s]>>6&63;
        save_arr[arr_len++] = Item_Inv[s]>>0&63;
        save_arr[arr_len++] = Comp1_Inv[s]>>6&63;
        save_arr[arr_len++] = Comp1_Inv[s]>>0&63;
        save_arr[arr_len++] = Comp2_Inv[s]>>6&63;
        save_arr[arr_len++] = Comp2_Inv[s]>>0&63;
    }

    if (gen_vs_mode==0){
        for (var i=Inv_First; i<Inv_Size; i++){
            save_arr[arr_len++] = Item_Inv[i]>>6&63;
            save_arr[arr_len++] = Item_Inv[i]>>0&63;
            save_arr[arr_len++] = Comp1_Inv[i]>>6&63;
            save_arr[arr_len++] = Comp1_Inv[i]>>0&63;
            save_arr[arr_len++] = Comp2_Inv[i]>>6&63;
            save_arr[arr_len++] = Comp2_Inv[i]>>0&63;
        }

        for (var s=0; s<Stickmen_Slots; s++)
            save_arr[arr_len++] = Sett_Auto_Move[s];

        save_arr[arr_len++] = Sett_Move_If_Dying;
        save_arr[arr_len++] = Sett_Dmg_Indicators;
        save_arr[arr_len++] = Sett_LP_Bar_Disp;
        save_arr[arr_len++] = Sett_PL_Symbol;
        save_arr[arr_len++] = Sett_Drag_Dead_Body;

        for (var i=0; i<3; i++)
            save_arr[arr_len++] = 0;

        for (var i=0; i<Stage_Count; i++){
            for (var j=0; i<Stage_Count-1 && Stage_Status[i]==Stage_Status[i+1]; i++,j++){
                if (j==31){
                    i++;
                    break;
                }
            }
            save_arr[arr_len++] = Stage_Status[i];
            if (j>0)
                save_arr[arr_len++] = j+16;
        }
    }

    var gen_var1 = 0;
    for (var i=0; i<arr_len; i++)
        gen_var1 += save_arr[i]*(floor(i/7)+1);

    save_arr[1] = gen_var1>>6&63;
    save_arr[2] = gen_var1&63;

    gen_var1 = 0;
    for (var i=0; i<arr_len; i++)
        gen_var1 += save_arr[i]*((i&15)+1);

    save_arr[arr_len++] = gen_var1>>8&47;
    save_arr[arr_len++] = gen_var1>>4&31;
    save_arr[arr_len++] = gen_var1>>0&15;

    var save_char = ""+Char_List[save_arr[0]];
    save_char += Char_List[save_arr[1]];
    save_char += Char_List[save_arr[2]];
    gen_var1 = save_arr[2];

    for (var i=3; i<arr_len; i++){
        save_char += Char_List[save_arr[i]+gen_var1&63];
        gen_var1 += save_arr[i]+i+save_arr[1];
    }

    return save_char;
}

function loadGame(save_string_var,team_slot){ // original name: re()
    var team_leader = Stickmen_Slots*team_slot;
    var loadvar_d,load_var_e;
    var load_arr = new Int32Array(512);
    var load_vs_mode2 = 0;

    if (save_string_var.length==0)
        return 1; // no save string

    if (save_string_var.length < 90)
        load_vs_mode2 = 1;

    for (var i=0; i<save_string_var.length; i++){
        for (var j=0; j<Char_List.length; j++){
            if (Char_List[j]==save_string_var.charAt(i)){
                load_arr[i] = j;
                break;
            }
        }
    }

    if (load_arr[0] <= 0)
        return 2;

    load_var_e = load_arr[2];
    for (var i=3; i<save_string_var.length; i++){
        load_arr[i] = load_arr[i]-load_var_e&63;
        load_var_e += load_arr[i]+i+load_arr[1];
    }

    load_var_e = 0;
    for (var i=0; i<save_string_var.length-3; i++)
        load_var_e += load_arr[i]*((i&15)+1);

    if (load_arr[save_string_var.length-3] != (load_var_e>>8&47) || load_arr[save_string_var.length-2] != (load_var_e>>4&31) || load_arr[save_string_var.length-1] != (load_var_e>>0&15))
        return 3;


    if (team_slot==0){
        for (var s=0; s<Stickmen_Slots<<1; s++){
            if (load_arr[s+5] != VS_Game_ID_Plain[s])
                return 4;
        }
    }

    loadvar_d = 0;
    loadvar_d++;
    loadvar_d++;
    loadvar_d++;
    loadvar_d++;
    loadvar_d++;
    loadvar_d += 8;

    if (load_vs_mode2==0)
        Current_Stage = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];

    LV[team_slot] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];

    if (load_vs_mode2==1)
        Rank[team_slot] = load_arr[loadvar_d++];

    for (var i=team_leader; i < team_leader+Stickmen_Slots; i++)
        SP[i]=(load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];

    if (load_vs_mode2==0){
        Team_EXP = (load_arr[loadvar_d++]<<18)+(load_arr[loadvar_d++]<<12)+(load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
        Team_Gold = (load_arr[loadvar_d++]<<18)+(load_arr[loadvar_d++]<<12)+(load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
    }

    for (load_var_e=team_leader; load_var_e<team_leader+Stickmen_Slots; load_var_e++)
        Team_List[load_var_e] = load_arr[loadvar_d++];

    if (load_vs_mode2==0){
        for (var i=team_leader; i<team_leader+Stickmen_Slots; i++)
            LP_Current[i] = (load_arr[loadvar_d++]<<12)+(load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
    }

    for (var i=team_leader; i<team_leader+Stickmen_Slots; i++){
        LP_SP[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
        STR_SP[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
        DEX_SP[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
        MAG_SP[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
    }
    for (var i=Stickmen_Slots+team_leader; i<(Stickmen_Slots<<1)+team_leader; i++){
        Item_Inv[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
        Comp1_Inv[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
        Comp2_Inv[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
    }

    if (load_vs_mode2==1)
        return 0;

    for (var i=Inv_First; i<Inv_Size; i++){
        Item_Inv[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
        Comp1_Inv[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
        Comp2_Inv[i] = (load_arr[loadvar_d++]<<6)+load_arr[loadvar_d++];
    }

    for (var i=0; i<Stickmen_Slots; i++)
        Sett_Auto_Move[i] = load_arr[loadvar_d++];

    Sett_Move_If_Dying = load_arr[loadvar_d++];
    Sett_Dmg_Indicators = load_arr[loadvar_d++];
    Sett_LP_Bar_Disp = load_arr[loadvar_d++];
    Sett_PL_Symbol = load_arr[loadvar_d++];
    Sett_Drag_Dead_Body = load_arr[loadvar_d++];

    for (var i=0; i<3; i++)
        loadvar_d++;

    for (var i=0; i<Stage_Count; i++)
        Stage_Status[i] = 0;

    for (var i=0; loadvar_d < save_string_var.length-3; loadvar_d++){
        if (load_arr[loadvar_d]<16){
            Stage_Status[i++] = load_arr[loadvar_d];
        } else {
            for (var j=0; j<load_arr[loadvar_d]-16; j++)
                Stage_Status[i++] = load_arr[loadvar_d-1];
        }
    }

    for (var i=0; i<Stage_Count; i++){
        if ((Stage_Status[i]&Beaten) != 0){
            Stage_Status[i] |= Unlocked;
            if (Dot_Locations[i][3]>0)
                Stage_Status[Dot_Locations[i][3]] |= Unlocked;
            if (Dot_Locations[i][4]>0)
                Stage_Status[Dot_Locations[i][4]] |= Unlocked;
        }
    }
    return 0;
}

// VS mode upload code
window.fff = vsUploadCode;
function vsUploadCode(a){ // original name: Ee()
    var b,c = "";
    var d = new Int32Array(16);

    b = 0;
    d[b++] = floor(random(64));
    d[b++] = floor(random(64));
    d[b++] = floor(random(64));
    d[b++] = floor(random(64));

    d[b++] = Rank[0];
    d[b++] = Rank[1];

    d[b++] = a;

    d[b++] = VS_Player_Team_ID>>18&63;
    d[b++] = VS_Player_Team_ID>>12&63;
    d[b++] = VS_Player_Team_ID>>6&63;
    d[b++] = VS_Player_Team_ID&63;

    var e = 0;
    for (var a=0; a<b; a++)
        e += d[a]*((a&15)+1);

    d[b++] = e>>8&47;
    d[b++] = e>>4&31;
    d[b++] = e>>0&15;

    c = ""+Char_List[d[0]];
    c += Char_List[d[1]];

    e = d[1];

    for (var a=2; a<b; a++){
        c += Char_List[d[a]+e&63];
        e += d[a]+a+d[0];
    }

    return c;
}

var Check_Var1 = 0;           // original name: d
var Check_Var2 = 0;           // original name: Fe
var Check_Var3 = 0;           // original name: Ge
var Item_Attribute_Data = []; // original name: He
var Enemy_Spawn_Data = 0;     // original name: Ie
var Monster_Data = 0;         // original name: Je
var Shop_Item_Data = 0;       // original name: Ke

window.fff = dataGather;
function dataGather(){ // original name: Le()
    Item_Attribute_Data = new Int32Array(Item_Catalogue.length);
    for (var i=0; i<Item_Catalogue.length; i++){
        for (var j=Item_Attribute_Data[i]=0; j<Item_Catalogue[i].length; j++){
            if (typeof Item_Catalogue[i][j]=='number')
                Item_Attribute_Data[i] += Item_Catalogue[i][j]&255; // if the item's attribute is a number, add it to Item_Attribute_Data
        }
    }
    Enemy_Spawn_Data = 0;
    for (var i=0; i<Stage_Spawns.length; i++){
        for (var j=0; j<Stage_Spawns[i].length; j++){
            for (var k=0; k<Stage_Spawns[i][j].length; k++)
                Enemy_Spawn_Data += Stage_Spawns[i][j][k];
        }
    }
    Monster_Data = 0;
    for (var i=0; i<EN_Info.length; i++){
        for (var j=0; j<EN_Info[i].length; j++)
            Monster_Data += EN_Info[i][j]&65535;
    }
    Shop_Item_Data = 0;
    for (var i=0; i<Shop_Items.length; i++){
        for (var j=0; j<Shop_Items[i].length; j++){
            for (var k=0; k<Shop_Items[i][j].length; k++)
                Shop_Item_Data += Shop_Items[i][j][k]*k&65535;
        }
    }
}

var Check_Var1; // original name: d
// hard locks the game if certain conditions are not true
function antiCheatCheck(){ // original name: Ne()
    var class_ID,item_type,item_bullet,eff_ID;
    var en_highest_lv,enemy_types,xp_for_prev_LV,xp_for_next_LV,SP_sum;
    var item_attribute_data,enemy_spawn_data,monster_data,shop_item_data;

    if (LV<0 || 99<LV[0]){
        console.log("Error: PvE LV is above limit");
        //C=null;
    }
    if (LV[1]<0 || 99<LV[1]){
        console.log("Error: PvP LV is above limit");
        //C=null;
    }
    if (Team_EXP<0 || 9999999<Team_EXP){
        console.log("Error: EXP is above limit");
        //C=null;
    }
    if (Team_Gold<0 || 9999999<Team_Gold){
        console.log("Error: Gold is above limit");
        //C=null;
    }
    for (var s=0; s<Stickmen_Slots<<1; s++){
        if (SP[s]<0 || 196<SP[s]){
            console.log("Error: SP is above limit");
            //C=null;
        }
        if (LP_SP[s]<0 || 196<LP_SP[s]){
            console.log("Error: SP in LP is above limit");
            //C=null;
        }
        if (STR_SP[s]<0 || 196<STR_SP[s]){
            console.log("Error: SP in STR is above limit");
            //C=null;
        }
        if (DEX_SP[s]<0 || 196<DEX_SP[s]){
            console.log("Error: SP in DEX is above limit");
            //C=null;
        }
        if (MAG_SP[s]<0 || 196<MAG_SP[s]){
            console.log("Error: SP in MAG is above limit");
            //C=null;
        }
    }
    for (var s=0; s<Stickmen_Slots<<1; s++){
        if (Item_Inv[Stickmen_Slots+s]!=0 && Team_List[s]!=getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID)){
            console.log("Error: ranger "+(s+1)+" has weapon on wrong class");
            //C=null;
        }
    }
    for (var i=0; i<Stickmen_Slots<<1; i++){
        class_ID = getVal(Item_Inv[Stickmen_Slots+i],Item_Class_ID);
        item_type = getVal(Item_Inv[Stickmen_Slots+i],Item_Type);
        item_bullet = getVal(Item_Inv[Stickmen_Slots+i],Item_Bullet);
        if (Comp1_Inv[Stickmen_Slots+i]!=0){                                           // if weapon has a 1st compo item equipped
            if (getVal(Comp1_Inv[Stickmen_Slots+i],Item_Class_ID) != Class_Compo){
                console.log("Error: ranger "+(i+1)+" has compo in slot 1 that is not a compo type item");
                //C=null;
            }
            if (getVal(Comp1_Inv[Stickmen_Slots+i],Eff_ID) == getVal(Comp2_Inv[Stickmen_Slots+i],Eff_ID)){
                console.log("Error: ranger "+(i+1)+" has duplicate compo equipped");
                //C=null;
            }
            eff_ID = getVal(Comp1_Inv[Stickmen_Slots+i],Eff_ID);
            if (compRestrCheck(eff_ID,class_ID,item_type,item_bullet)==!1){
                console.log("Error: ranger "+(i+1)+" has illegal bullet's card equipped in slot 1");
                //C=null;
            }
        }
        if (Comp2_Inv[Stickmen_Slots+i]!=0 && Comp2_Inv[Stickmen_Slots+i]!=Null_Slot){ // if weapon has a 2nd compo item equipped
            if (getVal(Comp2_Inv[Stickmen_Slots+i],Item_Class_ID) != Class_Compo){
                console.log("Error: ranger "+(i+1)+" has compo in slot 2 that is not a compo type item");
                //C=null;
            }
            eff_ID = getVal(Comp2_Inv[Stickmen_Slots+i],Eff_ID);
            if (compRestrCheck(eff_ID,class_ID,item_type,item_bullet)==!1){
                console.log("Error: ranger "+(i+1)+" has illegal bullet's card equipped in slot 2");
                //C=null;
            }
        }
    }
    if (Game_Mode==0 || Game_Mode==2){
        en_highest_lv = 0;
        for (var s=0; s<Stage_Count; s++){
            if ((Stage_Status[s]&Unlocked) != 0){
                enemy_types = Book_Indexer[s+1]-Book_Indexer[s];
                for (var e=0; e<enemy_types; e++){
                    if (EN_Info[Book_Indexer[s]+e][EN_Lvl]>en_highest_lv)
                        en_highest_lv = EN_Info[Book_Indexer[s]+e][EN_Lvl];
                    e += EN_Info[Book_Indexer[s]+e][En_Is_2nd_Att];
                }
            }
        }
        if (LV[0]>en_highest_lv+10+2){
            console.log("Error: team level too high for current progress");
            //C=null;
        }
    }
    if (Game_Mode==0 || Game_Mode==2){
        xp_for_prev_LV = 4753000;
        xp_for_next_LV = 9999999;
        if (LV[0] < 98){
            xp_for_prev_LV = 0;
            for (var l=1; l<LV[0]; l++)
                xp_for_prev_LV += 1000*l;
            xp_for_next_LV = xp_for_prev_LV+1000*l;
        }
        if (Team_EXP<xp_for_prev_LV || xp_for_next_LV<Team_EXP){
            console.log("Error: experience is below/above current level");
            //C=null;
        }
    }
    SP_sum = 0;
    for (var i=0; i<Stickmen_Slots<<1; i++)
        SP_sum += SP[i]+LP_SP[i]+STR_SP[i]+DEX_SP[i]+MAG_SP[i];

    if ((Stickmen_Slots<<1)*(LV[0]-1)+(Stickmen_Slots<<1)*(LV[1]-1) != SP_sum){
        console.log("Error: amount of SP does not match for current level");
        //C=null;
    }

    Check_Var1 = Check_Var3;
    Check_Var1 += (Team_EXP|1)*(Check_Var1&15|1);
    Check_Var1 += (Team_Gold|1)*(Check_Var1&15|1);
    for (var t=0; t<2; t++)                 Check_Var1 += (LV[t]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (LP_SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (STR_SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (DEX_SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (MAG_SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (Team_List[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (LP_Current[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (MP_Bar[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (LP_Max[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (STR[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (DEX[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (MAG[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (AT_Min[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (AT_Max[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (Agi_Min[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (Agi_Max[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (Range[s]|1)*(Check_Var1&15|1);
    for (var i=0; i<Inv_Size; i++)          Check_Var1 += (Item_Inv[i]|1)*(Check_Var1&15|1);
    for (var i=0; i<Inv_Size; i++)          Check_Var1 += (Comp1_Inv[i]|1)*(Check_Var1&15|1);
    for (var i=0; i<Inv_Size; i++)          Check_Var1 += (Comp2_Inv[i]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (STR_Aura[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (DEX_Aura[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stage_Count; s++)       Check_Var1 += (Stage_Status[s]|1)*(Check_Var1&15|1);
    Check_Var1 += (Game_Mode|1)*(Check_Var1&15|1);
    Check_Var1 += (FP[0]|1)*(Check_Var1&15|1);
    Check_Var1 += (FP[1]|1)*(Check_Var1&15|1);
    Check_Var1 += (Rank[0]|1)*(Check_Var1&15|1);
    Check_Var1 += (Rank[1]|1)*(Check_Var1&15|1);
    if (Check_Var1 != (Check_Var2^16777215)){
        console.log("Error: Check_Var1 does not match previous check");
        //C=null;
    }

    if (random(100)<1){
        for (var i=0; i<Item_Catalogue.length; i++){
            item_attribute_data = 0;
            for (var j=0; j<Item_Catalogue[i].length; j++){
                if (typeof Item_Catalogue[i][j]=='number')
                    item_attribute_data += Item_Catalogue[i][j]&255;
            }
            if (Item_Attribute_Data[i]!=item_attribute_data){
                console.log("Error: Item_Attribute_Data does not match previous check");
                //C=null;
            }
        }
    }
    if (random(100)<1){
        enemy_spawn_data = 0;
        for (var i=0; i<Stage_Spawns.length; i++){
            for (var j=0; j<Stage_Spawns[i].length; j++){
                for (var k=0; k<Stage_Spawns[i][j].length; k++)
                    enemy_spawn_data += Stage_Spawns[i][j][k];
            }
        }
        if (Enemy_Spawn_Data!=enemy_spawn_data){
            console.log("Error: Enemy_Spawn_Data does not match previous check");
            //C=null;
        }
    }
    if (random(100)<1){
        monster_data = 0;
        for (var i=0; i<EN_Info.length; i++){
            for (var j=0; j<EN_Info[i].length; j++)
                monster_data += EN_Info[i][j]&65535;
        }
        if (Monster_Data!=monster_data){
            console.log("Error: Monster_Data does not match previous check");
            //C=null;
        }
    }
    if (random(100)<1){
        shop_item_data = 0;
        for (var i=0; i<Shop_Items.length; i++){
            for (var j=0; j<Shop_Items[i].length; j++){
                for (var k=0; k<Shop_Items[i][j].length; k++)
                    shop_item_data += Shop_Items[i][j][k]*k&65535;
            }
        }
        if (Shop_Item_Data!=shop_item_data){
            console.log("Error: Shop_Item_Data does not match previous check");
            //C=null;
        }
    }
}

function antiCheatSet(){ // original name: te()
    var Check_Var1 = floor(random(1024));
    Check_Var3 = Check_Var1;
    Check_Var1 += (Team_EXP|1)*(Check_Var1&15|1);
    Check_Var1 += (Team_Gold|1)*(Check_Var1&15|1);
    for (var t=0; t<2; t++)                 Check_Var1 += (LV[t]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (LP_SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (STR_SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (DEX_SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (MAG_SP[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (Team_List[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (LP_Current[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (MP_Bar[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (LP_Max[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (STR[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (DEX[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (MAG[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (AT_Min[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (AT_Max[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (Agi_Min[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (Agi_Max[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (Range[s]|1)*(Check_Var1&15|1);
    for (var i=0; i<Inv_Size; i++)          Check_Var1 += (Item_Inv[i]|1)*(Check_Var1&15|1);
    for (var i=0; i<Inv_Size; i++)          Check_Var1 += (Comp1_Inv[i]|1)*(Check_Var1&15|1);
    for (var i=0; i<Inv_Size; i++)          Check_Var1 += (Comp2_Inv[i]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (STR_Aura[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stickmen_Slots<<1; s++) Check_Var1 += (DEX_Aura[s]|1)*(Check_Var1&15|1);
    for (var s=0; s<Stage_Count; s++)       Check_Var1 += (Stage_Status[s]|1)*(Check_Var1&15|1);
    Check_Var1 += (Game_Mode|1)*(Check_Var1&15|1);
    Check_Var1 += (FP[0]|1)*(Check_Var1&15|1);
    Check_Var1 += (FP[1]|1)*(Check_Var1&15|1);
    Check_Var1 += (Rank[0]|1)*(Check_Var1&15|1);
    Check_Var1 += (Rank[1]|1)*(Check_Var1&15|1);
    Check_Var2 = Check_Var1^16777215;
}

var Startup_Step = 0;
function gameStartup(a,b,c,d,e,g,k,r,m,n,F,H,M){ // original name: Te()
    if (Startup_Step==0){
        if (a!=null)
             Game_ID = a;
        else Game_ID = "";
        if (b=="0")
             Game_Language = !0;
        else Game_Language = !1;
        if (c!=null)
             Save_Cookie = c;
        else Save_Cookie = "";
        if (d!=null)
             Game_Mode = ~~d;
        else Game_Mode = 0;
        if (e!=null)
             VS_Player_Team_Text = e;
        else VS_Player_Team_Text = "";
        if (g!=null)
             VS_Opponent_Team_ID = g;
        else VS_Opponent_Team_ID = "";
        if (k!=null)
             VS_Opponent_Data = k;
        else VS_Opponent_Data = "";
        if (r!=null)
             VS_Upload_Errors = ~~r;
        else VS_Upload_Errors = 0;
        if (m!=null)
             VS_Player_Team_ID = ~~m;
        else VS_Player_Team_ID = 0;
        if (n!=null)
             Player_Name = n;
        else Player_Name = "";
        if (F!=null)
             VS_Player_Team_Name = F;
        else VS_Player_Team_Name = "";
        if (H!=null)
             VS_Opponent_Name = H;
        else VS_Opponent_Name = "";
        if (M!=null)
             VS_Opponent_Team_Name = M;
        else VS_Opponent_Team_Name = "";

        for (var i=0; i<Stickmen_Slots<<1 && i<Game_ID.length; i++){
            b = Game_ID.charAt(i);
            for (var j=0; j<Char_List.length; j++){
                if (Char_List[j]==b){
                    VS_Game_ID_Plain[i] = j;
                    break;
                }
            }
        }
        logCopyright("Copyright (C) 2008 ha55ii DAN-BALL.jp"); // testing: keep console clear

        cv.width = Win_Width;
        cv.height = Win_Height;

        for (var w=0; w<513; w++)
            Xe[w] = new Float32Array(2);

        for (var w=0; w<512; w++){
            b = 360*w/512*Pi/180;
            Xe[w][0] = Math.cos(b);
            Xe[w][1] = Math.sin(b);
        }

        Xe[i][0] = Xe[0][0];
        Xe[i][1] = Xe[0][1];

        for (var h=0; h<256; h++){
            Arr256_1[h] = !1;
            Arr256_2[h] = !1;
            Arr256_3[h] = !1;
            Arr256_4[h] = 0;
            Arr256_5[h] = 0;
        }

        for (var i=0; i<10; i++)
            Arr256_4[i+48] = i+48;
        for (var i=0; i<9; i++)
            Arr256_5[i+49] = i+33;
        for (var i=0; i<4; i++)
            Arr256_4[i+37] = i+37;
        for (var i=0; i<4; i++)
            Arr256_5[i+37] = i+37;

        Arr256_4[13] = Arr256_5[13] = 13;
        Arr256_4[16] = Arr256_5[16] = 16;
        Arr256_4[17] = Arr256_5[17] = 17;
        Arr256_4[18] = Arr256_5[18] = 18;
        Arr256_4[32] = Arr256_5[32] = 32;
        Arr256_4[186] = 58;
        Arr256_5[186] = 42;
        Arr256_4[187] = 59;
        Arr256_5[187] = 43;
        Arr256_4[188] = 44;
        Arr256_5[188] = 60;
        Arr256_4[189] = 45;
        Arr256_5[189] = 61;
        Arr256_4[190] = 46;
        Arr256_5[190] = 62;
        Arr256_4[191] = 47;
        Arr256_5[191] = 63;
        Arr256_4[192] = 64;
        Arr256_5[192] = 96;
        Arr256_4[219] = 91;
        Arr256_5[219] = 123;
        Arr256_4[220] = 92;
        Arr256_5[220] = 124;
        Arr256_4[221] = 93;
        Arr256_5[221] = 125;
        Arr256_4[222] = 94;
        Arr256_5[222] = 126;
        Arr256_4[226] = 92;
        Arr256_5[226] = 95;
        Arr256_4[58] = 58;
        Arr256_5[58] = 42;
        Arr256_4[59] = 59;
        Arr256_5[59] = 43;
        Arr256_4[173] = 45;
        Arr256_5[173] = 61;
        Arr256_4[64] = 64;
        Arr256_5[64] = 96;
        Arr256_4[160] = 94;
        Arr256_5[160] = 126;

        for (var i=0; i<1024; i++)
            Rand_Arr_Df[i] = i/1024;
        for (var i=0; i<1024; i++){
            b = floor(1024*Math.random());
            c = Rand_Arr_Df[i];
            Rand_Arr_Df[i] = Rand_Arr_Df[b];
            Rand_Arr_Df[b] = c;
        }

        Rand_EF = floor(1024*Math.random())&1023;
        Rand_FF = floor(512*Math.random())|1;

        for (var i=0; i<Win_Width*Win_Height; i++)
            Game_Canvas[i] = 0;
        for (var i=0; i<Win_Width*Win_Height*4; i++)
            Bit_8_Color[i] = 0xFF;

        Large_Text.TXset("font.gif",8,12);  // reference: size of letters
        Small_Text.TXset("font_s.gif",5,7);

        for (var i=0; i<13; i++){
            Terrain_Textures[i] = new SR_Image;
            Terrain_Textures[i].IGset("gt"+i+".gif");
        }

        Player_Img.IGset("pl.gif");
        Drop_Img.IGset("icon.gif");
        Item_Img.IGset("item.gif");
        Enemy_Head_Img.IGset("en.gif");
        Elite_Img.IGset("elite.gif");
        Sign_Img.IGset("next.gif");
        Projectiles_Img.IGset("mag.gif");
        Title_Img.IGset("title.gif");
        Moon_Img.IGset("planet.gif");
        Eclipse_Img.IGset("eclipse.gif");
        Effect_Img.IGset("ef.gif");
        Hut_Img.IGset("town.gif");
        Water_Img.IGset("Water.gif");
        Water_Red_Img.IGset("water2.gif");
        Wood_Img.IGset("wood.gif");
        Forget_Tree_Img.IGset("tree.gif");
        Control_Img.IGset("control.gif");
        Map_Elev_Index.IGset("map.gif");
        Map_Tiles_Img.IGset("mt.gif");
        Map_Feature_Index.IGset("map2.gif");
        Map_Features_Img.IGset("mt2.gif");

        if (checkFalseHost())
             Startup_Step--;
        else Startup_Step++;
    }
    if (Startup_Step==1){
        imgToArray(Large_Text.TX_image);
        imgToArray(Small_Text.TX_image);
        for (var i=0; i<13; i++)
            imgToArray(Terrain_Textures[i]);
        imgToArray(Player_Img);
        imgToArray(Drop_Img);
        imgToArray(Item_Img);
        imgToArray(Enemy_Head_Img);
        imgToArray(Elite_Img);
        imgToArray(Sign_Img);
        imgToArray(Projectiles_Img);
        imgToArray(Title_Img);
        imgToArray(Effect_Img);
        imgToArray(Hut_Img);
        imgToArray(Water_Img);
        imgToArray(Water_Red_Img);
        imgToArray(Wood_Img);
        imgToArray(Forget_Tree_Img);
        imgToArray(Control_Img);
        imgToArray(Map_Elev_Index);
        imgToArray(Map_Tiles_Img);
        imgToArray(Map_Feature_Index);
        imgToArray(Map_Features_Img);
        imgToArray(Moon_Img);
        imgToArray(Eclipse_Img);
        if (Tile_Counter1!=0)
             setTimeout(gameStartup,timePF());
        else Startup_Step++;
    }
    if (Startup_Step==2){
        Players.PLreset();
        Indicators.INreset();
        Projectiles.PJreset();
        Drops.DPreset();
        WorldMap.MAPset();
        if (Game_Mode==1)
            loadGame(VS_Opponent_Data,1);
        loadGame(Save_Cookie,0);
        Save_Code3 = genSaveCode(0);
        dataGather();
        antiCheatSet();
        setArea(Stage_Eff_Canvas,Win_Width,Win_Height);
        mainSequence();
    }
}

window.fff = playSequence;
function playSequence(){ // original name: sf()
    if (Check_Host1 > 0){
        Check_Host1++;
    } else {
        DIRE_Inv_Top = Win_Height-DIRE_Inv_Height; // used to adjust tile drawing to fit above the inventory
        setSaveCode("");
        saveGame("");
        for (var i=Win_Width*Win_Height-1; i>=0; i--)
            Game_Canvas[i] = 0;

        if (Sequence_Step <= 9)
            menuAndMap();
        else if (Sequence_Step <= 49)
            PvEscreens();
        else if (Sequence_Step <= 59)
            townScreens();
        else if (Sequence_Step <= 60)
            PvPscreens();

        if (Saving_Text_Timer > 0){
            Saving_Text_Timer--;
            textBox(Large_Text,Win_Width-32,DIRE_Inv_Top-8-1,"Saving...",0xFF0000,0x660000);
        }
        if (Save_Error_Text_Timer > 0){
            Save_Error_Text_Timer--;
            if (Save_Error==2)
                Large_Text.TXoutput(10,10,"Version Error",0xFF0000,0x660000);
            else if (Save_Error==3)
                Large_Text.TXoutput(10,10,"Data Error",0xFF0000,0x660000);
            else if (Save_Error==4)
                Large_Text.TXoutput(10,10,"User Error",0xFF0000,0x660000);

        }
        if (Debug_Mode==1){
            Large_Text.TXoutput(0,0,Frame_Rate+"fps",0xFFFFFF,0x000000);
            Large_Text.TXoutput(0,28,Dodge_Cooldown+"cooldown",0xFFFFFF,0x000000);
            if (Debug_Mode==1)
                Large_Text.TXoutput(48,0,Time_Per_Second+"sl",0xFFFFFF,0x000000);
            Large_Text.TXoutput(0,14,""+DIRE_curr_sequence[Sequence_Step],0xFFFFFF,0x000000);
            Large_Text.TXoutput(Win_Width-88,0,"X:"+Mouse_Xpos,0xFFFFFF,0x000000);
            Large_Text.TXoutput(Win_Width-40,0,"Y:"+Mouse_Ypos,0xFFFFFF,0x000000);
        }
        antiCheatCheck();
    }
}

window.fff = menuAndMap; // da.fff = uf
function menuAndMap(){ // original name: uf()
    if (Sequence_Step==0){                                                            // Sequence: reset players and enemies for title screen
        DIRE_Inv_Height = 0;
        Players.PLreset();
        Enemies.ENreset(0);
        Sequence_Step++;

        if (Game_Mode==1)
            Sequence_Step = 60;
        else if (Game_Mode==2 || Game_Mode==3)
            Sequence_Step = 70;

    } else if (Sequence_Step==1){                                                     // Sequence: load in stickmen for title screen
        Current_Screen = 0;
        if (Terrain.TRset(0)){
            Players.PLspawn(0,(Win_Width>>4)-12,Terrain.TR_low_dry_surface[(Win_Width>>4)-12]); // set spawn positions for the rangers
            Players.PLspawn(1,(Win_Width>>4)-4,Terrain.TR_low_dry_surface[(Win_Width>>4)-4]);
            Players.PLspawn(2,(Win_Width>>4)+4,Terrain.TR_low_dry_surface[(Win_Width>>4)+4]);
            Players.PLspawn(3,(Win_Width>>4)+12,Terrain.TR_low_dry_surface[(Win_Width>>4)+12]);
            setRangersUI();
            Enemies.ENreset(1);
            Sequence_Step++;
        }
    } else if (Sequence_Step==2){
        ChangeBGM(mus_moonsong);                                                     // Sequence: make buttons for new game, new game+, load game, vs mode
        Players.PLmain();
        setRangersUI();
        Terrain.TRdrawTerrain();
        Players.PLrenderPlayer();
        dispItemCentered(Title_Img,DIRE_Win_Center,100,365,121,0,Game_Language? 0 :121,365,121,0xFFFFFFFF);
        textBox(Large_Text,DIRE_Win_Center - 4,140,"Eclipsed!",0x564371,0xFFFFFF);

        // add up crowns
        var new_game_plus = false;
        var IC_level = 100;
        var AC_level = 0;
        for (var i=Stickmen_Slots; i<Inv_Last; i++){
            if (getVal(Item_Inv[i] ,Eff_ID) == Crown_Imprl) IC_level += getVal(Item_Inv[i] ,Eff1);
            if (getVal(Comp1_Inv[i],Eff_ID) == Crown_Imprl) IC_level += getVal(Comp1_Inv[i],Eff1);
            if (getVal(Comp2_Inv[i],Eff_ID) == Crown_Imprl) IC_level += getVal(Comp2_Inv[i],Eff1);
            if (getVal(Item_Inv[i] ,Eff_ID) == Crown_Anger) AC_level = 1;
            if (getVal(Comp1_Inv[i],Eff_ID) == Crown_Anger) AC_level = 1;
            if (getVal(Comp2_Inv[i],Eff_ID) == Crown_Anger) AC_level = 1;
        }
        IC_level = clamp(IC_level*DIRE_Enemy_Lim_Mult,100*DIRE_Enemy_Lim_Mult,300*DIRE_Enemy_Lim_Mult);
        if (IC_level>100 || AC_level==1)
            new_game_plus = true;

        if (new_game_plus==false)
             textBox(Large_Text,DIRE_Win_Center,195,"New Game" ,0xFFFFFF,0x996633);
        else textBox(Large_Text,DIRE_Win_Center,195,"New Game+",0xFFFFFF,0x996633);

        if (isMouseHoveredCenter(new_game_plus==false? DIRE_Win_Center :316,195,new_game_plus==false? 128 :248,24)){
            if (Clicked){
                antiCheatCheck();
                Selected_Player = Displayed_Object = 3;

                for (var s=0; s<Stickmen_Slots; s++){
                    // assign current team+equipped items to placeholder
                    Team_List_Proxy[s] = Team_List[s];
                    Item_Inv_Proxy[s] = Item_Inv[Stickmen_Slots+s];
                    Comp1_Inv_Proxy[s] = Comp1_Inv[Stickmen_Slots+s];
                    Comp2_Inv_Proxy[s] = Comp2_Inv[Stickmen_Slots+s];

                    // resest team and equipped items
                    Team_List[s] = 0;
                    Item_Inv[Stickmen_Slots+s] = 0;
                    Comp1_Inv[Stickmen_Slots+s] = 0;
                    Comp2_Inv[Stickmen_Slots+s] = 0;
                }
                Sequence_Step += 1;
                antiCheatSet();
                setRangersUI();
            }
            if (new_game_plus==false)
                 drawLine(DIRE_Win_Center-64,203,DIRE_Win_Center+64,203,0xAA0000);
            else drawLine(DIRE_Win_Center-64,203,DIRE_Win_Center+64,203,0xAA0000);
        }
        if (Team_List[0]!=0 && Team_List[1]!=0 && Team_List[2]!=0 && Team_List[3]!=0){
            textBox(Large_Text,DIRE_Win_Center,235,"Load Game",0xFFFFFF,0x996633);
            if (isMouseHoveredCenter(DIRE_Win_Center,235,128,24)){
                if (Clicked) 
                    if (Stage_Status[1] > Unlocked) Sequence_Step = 5;
                        else {
                            Sequence_Step = 7;
                            Sequence_Timer = 0;
                        }
                    
                drawLine(DIRE_Win_Center-64,243,DIRE_Win_Center+64,243,0xAA0000);
            }
        }
        textBox(Large_Text,DIRE_Win_Center,275,"VS Mode",0xFFFFFF,0x4D4D99);
        if (isMouseHoveredCenter(DIRE_Win_Center,275,128,24)){
            if (Clicked){
                if (Game_Language)
                     location.pathname = "/javagame/ranger/versus.html";
                else location.pathname =  "/en/javagame/ranger/versus.html";
            }
            drawLine(DIRE_Win_Center-64,283,DIRE_Win_Center+64,283,0xAA0000);
        }
        menuCredits();
    } else if (Sequence_Step==3){                                                     // Sequence: Class Select screen
        ChangeBGM(mus_restarea); 
        Players.PLmain();
        Terrain.TRdrawTerrain();
        Players.PLrenderPlayer();

        largeMessage(Large_Text,DIRE_Win_Center,50,"Players's Class Selection",204,148,73,0xFF,100,0,0,0xFF,16,24);

        for (var s=0; s<Stickmen_Slots; s++){ // clicking on stickman slots when choosing class
            if (isMouseHoveredCenter(160+64*s,140,24,24)){
                if (Clicked)
                    Selected_Player = Displayed_Object = s;
                fillColor(160+64*s,140,24,24,0x800000); // fill color when chosing stickman slot
            }
            drawRectCentered(160+64*s,140,25,25,0xFFFFFF);
            dispItemCentered(Player_Img,160+64*s,140,24,24,24*Team_List[s],0,24,24,0xFFFFFFFF);
        }
        drawRectCentered(160+64*Displayed_Object,140,25,25,0xFF0000); // box around stickman slot

        antiCheatCheck();

        for (var i=0; i<8; i++){ // number of classes?
            var b = 46+60*i;
            var c = Class_Name_List[i+1];
            var d = Large_Text;

            d.Q = -1;
            textBox(d,b,220,c,13407305,6553600);
            d.Q = 0;

            if (isMouseHoveredCenter(46+60*i,240,24,24)){
                if (Clicked){
                    Team_List[Displayed_Object] = i+1;
                    Item_Inv[Stickmen_Slots+Displayed_Object] = [3,4,5,6,58,76,188,289][i];
                    Comp1_Inv[Stickmen_Slots+Displayed_Object] = 0;
                    Comp2_Inv[Stickmen_Slots+Displayed_Object] = 0;
                }
                fillColor(46+60*i,240,24,24,0x800000); // fill color when hovering over class choices
            }
            drawRectCentered(46+60*i,240,25,25,0xFFFFFF);
            dispItemCentered(Player_Img,46+60*i,240,24,24,24*(i+1),0,24,24,0xFFFFFFFF);
        }

        if (Team_List[0]!=0 && Team_List[1]!=0 && Team_List[2]!=0 && Team_List[3]!=0){
            textBox(Large_Text,464,300,"Start",0xFFFFFF,0x996633);
            if (isMouseHoveredCenter(464,300,128,24)){
                if (Clicked)
                    Sequence_Step++;
                drawLine(416,308,512,308,0xAA0000);
            }
        }

        textBox(Large_Text,48,300,"Return",0xFFFFFF,0x996633);
        if (isMouseHoveredCenter(48,300,128,24)){
            if (Clicked){
                for (var s=0; s<Stickmen_Slots; s++){ // restore previous team
                    Team_List[s] = Team_List_Proxy[s];
                    Item_Inv[Stickmen_Slots+s] = Item_Inv_Proxy[s];
                    Comp1_Inv[Stickmen_Slots+s] = Comp1_Inv_Proxy[s];
                    Comp2_Inv[Stickmen_Slots+s] = Comp2_Inv_Proxy[s];
                }
                Sequence_Step = 2; // return to step 2
            }
            drawLine(0,308,96,308,0xAA0000);
        }

        antiCheatSet();
        menuCredits();
    } else if (Sequence_Step==4){                                                     // Sequence: loading after clicking New Game
        antiCheatCheck();
        // add up crowns
        var IC_level = 100;
        var AC_level = 0;
        for (var s=0; s<Stickmen_Slots; s++){ // fix: also check compos of equipped weapons on old team
            if (getVal(Comp1_Inv_Proxy[s],Eff_ID)==Crown_Imprl) IC_level += getVal(Comp1_Inv_Proxy[s],Eff1);
            if (getVal(Comp2_Inv_Proxy[s],Eff_ID)==Crown_Imprl) IC_level += getVal(Comp2_Inv_Proxy[s],Eff1);
            if (getVal(Comp1_Inv_Proxy[s],Eff_ID)==Crown_Anger) AC_level = 1;
            if (getVal(Comp2_Inv_Proxy[s],Eff_ID)==Crown_Anger) AC_level = 1;
        }
        for (var i=Inv_First; i<Inv_Last; i++){ // check current inventory
            if (getVal(Item_Inv[i] ,Eff_ID)==Crown_Imprl) IC_level += getVal(Item_Inv[i] ,Eff1);
            if (getVal(Comp1_Inv[i],Eff_ID)==Crown_Imprl) IC_level += getVal(Comp1_Inv[i],Eff1);
            if (getVal(Comp2_Inv[i],Eff_ID)==Crown_Imprl) IC_level += getVal(Comp2_Inv[i],Eff1);
            if (getVal(Item_Inv[i] ,Eff_ID)==Crown_Anger) AC_level = 1;
            if (getVal(Comp1_Inv[i],Eff_ID)==Crown_Anger) AC_level = 1;
            if (getVal(Comp2_Inv[i],Eff_ID)==Crown_Anger) AC_level = 1;
        }
        IC_level = clamp(IC_level*DIRE_Enemy_Lim_Mult,100*DIRE_Enemy_Lim_Mult,300*DIRE_Enemy_Lim_Mult);

        // reset stages
        Current_Stage = 0;
        for (var s=0; s<Stage_Count; s++)
            Stage_Status[s] = 0;
        Stage_Status[0] = Beaten|Unlocked;
        Stage_Status[1] = Unlocked;

        // reset stats
        LV[0] = 1;
        FP[0] = 1;
        Team_Gold = Team_EXP = Rank[0] = 0;
        for (var s=0; s<Stickmen_Slots; s++){
            SP[s] = 0;
            LP_Current[s] = 50;
            MP_Bar[s] = 0;
            LP_SP[s] = 0;
            STR_SP[s] = 0;
            DEX_SP[s] = 0;
            MAG_SP[s] = 0;
            Sett_Auto_Move[s] = 1;
        }
        // reset options
        Sett_PL_Symbol = Sett_LP_Bar_Disp = Sett_Dmg_Indicators = Sett_Move_If_Dying = 0;
        Sett_Drag_Dead_Body = 1;

        // reset inventory
        for (var i=Inv_First; i<Inv_Size; i++){
            Item_Inv[i] = 0;
            Comp1_Inv[i] = 0;
            Comp2_Inv[i] = 0;
        }
        // resest team
        for (var s=0; s<Stickmen_Slots; s++)
            Players.PL_class_ID[s] = 0;

        // based on IC_level, give an imperial crown of the appropriate level
        if (IC_level >= 300)
            Item_Inv[Inv_First+0] = 560;
        else if (IC_level >= 250)
            Item_Inv[Inv_First+0] = 559;
        else if (IC_level >= 200)
            Item_Inv[Inv_First+0] = 558;
        else if (IC_level >= 150)
            Item_Inv[Inv_First+0] = 557;

        if (AC_level==1 && IC_level==100) // if no imperial crown
            Item_Inv[Inv_First] = 561;  // place anger crown in 1st inventory slot
        if (AC_level==1 && IC_level!=100) // if you have imperial crown
            Item_Inv[Inv_First+1] = 561;  // place anger crown in 2nd inventory slot


        Current_Screen = 0;
        WorldMap.MAP_tile_horizontal_spacer = 0;
        Sequence_Step = 7;
        Sequence_Timer = 0;
        antiCheatSet();
        menuCredits();
    } else if (Sequence_Step==5){                                                     // Sequence: loading after clicking Load Game
        Current_Screen = 0;
        Sequence_Step = 6;
        //Current_Stage = 57, Sequence_Step = 10; // automatically load snowfield 4 for testing
    } else if (Sequence_Step==6){                                                     // Sequence: World Map
        if (Stage_Status[1] > Unlocked) Prologue = false;
        if (!Prologue) ChangeBGM(mus_restarea);
        WorldMap.MAPmain();
        drawUI(2);
    } else if (Sequence_Step==7){                 // Sequence: Title card lore
        dispItemCentered(Eclipse_Img,DIRE_Win_Center,100,96,72,0,0,96,72,0xFFFFFFFF);                                 
        textBox(Large_Text,DIRE_Win_Center,180,"The Eclipse is returning after 5,000,000 years",0x9449CC,0x640064);
        textBox(Large_Text,DIRE_Win_Center,192,"                 of dormancy.",0x9449CC,0x640064);
        textBox(Large_Text,DIRE_Win_Center,216,"Surely calamity will occur if you don't stop it!",0x9449CC,0x640064);
        screenTransition(0xFF - floor(0xFF*Sequence_Timer/240));
        if (Sequence_Timer < 240 && Sequence_Timer != -1) Sequence_Timer++;
        if (Clicked && Sequence_Timer >= 120){
            Current_Screen = 0;
            Prologue = true;
            Current_Stage = 1;
            Sequence_Step = 10;
        }
    }
}

window.fff = PvEscreens; // da.fff = vf;
function PvEscreens(){ // original name: vf()
    var a,b,c,d;
    var static_left,static_middle,static_right,group_pos,group_en_type,group_count,en_xpos,en_ypos;
    var screen_intro_text1 = "";

    if (Sequence_Step==10){                
        if (Sequence_Timer != -1) {
            drawUI(0);
            Sequence_Timer = -1;      
        }                                     // Sequence: load PvE screen
        else if (Terrain.TRset(Current_Stage)){
            if (Current_Stage == 1 && Current_Screen == 0) {
                Players.PLspawn(0,16,Terrain.TR_low_dry_surface[16]);
                Players.PLspawn(1,19,Terrain.TR_low_dry_surface[19]);
                Players.PLspawn(2,22,Terrain.TR_low_dry_surface[22]);
                Players.PLspawn(3,25,Terrain.TR_low_dry_surface[25]);
            } else {
                Players.PLspawn(0,0,Terrain.TR_low_dry_surface[0]);
                Players.PLspawn(1,1,Terrain.TR_low_dry_surface[1]);
                Players.PLspawn(2,2,Terrain.TR_low_dry_surface[2]);
                Players.PLspawn(3,3,Terrain.TR_low_dry_surface[3]);
            }
            Enemies.ENreset(1);

            Enemy_Spawn_Scale = 100;
            for (var s=Stickmen_Slots; s<Inv_Last; s++){
                if (getVal(Item_Inv[s],Eff_ID) == Crown_Imprl)
                    Enemy_Spawn_Scale += getVal(Item_Inv[s],Eff1);
                if (getVal(Comp1_Inv[s],Eff_ID) == Crown_Imprl)
                    Enemy_Spawn_Scale += getVal(Comp1_Inv[s],Eff1);
                if (getVal(Comp2_Inv[s],Eff_ID) == Crown_Imprl)
                    Enemy_Spawn_Scale += getVal(Comp2_Inv[s],Eff1);
            }
            Enemy_Spawn_Scale = clamp(Enemy_Spawn_Scale*DIRE_Enemy_Lim_Mult,100*DIRE_Enemy_Lim_Mult,300*DIRE_Enemy_Lim_Mult);

            static_left = floor(randomRange(12,(Win_Width>>5)+12));
            static_middle = floor(randomRange((Win_Width>>5)+12,(Win_Width>>4)+12));
            static_right = floor(randomRange((Win_Width>>4)+12,(Win_Width>>3)-4));
            for (var l=0; l<floor((Stage_Spawns[Current_Stage][Current_Screen].length-2)/3); l++){
                group_pos = Stage_Spawns[Current_Stage][Current_Screen][3*l+2];
                group_en_type = Stage_Spawns[Current_Stage][Current_Screen][3*l+3];
                group_count = Stage_Spawns[Current_Stage][Current_Screen][3*l+4];
                group_count = floor(group_count*Enemy_Spawn_Scale*DIRE_Enemy_Lim_Mult/100); // multiply the enemy group sizes

                for (var e=0; e<group_count; e++){
                    if (group_pos==Ground){
                        en_xpos = floor(randomRange(12,(Win_Width>>3)-4));
                        en_ypos = fiftyfifty(Terrain.TR_low_dry_surface[en_xpos],Terrain.TR_high_surface[en_xpos]);
                    } else if (group_pos==Ground_Left){
                        en_xpos = floor(randomRange(12,(Win_Width>>5)+12));
                        en_ypos = fiftyfifty(Terrain.TR_low_dry_surface[en_xpos],Terrain.TR_high_surface[en_xpos]);
                    } else if (group_pos==Ground_Middle){
                        en_xpos = floor(randomRange((Win_Width>>5)+12,(Win_Width>>4)+12));
                        en_ypos = fiftyfifty(Terrain.TR_low_dry_surface[en_xpos],Terrain.TR_high_surface[en_xpos]);
                    } else if (group_pos==Ground_Right){
                        en_xpos = floor(randomRange((Win_Width>>4)+12,(Win_Width>>3)-4));
                        en_ypos = fiftyfifty(Terrain.TR_low_dry_surface[en_xpos],Terrain.TR_high_surface[en_xpos]);
                    } else if (group_pos==Air_Water){
                        en_xpos = floor(randomRange(12,(Win_Width>>3)-4));
                        en_ypos = floor(randomRange(Terrain.TR_air_ceil[en_xpos]+2,Terrain.TR_high_surface[en_xpos]));
                    } else if (group_pos==Air){
                        en_xpos = floor(randomRange(12,(Win_Width>>3)-4));
                        en_ypos = floor(randomRange(Terrain.TR_air_ceil[en_xpos]+2,Terrain.TR_air_floor[en_xpos]));
                    } else if (group_pos==Water && Terrain.TR_water_floor>0){
                        en_ypos = floor(random(Terrain.TR_water_floor));
                        en_xpos = Terrain.TR_water_ceil[en_ypos]&63;
                        en_ypos = Terrain.TR_water_ceil[en_ypos]>>6;
                    } else if (group_pos==Ground_Left_Clump){
                        en_xpos = static_left;
                        en_ypos = fiftyfifty(Terrain.TR_low_dry_surface[en_xpos],Terrain.TR_high_surface[en_xpos]);
                    } else if (group_pos==Ground_Middle_Clump){
                        en_xpos = static_middle;
                        en_ypos = fiftyfifty(Terrain.TR_low_dry_surface[en_xpos],Terrain.TR_high_surface[en_xpos]);
                    } else if (group_pos==Ground_Right_Clump){
                        en_xpos = static_right;
                        en_ypos = fiftyfifty(Terrain.TR_low_dry_surface[en_xpos],Terrain.TR_high_surface[en_xpos]);
                    } else if (group_pos==Ceiling){
                        en_xpos = floor(randomRange(12,(Win_Width>>3)-4));
                        en_ypos = Terrain.TR_air_ceil[en_xpos];
                    } else if (group_pos==Ceiling_Left){
                        en_xpos = floor(randomRange(12,(Win_Width>>5)+12));
                        en_ypos = Terrain.TR_air_ceil[en_xpos];
                    } else if (group_pos==Ceiling_Middle){
                        en_xpos = floor(randomRange((Win_Width>>5)+12,(Win_Width>>4)+12));
                        en_ypos = Terrain.TR_air_ceil[en_xpos];
                    } else if (group_pos==Ceiling_Right){
                        en_xpos = floor(randomRange((Win_Width>>4)+12,(Win_Width>>3)-4));
                        en_ypos = Terrain.TR_air_ceil[en_xpos];
                    } else continue;
                    Enemies.ENspawn(en_xpos,en_ypos,group_en_type);
                }
            }
            Projectiles.PJ_index = 0;
            Indicators.IN_index = 0;
            Drops.DP_index = 0;
            Text_Fade = Sign_Touched_Mode = Target_Array_ID = En_Count_From_Max = Target_HP_Max = Target_HP_Current = Drops.DP_log = 0;
            Sequence_Step++;
        }
    } else if (Sequence_Step==11){                                                    // Sequence: fade in screen (including splash text for first screen and boss screen)
        drawStage(0);
        drawUI(0);
        ChangeBGM(Stage_Songs[Current_Stage]);
        r = 30;
        screen_intro_text1 = "";

        if (Current_Screen==0){
            r = 110;
            screen_intro_text1 = Stage_Names[Current_Stage];
        } else if (Stage_Spawns[Current_Stage].length == Current_Screen+1){
            r = 110;
            screen_intro_text1 = "Boss Area";
            ChangeBGM(mus_boss);
        }

        screenTransition(0xFF-floor(0xFF*(Text_Fade<30? Text_Fade :30)/30));

        if (!Prologue && r==110){
            b = 0xFF;
            if (Text_Fade<30)
                b = floor(0xFF*Text_Fade/30);
            else if (Text_Fade>80)
                b = 0xFF-floor(0xFF*(Text_Fade-80)/30);
            largeMessage(Large_Text,DIRE_Win_Center,128,screen_intro_text1,0xFF,0xFF,0xFF,b,64,64,64,b,16,24);
            c = -1024+floor(512*Text_Fade/30);
            drawLine(c,112,c+1024,112,0x808080);
            c = 512-floor(512*Text_Fade/30);
            drawLine(c,141,c+1024,141,0x808080);
        }
        Text_Fade++;
        //Text_Fade = r; // skip fade-in for testing
        if (Text_Fade==r){
            Text_Fade = 0;
            Sequence_Step++;
        }
    } else if (Sequence_Step==12){                                                    // Sequence: play screen (after fade-in)
        drawStage(0);
        drawUI(0);

        if (LP_Current[0]+LP_Current[1]+LP_Current[2]+LP_Current[3] == 0){ // if team is dead
            Text_Fade = 0;
            Sequence_Step = 30;
        } else if (Sign_Touched_Mode!=0){
            Sequence_Step++;
        } else if (isMouseHovered(Win_Width-56-4-8-80-4 + 96*Prologue,4,56,20)){
            if (Clicked)
                Sequence_Step = 20;
            else if (Arr256_1[32]) // spacebar
                Sequence_Step = 20;

            Large_Text.TXoutput(Win_Width-52-4-8-80-4 + 96*Prologue,8,"Option",0xFF0000,0x000000); // options button (red highlight while in normal stages)
        } else if (Arr256_1[32]){ // spacebar
            Sequence_Step = 20;
        } else if (!Prologue && isMouseHovered(Win_Width-80-4,4,80,20)){
            if (Clicked)
                Sequence_Step = 6;
            Large_Text.TXoutput(Win_Width-4-70-6,8,"World Map",0xFF0000,0x000000); // World Map button (red highlight while in normal stages)
        }
    } else if (Sequence_Step==13){                                                    // Sequence: fade out screen after touching sign
        drawStage(0);
        drawUI(0);
        screenTransition(floor(0xFF*Text_Fade/30));
        Text_Fade++;
        //Text_Fade = 30; //  skip fade-out for testing

        if (Text_Fade==30){
            if (Sign_Touched_Mode==1){
                Sign_Touched_Mode = 0;
                Current_Screen++;
                Text_Fade = 0;
                Sequence_Step = 10;
            } else if (Sign_Touched_Mode==2){
                Text_Fade = Current_Screen = Sign_Touched_Mode = 0;
                antiCheatCheck();
                Stage_Status[Current_Stage] |= Beaten;
                if (Dot_Locations[Current_Stage][3]>0)
                    Stage_Status[Dot_Locations[Current_Stage][3]] |= Unlocked;
                if (Dot_Locations[Current_Stage][4]>0)
                    Stage_Status[Dot_Locations[Current_Stage][4]] |= Unlocked;
                antiCheatSet();
                Sequence_Step = 6;
                if (Dot_Locations[Current_Stage][3] == -1)
                    Sequence_Step = 40;
            }
            Save_Code3 = genSaveCode(0);
            Save_Code1 = 1;
        }
    } else if (Sequence_Step==20){                                                    // Sequence: paused game
        drawStage(1);
        drawUI(1);
        resume = 12;

        if ((Current_Stage==0 || Current_Stage==20 || Current_Stage==47 || Current_Stage==70 || Current_Stage==77) && Current_Screen==1)
            resume = 52;

        if (isMouseHovered(Win_Width-56-4-8-80-4 + 96*Prologue,4,56,20)){
            if (Clicked)
                Sequence_Step = resume;
            else if (Arr256_1[32]) // spacebar
                Sequence_Step = resume;

            Large_Text.TXoutput(Win_Width-52-4-8-80-4 + 96*Prologue,8,"Option",0xFF0000,0x000000); // options button (red highlight while options window is open)
        } else if (Arr256_1[32]){ // spacebar
            Sequence_Step = resume;
        }

        var T = (DIRE_Inv_Top>>1)-(152>>1)-10;
        Display_Mode = 1;
        drawButton(DIRE_Win_Center-128,T,256,151,0xCC333333);
        Display_Mode = 0;
        //textBox(Large_Text,DIRE_Win_Center,58,"Options",0xFFFFFF,0x000000); // options (white background and red highlighted)
        //********************************************
        textBox(Large_Text,DIRE_Win_Center-56,T+16,"Options",0xFFFFFF,0x000000); // options (white background and red highlighted)
        var options_list1 = ["OFF","ON"];
            Large_Text.TXoutput(DIRE_Win_Center-16,T+10,"  Debug Mode: "+options_list1[Debug_Mode],0xFFFFFF,0x000000);
        if (isMouseHovered(DIRE_Win_Center-128,T+10,256,13)){
            Large_Text.TXoutput(DIRE_Win_Center-16,T+10,"  Debug Mode: "+options_list1[Debug_Mode],0xFF0000,0x000000);
            Debug_Mode = cycle(Debug_Mode+Sett_Change,0,1);
        }
        //*********************************************
        for (var s=0; s<Stickmen_Slots; s++){
            dispItemCentered(Player_Img,DIRE_Win_Center+32*s,T+36,24,24,24*getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID),0,24,24,0xFFFFFFFF);
            colorPortraitWeap(DIRE_Win_Center+32*s-12,T+24,24*getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID),getVal(Item_Inv[Stickmen_Slots+s],Item_Color));
        }
        textBox(Large_Text,DIRE_Win_Center-76,T+56,"Auto Move:",0xFFFFFF,0x000000);
        var options_list1 = ["OFF","ON"];
        for (var s=0; s<Stickmen_Slots; s++){
            textBox(Large_Text,DIRE_Win_Center+32*s,T+56,options_list1[Sett_Auto_Move[s]],0xFFFFFF,0x000000);

            if (isMouseHoveredCenter(DIRE_Win_Center+32*s,T+56,32,13)){
                textBox(Large_Text,DIRE_Win_Center+32*s,T+56,options_list1[Sett_Auto_Move[s]],0xFF0000,0x000000);
                if (Clicked == true)
                    Sett_Auto_Move[s] = 1-Sett_Auto_Move[s];
            }
        }
        var options_list2 = ["No","Yes"]; // Move If Dying setting
        Large_Text.TXoutput(DIRE_Win_Center-128,T+66,"  Move If Dying : "+options_list2[Sett_Move_If_Dying],0xFFFFFF,0x000000);
        if (isMouseHovered(DIRE_Win_Center-128,T+66,256,13)){
            Large_Text.TXoutput(DIRE_Win_Center-128,T+66,"  Move If Dying : "+options_list2[Sett_Move_If_Dying],0xFF0000,0x000000);
            Sett_Move_If_Dying = cycle(Sett_Move_If_Dying+Sett_Change,0,1);
        }
        var options_list3 = ["Player&Enemy","Player","Enemy","OFF"]; // Damage Effect setting
        Large_Text.TXoutput(DIRE_Win_Center-128,T+79," Damage Numbers : "+options_list3[Sett_Dmg_Indicators],0xFFFFFF,0x000000);
        if (isMouseHovered(DIRE_Win_Center-128,T+79,256,13)){
            Large_Text.TXoutput(DIRE_Win_Center-128,T+79," Damage Numbers : "+options_list3[Sett_Dmg_Indicators],0xFF0000,0x000000);
            Sett_Dmg_Indicators = cycle(Sett_Dmg_Indicators+Sett_Change,0,3); // red
        }
        var options_list4 = ["OFF","Player","Enemy","Player&Enemy"]; // LP Bar setting
        Large_Text.TXoutput(DIRE_Win_Center-128,T+92,"        LP Bars : "+options_list4[Sett_LP_Bar_Disp],0xFFFFFF,0x000000);
        if (isMouseHovered(DIRE_Win_Center-128,T+92,256,13)){
            Large_Text.TXoutput(DIRE_Win_Center-128,T+92,"        LP Bars : "+options_list4[Sett_LP_Bar_Disp],0xFF0000,0x000000);
            Sett_LP_Bar_Disp = cycle(Sett_LP_Bar_Disp+Sett_Change,0,3);
        }
        var options_list5 = ["Square","Triangle","Shadow","OFF"]; // PL Symbol setting
        Large_Text.TXoutput(DIRE_Win_Center-128,T+105,"      PL Symbol : "+options_list5[Sett_PL_Symbol],0xFFFFFF,0x000000);
        if (isMouseHovered(DIRE_Win_Center-128,T+105,256,13)){
            Large_Text.TXoutput(DIRE_Win_Center-128,T+105,"      PL Symbol : "+options_list5[Sett_PL_Symbol],0xFF0000,0x000000);
            Sett_PL_Symbol = cycle(Sett_PL_Symbol+Sett_Change,0,3);
        }
        Large_Text.TXoutput(DIRE_Win_Center-128,T+118," Drag Dead Body : "+options_list1[Sett_Drag_Dead_Body],0xFFFFFF,0x000000); // Drag Dead Body setting
        if (isMouseHovered(DIRE_Win_Center-128,T+118,256,13)){
            Large_Text.TXoutput(DIRE_Win_Center-128,T+118," Drag Dead Body : "+options_list1[Sett_Drag_Dead_Body],0xFF0000,0x000000);
            Sett_Drag_Dead_Body = cycle(Sett_Drag_Dead_Body+Sett_Change,0,1);
        }
        textBox(Large_Text,DIRE_Win_Center,T+140,"Space Bar: open & close",0xC0C0C0,0x000000);
        if (isMouseHoveredCenter(DIRE_Win_Center,T+140,256,13)){
            textBox(Large_Text,DIRE_Win_Center,T+140,"Space Bar: open & close",0xFF0000,0x000000);
            if (Sett_Change!=0)
                Sequence_Step = resume;
        }
    } else if (Sequence_Step==30){                                                    // Sequence: Game Over text
        drawStage(0);
        drawUI(0);
        if (Text_Fade<100)
            Text_Fade++;
        b = floor(0xFF*Text_Fade/100);
        largeMessage(Large_Text,DIRE_Win_Center,Win_Height>>2,"Game Over",100,20,10,b,200,0,0,b,16,24);
        if (Text_Fade==100 && Clicked){
            antiCheatCheck();
            for (var s=0; s<Stickmen_Slots; s++){
                if (LP_Current[s]==0)
                    LP_Current[s] = 1;
            }
            antiCheatSet();
            Sequence_Step = 1;
        }
    } else if (Sequence_Step==40){                                                    // Sequence: Game Clear screen
        largeMessage(Large_Text,DIRE_Win_Center,112,"Congratulation",204,148,73,0xFF,100,0,0,0xFF,16,24);
        largeMessage(Large_Text,DIRE_Win_Center,144,"Game Clear",204,148,73,0xFF,100,0,0,0xFF,16,24);
        textBox(Large_Text,DIRE_Win_Center,224,"(C) 2008-2017 DAN-BALL",0xCC9449,0x640000);
        textBox(Large_Text, DIRE_Win_Center, 256, "(C) 2020 [random]",0xCC9449,0x640000);
        for (var s=0; s<Stickmen_Slots; s++){
            xx = 166+60*s-Players.PL_joint[s][2].x;
            yy = 224-Players.PL_joint[s][2].y;
            for (var j=0; j<21; j++){
                Players.PL_joint[s][j].x += xx;
                Players.PL_joint[s][j].y += yy;
            }
            drawItem(Terrain_Textures[12],166+60*s-12,233,24,8,0,0,24,8);
        }
        Players.PLrenderPlayer();
        if (Clicked){
            antiCheatCheck();
            for (var s=0; s<Stickmen_Slots; s++){
                if (LP_Current[s]==0)
                    LP_Current[s] = 1;
            }
            antiCheatSet();
            Sequence_Step = 1;
        }
    }
}

// book
window.fff = townScreens;
function townScreens(){ // original name: wf()
    var a,b,opacity1,d,e;
    var screen_intro_text2 = "";

    if (Sequence_Step==50 && Terrain.TRset(Current_Stage)){                               // Sequence: load town screen
        Players.PLspawn(0,16,Terrain.TR_low_dry_surface[16]);
        Players.PLspawn(1,19,Terrain.TR_low_dry_surface[19]);
        Players.PLspawn(2,22,Terrain.TR_low_dry_surface[22]);
        Players.PLspawn(3,25,Terrain.TR_low_dry_surface[25]);
        Enemies.ENreset(1);
        ChangeBGM(mus_restarea);
        Projectiles.PJ_index = 0;
        Indicators.IN_index = 0;
        Drops.DP_index = 0;
        Text_Fade = Sign_Touched_Mode = Target_Array_ID = En_Count_From_Max = Target_HP_Max = Target_HP_Current = Drops.DP_log = 0;
        Sequence_Step++;
    } else if (Sequence_Step==51){                                                    // Sequence: fade in town screen
        drawStage(0);
        drawUI(0);
        screen_intro_text2 = "";
        switch (Current_Stage){ // text when entering stages
            case 0: screen_intro_text2 = "Town"; break;
            case 20: screen_intro_text2 = "Village"; break;
            case 47: screen_intro_text2 = "Resort"; break;
            case 70: screen_intro_text2 = "Forget Tree"; break;
            case 77: screen_intro_text2 = "Island"; break;
        }

        screenTransition(0xFF-floor(0xFF*(30>Text_Fade? Text_Fade :30)/30));
        opacity1 = 0xFF;
        if (Text_Fade<30)
            opacity1 = floor(0xFF*Text_Fade/30);
        else if (Text_Fade>80)
            opacity1 = 0xFF-floor(0xFF*(Text_Fade-80)/30);

        largeMessage(Large_Text,DIRE_Win_Center,128,screen_intro_text2,0xFF,0xFF,0xFF,opacity1,64,64,64,opacity1,16,24);
        b = -1024+floor(512*Text_Fade/30);
        drawLine(b,112,b+1024,112,0x808080);
        b = 512-floor(512*Text_Fade/30);
        drawLine(b,141,b+1024,141,0x808080);
        Text_Fade++;
        //Text_Fade = 110; // skip fade-in for testing
        if (Text_Fade==110){
            Text_Fade = 0;
            Sequence_Step++;
        }
    } else if (Sequence_Step==52){                                                    // Sequence: play town screen
        drawStage(0);
        drawUI(0);
        if (Sign_Touched_Mode!=0){
            Sequence_Step = 59;
        } else if (isMouseHovered(Win_Width-56-4-8-80-4,4,56,20)){
            if (Clicked)
                Sequence_Step = 20;
            else if (Arr256_1[32]) // spacebar
                Sequence_Step = 20;
            Large_Text.TXoutput(Win_Width-52-4-8-80-4,8,"Option",0xFF0000,0x000000); // options button (red highlight while in town type stages)
        } else if (Arr256_1[32]){ // spacebar
            Sequence_Step = 20;
        } else if (isMouseHovered(Win_Width-80-4,4,80,20)){
            if (Clicked)
                Sequence_Step = 6;
            Large_Text.TXoutput(Win_Width-4-70-6,8,"World Map",0xFF0000,0x000000); // World Map button (red highlight while in town type stages)
        } else if (Current_Stage==70){
            if (isMouseHoveredCenter(DIRE_Win_Center,128,40,24)){
                textBox(Large_Text,DIRE_Win_Center,128,"Forget",0xFF0000,0x101814);
                if (Clicked){
                    Sequence_Step = 55;
                    Shop_Cell = Shop_Row = Item_Num = 0;
                }
            } else if (isMouseHoveredCenter(DIRE_Win_Center,160,40,24)){

                var inn_cost = 0;
                for (var s=0; s<Stickmen_Slots; s++)
                    inn_cost += LP_Max[s]-LP_Current[s];

                textBox(Large_Text,DIRE_Win_Center,160,"Inn",0xFF0000,0x101814); // red text at forget tree
                Large_Text.TXoutput(280,154,"heal team $"+inn_cost,0xFF0000,0x101814); // text at forget tree

                if (inn_cost <= Team_Gold && Clicked){ // restore health
                    antiCheatCheck();
                    for (var s=0; s<Stickmen_Slots; s++){
                        if (LP_Current[s]!=LP_Max[s]){
                            Indicators.INadd(Players.PL_joint[s][0].x,Players.PL_joint[s][0].y,0,LP_Max[s]-LP_Current[s],0x00FF00);
                            LP_Current[s] = LP_Max[s];
                        }
                    }
                    Team_Gold -= inn_cost;
                    antiCheatSet();
                }
            } else if (isMouseHoveredCenter(DIRE_Win_Center,184,48,24)){
                textBox(Large_Text,DIRE_Win_Center,184,"Book",0xFF0000,0x101814);
                if (Clicked){
                    Sequence_Step = 54;
                    Shop_Cell = Shop_Row = Book_Page = Item_Num = 0;
                }
            }
        } else if (isMouseHoveredCenter(400,168,40,24)){
            inn_cost = 0;
            for (var s=0; s<Stickmen_Slots; s++)
                inn_cost += LP_Max[s]-LP_Current[s]; // add up inn cost

            textBox(Large_Text,400,168,"Inn",0xFF0000,0xD2953A); // red text at town type stages
            textBox(Large_Text,400,208,"heal team $"+inn_cost,0xFFFFFF,0x311F1D); // text at town type stages

            if (inn_cost <= Team_Gold && Clicked){ // inn function
                antiCheatCheck();
                for (var s=0; s<Stickmen_Slots; s++){
                    if (LP_Current[s] != LP_Max[s]){
                        Indicators.INadd(Players.PL_joint[s][0].x,Players.PL_joint[s][0].y,0,LP_Max[s]-LP_Current[s],0x00FF00); // output LP restoration
                        LP_Current[s] = LP_Max[s]; // restore LP
                    }
                }
                Team_Gold -= inn_cost;
                antiCheatSet();
            }
        } else if (isMouseHoveredCenter(40,152,72,24)){
            if (Current_Stage==0)
                textBox(Large_Text,40,152,"Shop/Forge",0xFF0000,0xD2953A);
            else if (Current_Stage==20)
                textBox(Large_Text,40,152," Compo Shop",0xFF0000,0xD2953A);
            else if (Current_Stage==47)
                textBox(Large_Text,40,152," Junk Shop",0xFF0000,0xD2953A);
            else if (Current_Stage==77)
                textBox(Large_Text,40,152," Compo Shop",0xFF0000,0xD2953A);

            if (Clicked){
                Sequence_Step = 53;
                Shop_Cell = Shop_Row = Item_Num = 0;
            }
        } else if (isMouseHoveredCenter(40,184,48,24)){
            textBox(Large_Text,40,184,"Book",0xFF0000,0xD2953A);
            if (Clicked){
                Sequence_Step = 54;
                Shop_Cell = Shop_Row = Book_Page = Item_Num = 0;
            }
        }
    } else if (Sequence_Step==53){                                                    // Sequence: open shop
        drawStage(0);
        var town_stage;
        Sign_Touched_Mode = 0;

        switch (Current_Stage){
            case 0: town_stage = 0; break;
            case 20: town_stage = 1; break;
            case 47: town_stage = 2; break;
            case 77: town_stage = 3; break;
        }

        var shop_tab = [
            [3,20,21], // icons for shop tabs
            [7,8,9,10,11,16,17],   // icons for compo shop tabs
            [3,4,5,6,12,14,15,18], // icons for resort tabs
            [7,8,9,10,11,16,17]    // icons for combo shop tabs
        ];

        var shop_left = 80; // top left corner of shop window
        shop_top = 28;
        Display_Mode = 1;
        drawButton(shop_left-4,shop_top-4,243,168,0x80000000);
        Display_Mode = 0;
        drawRect(shop_left+0,shop_top+0,236,161,0xFFFFFF);

        if (isMouseHovered(shop_left+8,shop_top+4,16*shop_tab[town_stage].length,12)){
            b = (Mouse_Xpos-(shop_left+8))>>4;
            if (Clicked){ // Tabs
                PlaySoundInterrupt(snd_click, false);
                
                Item_Num = b;
                if (shop_tab[town_stage][Item_Num] != 21) { 
                    Shop_Row = clamp(Shop_Row,0,floor(Shop_Items[town_stage][Item_Num].length/3)-1);
                } else {
                    Shop_Row = -1;
                }
                
            }
            drawButton(shop_left+8+16*b,shop_top+4,12,12,0x990000);
        }

        Display_Mode2 = 2;
        for (var i=0; i<shop_tab[town_stage].length; i++)
            dispItem(Drop_Img,shop_left+8+16*i,shop_top+4,12,12,12*shop_tab[town_stage][i],0,12,12,0xFFFFFFFF); // tab icons in shop

        Display_Mode2 = 0;
        drawRect(shop_left+8+16*Item_Num-1,shop_top+4-1,14,14,0x990000);
        drawLine(shop_left+0,shop_top+20-1,shop_left+235,shop_top+20-1,0xFFFFFF);

        if (Shop_Row != -1) { // Regular shop screen
            if (isMouseHovered(shop_left+120,shop_top+24,84,84)){ // Items
                b = floor((Mouse_Xpos-(shop_left+120))/28);
                a = floor((Mouse_Ypos-(shop_top+24))/28);
                if (Clicked){
                    PlaySoundInterrupt(snd_click, false);
                    Shop_Cell = 3*a+b;
                }
                drawButton(shop_left+120+28*b,shop_top+24+28*a,24,24,0x990000);
            }

            var item_cell = (3*Shop_Row+Shop_Cell) % Shop_Items[town_stage][Item_Num].length;
            var shop_item = Shop_Items[town_stage][Item_Num][item_cell];
            var latest_unlock = 56;
            
            /*
            for (var s=0; s<Stage_Count; s++){
                if ((Stage_Status[s]&Beaten)>0 && Shop_Reqs[s]>latest_unlock)
                    latest_unlock = Shop_Reqs[s];
            }
            */
            if (Current_Stage==0 && item_cell>=latest_unlock)
                shop_item = 0;
            itemText(shop_left+8,shop_top+24,Item_Catalogue[shop_item][Item_Name]+" "+(Item_Catalogue[shop_item][Item_LV]? Item_Catalogue[shop_item][Item_LV] :""),-1,0x282828,-2);
            itemText(shop_left+8,shop_top+24,Item_Catalogue[shop_item][Item_Name]+" "+(Item_Catalogue[shop_item][Item_LV]? Item_Catalogue[shop_item][Item_LV] :""),0xFFFFFF,-1,-2);
            UI_weapClass = getVal(shop_item,Item_Class_ID);
            if (UI_weapClass==Class_Compo){
                Large_Text.TXoutput(shop_left+8,shop_top+40,"Compo Item",-1,0x505050);
                itemText(shop_left+8,shop_top+56,Item_Catalogue[shop_item][Compo_Desc_1],-1,0x282828,-2);
                itemText(shop_left+8,shop_top+56,Item_Catalogue[shop_item][Compo_Desc_1],0xFFFFFF,-1,-2);
                itemText(shop_left+8,shop_top+68,Item_Catalogue[shop_item][Compo_Desc_2],-1,0x282828,-2);
                itemText(shop_left+8,shop_top+68,Item_Catalogue[shop_item][Compo_Desc_2],0xFFFFFF,-1,-2);
            } else {
                Large_Text.TXoutput(shop_left+8,shop_top+40,"AT "+Item_Catalogue[shop_item][Item_AT_Min]+"-"+Item_Catalogue[shop_item][Item_AT_Max],0xFFFFFF,0x000000);
                Large_Text.TXoutput(shop_left+8,shop_top+52,"AGI "+Item_Catalogue[shop_item][Weap_AGI_Min]+"-"+Item_Catalogue[shop_item][Weap_AGI_Max],0xFFFFFF,0x000000);
                Large_Text.TXoutput(shop_left+8,shop_top+64,"Range "+Item_Catalogue[shop_item][Weap_Range],0xFFFFFF,0x000000);

                var type = getVal(shop_item,Item_Type);
                var type_para = getVal(shop_item,Item_Type_Para);
                var priest_buff = getVal(shop_item,Priest_Buff);
                var MP_price = maxOf(getVal(shop_item,Weap_MP_Price),0);
                var BAT_min = getVal(shop_item,Item_BAT_Min);
                var BAT_max = getVal(shop_item,Item_BAT_Max);

                // color type (shop UI)
                var TYPE = "";
                var type_color = 0xFFFFFF; // white
                var physical = 0x959595;   // gray
                var fire = 0xFF3333;       // red
                var ice = 0x6C6CCB;        // blue
                var thunder = 0xEDED00;    // yellow
                var poison = 0x00FE00;     // green
                var freeze = 0xCBCBFE;     // light blue

                switch (type){
                    case 0: TYPE = "Physical", type_color = physical; break;
                    case 1: TYPE = "Fire", type_color = fire; break;
                    case 2: TYPE = "Ice", type_color = ice; break;
                    case 3: TYPE = "Thunder", type_color = thunder; break;
                    case 4: TYPE = "Poison", type_color = poison; break;
                    case 5: TYPE = "Freeze", type_color = freeze; break;
                }
                Large_Text.TXoutput(shop_left+8,shop_top+80,"Type: "+TYPE,type_color,0x000000);
                Large_Text.TXoutput(shop_left+8,shop_top+92,"AT "+BAT_min+"-"+BAT_max,type_color,0x000000);

                if (UI_weapClass==6)
                    Large_Text.TXoutput(shop_left+8,shop_top+104, Math.ceil(100/MP_price) + " round(s)",0xFFFFFF,0x000000); // if weapon is a gun, display "rounds" instead of "MP"
                else if (MP_price>0)
                    Large_Text.TXoutput(shop_left+8,shop_top+104,"MP "+MP_price,0xFFFFFF,0x000000); // only display MP if there is a MP cost
                if (UI_weapClass==5) { //preist
                    var buffEffect = "None";
                    switch (priest_buff) {
                        case 0: buffEffect = "+5 DEX"
                            break;
                        case 1: buffEffect = "+2 Regen"
                            break;
                        case 2: buffEffect = "+5 STR"
                            break;
                        case 3: buffEffect = "+10% Dodge"
                            break;
                        case 4: buffEffect = "+5 MAG"
                            break;
                    }
                    Large_Text.TXoutput(shop_left+8,shop_top+120,buffEffect,0xFF00FF,0x000000); // display fire, poison, and freeze durations
                }

                if (type==1 || type==4 || type==5){
                    if (type==1){
                        Large_Text.TXoutput(shop_left+8,shop_top+116,indent_space+"Burn "+ getVal(shop_item,type_parameter)/10+"%",type_color,0x000000); // display burn %
                        if (getVal(shop_item,Item_Res_Mode)!=0) // if there IS a residue mode, fire time = residue lifespan
                            type_para = getVal(shop_item,Res_Lifespan);
                        else type_para = getVal(shop_item,Proj_Lifespan); // if there is NOT a residue mode, fire time = projectile lifespan
                    }
                    Large_Text.TXoutput(shop_left+8,shop_top+116,"Time "+type_para/50+"s",type_color,0x000000); // display fire, poison, and freeze durations
                } else if (type==2){
                    Large_Text.TXoutput(shop_left+8,shop_top+116,"Slow "+type_para+"%",type_color,0x000000); // display slow %
                }
            }
            for (var i=0; i<9; i++){
                r = (3*Shop_Row+i) % Shop_Items[town_stage][Item_Num].length;
                if (Current_Stage!=0 || latest_unlock>r){
                    Display_Mode2 = 2;
                    dispItem(Item_Img,shop_left+120+i%3*28,shop_top+24+28*floor(i/3),24,24,24*getVal(Shop_Items[town_stage][Item_Num][r],Item_Ico_Big),0,24,24,getVal(Shop_Items[town_stage][Item_Num][r],Item_Color)); // icon of item in shop
                    Display_Mode2 = 0;

                    if (Item_Catalogue[Shop_Items[town_stage][Item_Num][r]][Item_LV])
                        Small_Text.TXoutput(shop_left+120+i%3*28+19,shop_top+24+28*floor(i/3)+17,""+Item_Catalogue[Shop_Items[town_stage][Item_Num][r]][Item_LV],0xFFFFFF,-1); // tier number next to item in shop
                }
            }
            drawRect(shop_left+120+Shop_Cell%3*28,shop_top+24+28*floor(Shop_Cell/3),24,24,0x990000);
            buy_price = getVal(shop_item,Item_Buy_Price);
            if (town_stage==2 && item_cell==1)
                buy_price *= 10;
            if (isMouseHovered(shop_left+176-56,shop_top+120-10,108,20)){
                if (shop_item!=0 && Team_Gold>=buy_price && Clicked){
                    antiCheatCheck();
                    PlaySoundInterrupt(snd_cashregister, false);
                    var second_slot = 0;
                    if (town_stage==0 || town_stage==2 && item_cell==0)
                        second_slot = Null_Slot;
                    Drops.DPadd(40,200,shop_item,0,second_slot);
                    Team_Gold -= buy_price;
                    antiCheatSet();
                }
                drawButton(shop_left+176-56,shop_top+120-10,108,20,0x990000);
            }
            textBox(Large_Text,shop_left+176,shop_top+120,"$"+buy_price+" Buy",0xFFFFFF,0x000000);
            drawRect(shop_left+176-56,shop_top+120-10,108,20,0x990000);
            if (town_stage > 0) {
                var arrow_color = 0xFFFFFF;

                if (isMouseHovered(shop_left+216-12,shop_top+36-12,24,24)){
                    if (Clicked)
                        Shop_Row = cycle(Shop_Row-1,0,floor(Shop_Items[town_stage][Item_Num].length/3)-1);
                    arrow_color = 0x990000; // up arrow when hoving over
                }

                drawRect(shop_left+216-12,shop_top+36-12,24,24,0xFFFFFF);
                drawButton(shop_left+216-1,shop_top+36-8,2,2,arrow_color);
                drawButton(shop_left+216-2,shop_top+36-6,4,2,arrow_color);
                drawButton(shop_left+216-3,shop_top+36-4,6,2,arrow_color);
                drawButton(shop_left+216-4,shop_top+36-2,8,2,arrow_color);
                drawButton(shop_left+216-5,shop_top+36+0,10,2,arrow_color);
                drawButton(shop_left+216-6,shop_top+36+2,12,2,arrow_color);
                drawButton(shop_left+216-7,shop_top+36+4,14,2,arrow_color);
                drawButton(shop_left+216-8,shop_top+36+6,16,2,arrow_color);
                arrow_color = 0xFFFFFF; // down arrow in shop

                if (isMouseHovered(shop_left+216-12,shop_top+92-12,24,24)){
                    if (Clicked)
                        Shop_Row = cycle(Shop_Row+1,0,floor(Shop_Items[town_stage][Item_Num].length/3)-1);
                    arrow_color = 0x990000; // down arrow when hoving over
                }

                drawRect(shop_left+216-12,shop_top+92-12,24,24,0xFFFFFF);
                drawButton(shop_left+216-8,shop_top+92-8,16,2,arrow_color);
                drawButton(shop_left+216-7,shop_top+92-6,14,2,arrow_color);
                drawButton(shop_left+216-6,shop_top+92-4,12,2,arrow_color);
                drawButton(shop_left+216-5,shop_top+92-2,10,2,arrow_color);
                drawButton(shop_left+216-4,shop_top+92+0,8,2,arrow_color);
                drawButton(shop_left+216-3,shop_top+92+2,6,2,arrow_color);
                drawButton(shop_left+216-2,shop_top+92+4,4,2,arrow_color);
                drawButton(shop_left+216-1,shop_top+92+6,2,2,arrow_color);
            }

        } else { // Forge screen
            Forge_Mode = 1;
            
            itemText(shop_left+8,shop_top+24,"Forge",-1,0x282828,-2);
            itemText(shop_left+8,shop_top+24,"Forge",0xFFFFFF,-1,-2);
            Large_Text.TXoutput(shop_left+8,shop_top+40,"Augment Item",-1,0x505050);
            
            if (!(Held_Item == 0 || Augment_Cost == 0)) {
                Large_Text.TXoutput(shop_left+64,shop_top+80,"Augment Cost",0xFFFFFF,0x000000);
                Large_Text.TXoutput(shop_left+96 - Augment_Cost.toString().length*4,shop_top+92,"$" + Augment_Cost + " Forge",0xFFFFFF,0x000000);
            } else {
                Large_Text.TXoutput(shop_left+8,shop_top+80,"Click on a weapon while",0xFFFFFF,0x000000);
                Large_Text.TXoutput(shop_left+8,shop_top+92,"holding the appropriate item",0xFFFFFF,0x000000);
                Large_Text.TXoutput(shop_left+8,shop_top+104,"to augment it.",0xFFFFFF,0x000000);
            }
            


            // Recipe checker
        }
        // Click to sell
        drawLine(shop_left+0,shop_top+136-1,shop_left+235,shop_top+136-1,0xFFFFFF);
        drawLine(shop_left+120,shop_top+136-1,shop_left+120,shop_top+160,0xFFFFFF);
        if (isMouseHovered(shop_left+0+1,shop_top+136,120,24) && Held_Item!=0){ // hovering over click/drag to sell with something held
            var sell_price = getVal(Held_Item,Item_Buy_Price)>>3;
            if (Clicked){                                                // sell held item
                antiCheatCheck();
                Drops.DPadd(40,200,1,sell_price,0);
                Held_Item = 0;
                Comp1_Inv[Inv_Last] = 0;
                Comp2_Inv[Inv_Last] = 0;
                antiCheatSet();
            }
            drawButton(shop_left+0+1,shop_top+136,119,24,0x990000);
            textBox(Large_Text,shop_left+60,shop_top+148,"$"+sell_price+" Sell",0xFFFFFF,0x000000);
        } else if (isMouseHovered(shop_left+0+1,shop_top+136,120,24) && Held_Item==0 && Click_To_Sell_Mode==0){ // hovering over click/drag to sell with nothing held
            if (Clicked)
                Click_To_Sell_Mode = 1;
            drawButton(shop_left+0+1,shop_top+136,119,24,0x990000);
            textBox(Large_Text,shop_left+60,shop_top+148,"Click to sell",0xFFFFFF,0x000000);
        } else if (isMouseHovered(shop_left+0+1,shop_top+136,120,24) && Held_Item==0 && Click_To_Sell_Mode==1){ // hovering over cancel
            if (Clicked) {
                Click_To_Sell_Mode = 0;
                Forge_Mode = 0;
            }
            drawButton(shop_left+0+1,shop_top+136,119,24,0x990000);
            textBox(Large_Text,shop_left+60,shop_top+148,"Cancel",0xFFFFFF,0x000000);
        } else if (Click_To_Sell_Mode==1){                                                // in click to sell mode
            textBox(Large_Text,shop_left+60,shop_top+148,"Cancel",0xFFFFFF,0x000000);
        } else {
            textBox(Large_Text,shop_left+60,shop_top+148,"Drag to sell",0xFFFFFF,0x000000);
        }
        if (isMouseHovered(shop_left+120+1,shop_top+136,114,24)){
            if (Clicked){
                Click_To_Sell_Mode = 0;
                Forge_Mode = 0;
                Sequence_Step = 52;
            }
            drawButton(shop_left+120+1,shop_top+136,114,24,0x990000);
        }
        textBox(Large_Text,shop_left+176,shop_top+148,"Exit",0xFFFFFF,0x000000);
        drawUI(1);
    } else if (Sequence_Step==54){                                                    // Sequence: open book
        drawStage(0);
        Sign_Touched_Mode = 0;
        Items_Per_Page = 10;
        book_left = 80;
        book_top = 28;
        Display_Mode = 1;
        var drop = 0;
        //var Book_Page;
        var book_enemy = 0;
        var entry_cost = 0;
        if (Current_Stage==70)
             drawButton(book_left-4,book_top-4,328,168,0xCC000000);
        else drawButton(book_left-4,book_top-4,328,168,0x80000000);
        Display_Mode = 0;
        drawRect(book_left+0,book_top+0,321,161,0xFFFFFF);
        drawLine(book_left+160,book_top+0,book_left+160,book_top+160,0xFFFFFF);
        var book_stage = "World Map "+(Item_Num<100? " " :"");
        book_stage += ""+floor(Item_Num/Items_Per_Page+1)+"/"+floor((Book_List.length-1)/Items_Per_Page+1);
        Large_Text.TXoutput(book_left+20,book_top+4,book_stage,-1,0x008000);

        if (isMouseHovered(book_left+8,book_top+16,144,12*Items_Per_Page)){
            a = floor((Mouse_Ypos-(book_top+16))/12);
            if (Clicked)
                Shop_Row = a;
            drawButton(book_left+8,book_top+16+12*a,144,12,0x990000);
        }

        for (var i=0; i<Items_Per_Page; i++){
            book_stage = Book_List[Item_Num+i];
            if (book_stage!=0){
                if ((Stage_Status[book_stage]&Beaten)>0)
                    Large_Text.TXoutput(book_left+8,book_top+16+12*i,Stage_Names[book_stage],0xFFFFFF,0x000000);
                else
                    Large_Text.TXoutput(book_left+8,book_top+16+12*i,"???",0xFFFFFF,0x000000);
            }
        }
        book_stage = Book_List[Item_Num+Shop_Row];
        if (book_stage!=0){
            if ((Stage_Status[book_stage]&Beaten)>0)
                Large_Text.TXoutput(book_left+8,book_top+16+12*Shop_Row,Stage_Names[book_stage],0xFF0000,0x000000);
            else
                Large_Text.TXoutput(book_left+8,book_top+16+12*Shop_Row,"???",0xFF0000,0x000000);
        }
        drawLine(book_left+0,book_top+140,book_left+160,book_top+140,0xFFFFFF);
        if (isMouseHovered(book_left+8,book_top+144-2,48,17)){
            if (Clicked)
                Item_Num = cycle(floor(Item_Num/Items_Per_Page)-1,0,floor((Book_List.length-1)/Items_Per_Page))*Items_Per_Page;
            drawButton(book_left+8,book_top+144-2,48,17,0x990000);
        }
        Large_Text.TXoutput(book_left+16,book_top+144+1,"Prev",0xFFFFFF,0x000000);
        if (isMouseHovered(book_left+56,book_top+144-2,48,17)){
            if (Clicked)
                Item_Num = cycle(floor(Item_Num/Items_Per_Page)+1,0,floor((Book_List.length-1)/Items_Per_Page))*Items_Per_Page;
            drawButton(book_left+56,book_top+144-2,48,17,0x990000);
        }
        Large_Text.TXoutput(book_left+64,book_top+144+1,"Next",0xFFFFFF,0x000000);
        if (isMouseHovered(book_left+104,book_top+144-2,48,17)){
            if (Clicked)
                Sequence_Step = 52;
            drawButton(book_left+104,book_top+144-2,48,17,0x990000);
        }
        Large_Text.TXoutput(book_left+112,book_top+144+1,"Exit",0xFFFFFF,0x000000);
        if (book_stage!=0){
            if ((Stage_Status[book_stage]&Booked) > 0){
                var nxt_stge_en = Book_Indexer[book_stage+1]-Book_Indexer[book_stage]; // rename Book_Indexer
                for (var e=nxt_stge_en-1; e>=0; e--)
                    nxt_stge_en -= EN_Info[Book_Indexer[book_stage]+e][En_Is_2nd_Att];
                g = book_left+80-16*nxt_stge_en;
                if (isMouseHovered(g+160,book_top+0,32*nxt_stge_en,52)){
                    b = (Mouse_Xpos-(g+160))>>5;
                    if (Clicked)
                        Book_Page = b;
                    drawButton(g+160+32*b+2,book_top+0+2,28,52,0x990000);
                }
                drawButton(g+160+32*Book_Page+2,book_top+48+2,28,4,0x990000);
                Book_Page = clamp(Book_Page,0,nxt_stge_en-1);
                for (var i=0; i<nxt_stge_en; i++)
                    drawItem(Terrain_Textures[Stage_Spawns[book_stage][Stage_Spawns[book_stage].length-1][0]],g+164+32*i,book_top+44,24,8,0,0,24,8);
                nxt_stge_en = Book_Indexer[book_stage+1]-Book_Indexer[book_stage];
                b = 0;
                for (var e=0; e<nxt_stge_en; e++,b++){
                    Enemies.ENdrawIcon(Book_Indexer[book_stage]+e,g+164+12+32*b,book_top+44-1,0);
                    e += EN_Info[Book_Indexer[book_stage]+e][En_Is_2nd_Att]; // skip over arrays that are just secondary attacks
                }
                book_enemy = Book_Indexer[book_stage]+Book_Page;
                Large_Text.TXoutput(book_left+164,book_top+56,"Lv   "+EN_Info[book_enemy][EN_Lvl],0xFFFFFF,0x000000);
                Large_Text.TXoutput(book_left+164,book_top+68,"LP   "+EN_Info[book_enemy][EN_LP],0xFFFFFF,0x000000);
                Large_Text.TXoutput(book_left+164,book_top+80,"Gold "+EN_Info[book_enemy][En_Gold],0xFFFFFF,0x000000);
                Large_Text.TXoutput(book_left+164,book_top+92,"EXP  "+EN_Info[book_enemy][EN_EXP],0xFFFFFF,0x000000);
                Large_Text.TXoutput(book_left+164,book_top+108,"Drop Item",0xFFFFFF,0x000000);

                b = 0;
                for (var d=0; d<6; d+=2){
                    drop = EN_Info[book_enemy][En_Drop1+d];
                    if (drop!=0){
                        Display_Mode2 = 2;
                        dispItem(Drop_Img,book_left+164,book_top+4*(30+3*b),12,12,12*getVal(drop,Item_Ico_Sm),0,12,12,getVal(drop,Item_Color));
                        Display_Mode2 = 0;
                        itemText(book_left+164,book_top+4*(30+3*b),"  "+Item_Catalogue[drop][Item_Name]+" "+(Item_Catalogue[drop][Item_LV]? Item_Catalogue[drop][Item_LV] :""),0xFFFFFF,0,-1),b++;
                    }
                }
                Large_Text.TXoutput(book_left+256,book_top+56,"Resist",0xFFFFFF,0x000000);
                if (EN_Info[book_enemy][Ph_Resist]>0)
                    Small_Text.TXoutput(book_left+256,book_top+68+2,"Ph          ",0x808080,0x000000);
                if (EN_Info[book_enemy][Fi_Resist]>0)
                    Small_Text.TXoutput(book_left+256,book_top+68+2,"  Fi        ",0xFF0000,0x000000);
                if (EN_Info[book_enemy][Ic_Resist]>0)
                    Small_Text.TXoutput(book_left+256,book_top+68+2,"    Ic      ",0x2020FF,0x000000);
                if (EN_Info[book_enemy][Th_Resist]>0)
                    Small_Text.TXoutput(book_left+256,book_top+68+2,"      Th    ",0xFFFF40,0x000000);
                if (EN_Info[book_enemy][Po_Resist]>0)
                    Small_Text.TXoutput(book_left+256,book_top+68+2,"        Po  ",0x00FF00,0x000000);
                if (EN_Info[book_enemy][Fr_Resist]>0)
                    Small_Text.TXoutput(book_left+256,book_top+68+2,"          Fr",0xC0C0FF,0x000000);
                Large_Text.TXoutput(book_left+256,book_top+80,"Weak",0xFFFFFF,0x000000);
                if (EN_Info[book_enemy][Ph_Resist]<0)
                    Small_Text.TXoutput(book_left+256,book_top+92+2,"Ph          ",0x808080,0x000000);
                if (EN_Info[book_enemy][Fi_Resist]<0)
                    Small_Text.TXoutput(book_left+256,book_top+92+2,"  Fi        ",0xFF0000,0x000000);
                if (EN_Info[book_enemy][Ic_Resist]<0)
                    Small_Text.TXoutput(book_left+256,book_top+92+2,"    Ic      ",0x2020FF,0x000000);
                if (EN_Info[book_enemy][Th_Resist]<0)
                    Small_Text.TXoutput(book_left+256,book_top+92+2,"      Th    ",0xFFFF40,0x000000);
                if (EN_Info[book_enemy][Po_Resist]<0)
                    Small_Text.TXoutput(book_left+256,book_top+92+2,"        Po  ",0x00FF00,0x000000);
                if (EN_Info[book_enemy][Fr_Resist]<0)
                    Small_Text.TXoutput(book_left+256,book_top+92+2,"          Fr",0xC0C0FF,0x000000);

            } else if ((Stage_Status[book_stage]&Beaten) > 0){ // book cost
                textBox(Large_Text,book_left+240,book_top+40,"Information is free!",0xFFFFFF,0x000000);
                entry_cost = 0*(Item_Num+Shop_Row+1);
                if (isMouseHoveredCenter(book_left+240,book_top+80,160,160)){
                    if (Team_Gold>=entry_cost && Clicked){
                        antiCheatCheck();
                        Stage_Status[book_stage] |= Booked;
                        Team_Gold -= entry_cost;
                        antiCheatSet();
                    }
                    fillColor(book_left+240,book_top+80,120,32,0x990000); // highlights button when mouse hovers over information fee
                }
                textBox(Large_Text,book_left+240,book_top+80,"Read",0xFFFFFF,0x000000);
            } else {
                textBox(Large_Text,book_left+240,book_top+40,"?????",0xFFFFFF,0x000000);
                textBox(Large_Text,book_left+240,book_top+80,"???",0xFFFFFF,0x000000);
            }
        }
        drawUI(1);
    } else if (Sequence_Step==55){                                                    // Sequence: open Forget (at forget tree)
        drawStage(0);
        Sign_Touched_Mode = 0;
        forget_left = 80;
        forget_top = 28;
        Display_Mode = 1;
        drawButton(forget_left-4,forget_top-4,328,168,0xCC000000);
        Display_Mode = 0;
        drawRect(forget_left+0,forget_top+0,321,161,0xFFFFFF);
        drawLine(forget_left+160,forget_top+0,forget_left+160,forget_top+160,0xFFFFFF);
        forget_left = 100;
        forget_top = 60;
        for (var s=0; s<Stickmen_Slots; s++){
            if (isMouseHovered(forget_left+32*s-4,forget_top+0-4,32,32)){
                drawButton(forget_left+32*s,forget_top+0,24,24,10027008);
                if (Clicked)
                    Char_Num = s;
            } else {
                drawButton(forget_left+32*s,forget_top+0,24,24,0x000000);
            }
            dispItem(Player_Img,forget_left+32*s,forget_top,24,24,24*getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID),0,24,24,0xFFFFFFFF);
            colorPortraitWeap(forget_left+32*s,forget_top,24*getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID),getVal(Item_Inv[Stickmen_Slots+s],Item_Color));
        }
        drawRect(forget_left+32*Char_Num-1,forget_top-1,26,26,0xFF0000);
        Large_Text.TXoutput(forget_left,forget_top-16,Class_Name_List[getVal(Item_Inv[Stickmen_Slots+Char_Num],Item_Class_ID)],0xFFFFFF,0x000000);
        forget_left = 100;
        forget_top = 74;
        Large_Text.TXoutput(forget_left,forget_top+16,"LP  "+LP_SP[Char_Num],0xFFFFFF,0x000000); // SP
        Large_Text.TXoutput(forget_left,forget_top+28,"STR "+STR_SP[Char_Num],0xFFFFFF,0x000000);
        Large_Text.TXoutput(forget_left,forget_top+40,"DEX "+DEX_SP[Char_Num],0xFFFFFF,0x000000);
        Large_Text.TXoutput(forget_left,forget_top+52,"MAG "+MAG_SP[Char_Num],0xFFFFFF,0x000000);
        Large_Text.TXoutput(forget_left,forget_top+68,"LV  "+LV[0],0xFFFFFF,0x000000);
        Large_Text.TXoutput(forget_left,forget_top+68,"        SP "+SP[Char_Num],0xFFFFFF,0x000000);
        forget_left = 80;
        forget_top = 28;
        drawLine(forget_left+0,forget_top+140,forget_left+160,forget_top+140,0xFFFFFF);
        if (isMouseHovered(forget_left+56,forget_top+144-2,48,17)){
            if (Clicked)
                Sequence_Step = 52;
            drawButton(forget_left+56,forget_top+144-2,48,17,0x990000);
        }
        Large_Text.TXoutput(forget_left+64,forget_top+144+1,"Exit",0xFFFFFF,0x000000);
        var forget_cost = 1000*(LP_SP[Char_Num]+STR_SP[Char_Num]+DEX_SP[Char_Num]+MAG_SP[Char_Num]);
        if (isMouseHoveredCenter(forget_left+240,forget_top+80,120,32) && forget_cost>0){
            if (Team_Gold>=forget_cost && Clicked){
                antiCheatCheck();
                SP[Char_Num] += LP_SP[Char_Num]+STR_SP[Char_Num]+DEX_SP[Char_Num]+MAG_SP[Char_Num];
                LP_SP[Char_Num] = 0;
                STR_SP[Char_Num] = 0;
                DEX_SP[Char_Num] = 0;
                MAG_SP[Char_Num] = 0;
                Team_Gold -= forget_cost;
                antiCheatSet();
            }
            fillColor(forget_left+240,forget_top+80,120,32,0x990000);
        }
        textBox(Large_Text,forget_left+240,forget_top+72,"Forget",0xFFFFFF,0x000000);
        textBox(Large_Text,forget_left+240,forget_top+88,"$"+forget_cost+" Buy",0xFFFFFF,0x000000);
        drawUI(1);
    } else if (Sequence_Step==59){                                                    // Sequence: fade out town screen
        drawStage(0);
        drawUI(0);
        screenTransition(floor(0xFF*Text_Fade/30));
        Text_Fade++;
        //Text_Fade = 30; // skip fade-out for testing
        if (Text_Fade==30){
            Text_Fade = Current_Screen = Sign_Touched_Mode = 0;
            Sequence_Step = 6;
            antiCheatCheck();
            Stage_Status[Current_Stage] |= Beaten;
            if (Dot_Locations[Current_Stage][3]>0)
                Stage_Status[Dot_Locations[Current_Stage][3]] |= Unlocked;
            if (Dot_Locations[Current_Stage][4]>0)
                Stage_Status[Dot_Locations[Current_Stage][4]] |= Unlocked;
            antiCheatSet();
            Save_Code3 = genSaveCode(0);
            Save_Code1 = 1;
        }
    }
}

window.fff = PvPscreens;
function PvPscreens(){ // original name: xf()
    var a,b,c;
    if (Sequence_Step==70){
        Current_Stage = 0;
        Current_Screen = 1;
        if (Terrain.TRset(Current_Stage)){
            Players.PLspawn(0,26,Terrain.TR_low_dry_surface[0]);
            Players.PLspawn(1,30,Terrain.TR_low_dry_surface[1]);
            Players.PLspawn(2,34,Terrain.TR_low_dry_surface[2]);
            Players.PLspawn(3,38,Terrain.TR_low_dry_surface[3]);
            Enemies.ENreset(1);
            Projectiles.PJ_index = 0;
            Indicators.IN_index = 0;
            Drops.DP_index = 0;
            Text_Fade = Sign_Touched_Mode = Target_Array_ID = En_Count_From_Max = Target_HP_Max = Target_HP_Current = Drops.DP_log = 0;
            Sequence_Step++;
        }
    } else if (Sequence_Step==71 || Sequence_Step==72 || Sequence_Step==73 || Sequence_Step==74){
        Terrain.TRdrawTerrain();
        Players.PLmain();
        Drops.DPmain();
        Indicators.INmain();
        Projectiles.PJmain();
        Drops.DPrenderDrops();
        Players.PLrenderPlayer();
        Projectiles.PJrenderProjectiles();
        Indicators.INoutput();
        drawUI(0);
        if (Sequence_Step==71){
            if (VS_Upload_Errors==0){
                if (Game_Language)
                     doVSModeText(VS_Player_Team_ID,"\u30b3\u30e1\u30f3\u30c8\u3092\u8a18\u5165\u3057\u3066\uff2f\uff2b\u3092\u62bc\u3057\u3066\u4e0b\u3055\u3044");
                else doVSModeText(VS_Player_Team_ID,"Enter comments and click OK.");
            } else if (Game_Language){
                if (VS_Upload_Errors==100)
                    doVSModeText(VS_Player_Team_ID,"\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f");
                else if (VS_Upload_Errors==1)
                    doVSModeText(VS_Player_Team_ID,"\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u304c\u5fc5\u8981\u3067\u3059");
                else if (VS_Upload_Errors==2)
                    doVSModeText(VS_Player_Team_ID,"1\u65e5\u306b1\u56de\u306e\u307f\u3067\u3059");
                else if (VS_Upload_Errors==3)
                    doVSModeText(VS_Player_Team_ID,"10\u4ef6\u4ee5\u4e0a\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u51fa\u6765\u307e\u305b\u3093");
                else
                    doVSModeText(VS_Player_Team_ID,"\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u51fa\u6765\u307e\u305b\u3093");
            } else if (VS_Upload_Errors==100){
                doVSModeText(VS_Player_Team_ID,"The upload has been completed.");
            } else if (VS_Upload_Errors==1){
                doVSModeText(VS_Player_Team_ID,"User registration is required.");
            } else if (VS_Upload_Errors==2){
                doVSModeText(VS_Player_Team_ID,"1 time in 1 day only.");
            } else if (VS_Upload_Errors==3){
                doVSModeText(VS_Player_Team_ID,"Cannot upload more than 10 posts.");
            } else {
                doVSModeText(VS_Player_Team_ID,"Cannot upload.");
            }
            Sequence_Step++;
        }
    } else if (Sequence_Step==72){
        fillColor(DIRE_Win_Center,100,300,100,0x808080);
        textBox(Large_Text,DIRE_Win_Center,70,"Upload",0xFFA0A0,0x000000);
        dispItemCentered(VS_Player_Team_ID,DIRE_Win_Center,90,VS_Player_Team_ID.IG_you,16,0,0,VS_Player_Team_ID.IG_you,16,0xFF000000);
        if (VS_Upload_Errors==0){
            b = wg;
            drawButton(136,108,240,16,0xFFFFFF);
            drawRect(135,107,242,18,0x000000);
            if (isMouseHovered(136,108,240,16) && (drawRect(135,107,242,18,0xFF0000),Released)){
                c = null;
                try {
                    c = prompt("Upload",b);
                } catch (d){}
                if (c!=null)
                    b = c;
            }
            doVSModeText(yg,b);
            dispItem(yg,137,108,238,16,0,0,238,16,0xFF000000);
            wg = b;
            b = isMouseHoveredCenter(DIRE_Win_Center,140,16,12);
            textBox(Large_Text,DIRE_Win_Center,140,"OK",b?0xFF0000:0xFFFFFF,0x000000);
            if (b && Released){
                if (wg.length<2){
                    if (Game_Language)
                         doVSModeText(VS_Player_Team_ID,"\u30b3\u30e1\u30f3\u30c8\u3092\uff12\u6587\u5b57\u4ee5\u4e0a\u8a18\u5165\u3057\u3066\u4e0b\u3055\u3044");
                    else doVSModeText(VS_Player_Team_ID,"The comment must be longer than 2 characters.");
                } else {
                    b = wg;
                    c = 0;
                    a = b.length;
                    for (var e = 0; e < a; e++){
                        var g = b.charCodeAt(e);
                        c = 0 <= g && 128 >= g || 65377 <= g && 65439 >= g ? c+1 : c+2
                    }
                    if (c>20){
                        if (Game_Language)
                             doVSModeText(VS_Player_Team_ID,"\u30b3\u30e1\u30f3\u30c8\u3092\uff11\uff10\u6587\u5b57\u4ee5\u4e0b\u3067\u8a18\u5165\u3057\u3066\u4e0b\u3055\u3044");
                        else doVSModeText(VS_Player_Team_ID,"The comment must be shorter than 10 characters.");
                        Sequence_Step++;
                    }
                }
            }
        }
    } else if (Sequence_Step==73){
        b = encodeURIComponent(wg);
        if (b.length==0){
            if (Game_Language)
                 doVSModeText(VS_Player_Team_ID,"\u30a8\u30e9\u30fc");
            else doVSModeText(VS_Player_Team_ID,"Error");
            Sequence_Step = 72;
        } else if (Item_Inv[Stickmen_Slots+0]==0 || Item_Inv[Stickmen_Slots+1]==0 || Item_Inv[Stickmen_Slots+2] || Item_Inv[Stickmen_Slots+3]==0){ // if any rangers are unequipped
            if (Game_Language)
                 doVSModeText(VS_Player_Team_ID,"\u6b66\u5668\u3092\u88c5\u5099\u3057\u3066\u4e0b\u3055\u3044");
            else doVSModeText(VS_Player_Team_ID,"Equip a weapon.");
            Sequence_Step = 72;
        } else {
            antiCheatCheck();
            Save_Code3 = genSaveCode(1);
            c = "/score/ranger_entry.php?a=";
            c += Game_ID;
            c += Ag+(Game_Language ? "0" : "1");
            c += Bg+b;
            c += Cg+Save_Code3;
            logCopyright(c);
            Dg(c);
            Sequence_Step++;
        }
    } else if (Sequence_Step==74 && Eg!=0){
        if (Fg[0]=="ok")
            VS_Upload_Errors = 100;
        else if (Fg[0]=="err1")
            VS_Upload_Errors = 1;
        else if (Fg[0]=="err2")
            VS_Upload_Errors = 2;
        else if (Fg[0]=="err3")
            VS_Upload_Errors = 3;
        else if (Fg[0]=="err4")
            VS_Upload_Errors = 4;
        else if (Fg[0]=="err5")
            VS_Upload_Errors = 5;
        else
            VS_Upload_Errors = 6;
        Sequence_Step = 71;
    } else if (Sequence_Step==60){
        if (Current_Stage = 0,Current_Screen = 1,Terrain.TRset(Current_Stage)){
            Players.PLspawn(0,10,Terrain.TR_low_dry_surface[0]);
            Players.PLspawn(1,11,Terrain.TR_low_dry_surface[1]);
            Players.PLspawn(2,12,Terrain.TR_low_dry_surface[2]);
            Players.PLspawn(3,13,Terrain.TR_low_dry_surface[3]);
            Players.PLspawn(4,(Win_Width>>3)-11,Terrain.TR_low_dry_surface[0]);
            Players.PLspawn(5,(Win_Width>>3)-12,Terrain.TR_low_dry_surface[1]);
            Players.PLspawn(6,(Win_Width>>3)-13,Terrain.TR_low_dry_surface[2]);
            Players.PLspawn(7,(Win_Width>>3)-14,Terrain.TR_low_dry_surface[3]);
            setRangersUI();
            antiCheatCheck();
            for (var s=0; s<Stickmen_Slots<<1; s++)
                LP_Current[s] = LP_Max[s];
            for (var s=0; s<Stickmen_Slots<<1; s++)
                MP_Bar[s] = 0;
            Team_Gold = 9999999;
            antiCheatSet();
            Enemies.ENreset(1);
            Projectiles.PJ_index = 0;
            Indicators.IN_index = 0;
            Drops.DP_index = 0;
            Text_Fade = Sign_Touched_Mode = Target_Array_ID = En_Count_From_Max = Target_HP_Max = Target_HP_Current = Drops.DP_log = 0;
            Sequence_Step++;
        }
    } else if (Sequence_Step==61 || Sequence_Step==62 || Sequence_Step==63 || Sequence_Step==64){
        Terrain.TRdrawTerrain();
        Sequence_Step==61 && (Players.PL_team_is_dead = 1);
        Players.PLmain();
        Indicators.INmain();
        Projectiles.PJmain();
        Players.PL_team_is_dead = 0;
        Players.PLrenderPlayer();
        Projectiles.PJrenderProjectiles();
        Indicators.INoutput();
        setRangersUI();
        if (Sequence_Step==61){
            Text_Fade = clamp(Text_Fade+1,0,30);
            a = floor(0xFF*Text_Fade/30);
            drawLine(0,110,floor(512*Text_Fade/30),110,0x808080);
            drawLine(512-floor(512*Text_Fade/30),143,512,143,0x808080);
            if (isMouseHoveredCenter(DIRE_Win_Center,127,Win_Width,32) && 30 == Text_Fade){
                if (Clicked){
                    Sequence_Step++;
                    Text_Fade = 0;
                }
                fillColor(DIRE_Win_Center,127,Win_Width,32,0x800000);
                largeMessage(Large_Text,DIRE_Win_Center,128,"FIGHT",0xFF,0xFF,0xFF,0xFF,0,0,0,0xFF,16,24);
            } else {
                largeMessage(Large_Text,DIRE_Win_Center,128,"READY",0xFF,0xFF,0xFF,a,0,0,0,a,16,24);
                Display_Mode = 1;
                b = 110;
                c = 120;
                doVSModeText(VS_Player_Team_ID,Player_Name);
                dispItemCentered(VS_Player_Team_ID,b,c+0-2,VS_Player_Team_ID.IG_you,16,0,0,VS_Player_Team_ID.IG_you,16,a << 24 | 0xFFFFFFFF);
                doVSModeText(VSMODECODE12,VS_Player_Team_Name);
                dispItemCentered(VSMODECODE12,b,c+16-2,VSMODECODE12.IG_you,16,0,0,VSMODECODE12.IG_you,16,a << 24 | 0xFFFFFFFF);
                b = 402;
                doVSModeText(VSMODECODE13,VS_Opponent_Name);
                dispItemCentered(VSMODECODE13,b,c+0-2,VSMODECODE13.IG_you,16,0,0,VSMODECODE13.IG_you,16,a << 24 | 0xFFFFFFFF);
                doVSModeText(VSMODECODE14,VS_Opponent_Team_Name);
                dispItemCentered(VSMODECODE14,b,c+16-2,VSMODECODE14.IG_you,16,0,0,VSMODECODE14.IG_you,16,a << 24 | 0xFFFFFFFF);
                Display_Mode = 0;
            }
        } else if (Sequence_Step==62){
            if (LP_Current[0]+LP_Current[1]+LP_Current[2]+LP_Current[3]==0){
                VSMODECODE8 = 2;
                Sequence_Step++;
            } else if (LP_Current[4]+LP_Current[5]+LP_Current[6]+LP_Current[7]==0){
                VSMODECODE8 = 1;
                Sequence_Step++;
            }
        }
        else if (Sequence_Step==63){
            if (VS_Upload_Errors==0){
                VS_Upload_Errors = 1;
                c = "/score/ranger_vs.php?a=";
                c += Game_ID;
                c += Ag+(Game_Language ? "0" : "1");
                c += Bg+VS_Player_Team_Text;
                c += Cg+VS_Opponent_Team_ID;
                if (Item_Inv[Stickmen_Slots+0]!=0 && Item_Inv[Stickmen_Slots+1]!=0 && Item_Inv[Stickmen_Slots+2]!=0 && Item_Inv[Stickmen_Slots+3]!=0)
                    c += Gg+vsUploadCode(VSMODECODE8);
                logCopyright(c);
                Dg(c);
            }
            Sequence_Step++;
        } else if (Sequence_Step==64){
            Text_Fade = clamp(Text_Fade+1,0,50);
            a = floor(0xFF*Text_Fade/50);
            if (isMouseHoveredCenter(DIRE_Win_Center,128,96,32) && Text_Fade==50){
                Clicked && (Sequence_Step = 60);
                fillColor(DIRE_Win_Center,128,96,32,0x800000);
            }
            drawRectCentered(DIRE_Win_Center,128,96,32,0|(a>>1)<<16);
            largeMessage(Large_Text,DIRE_Win_Center,129,"RETRY",0xFF,0xFF,0xFF,a,0,0,0,a,16,24);
            b = 60;
            c = 72;
            Display_Mode = 1;
            dispItem(VS_Player_Team_ID,b,c+0-2,VS_Player_Team_ID.IG_you,16,0,0,VS_Player_Team_ID.IG_you,16,a<<24|0xFFFFFFFF);
            Display_Mode = 0;
            largeMessage(Large_Text,b+60,c+40,VSMODECODE8==1? "WIN" :"LOSE",0xFF,0xFF,0xFF,a,VSMODECODE8=1? 0xFF :0,0,VSMODECODE8==1? 0 :0xFF,a,32,48);
            if (Eg!=0){
                if (Fg[0]=="ok"){
                    Large_Text.TXvsModeOutput(b,c+64,""+Fg[1]+" win "+Fg[2]+" lose",0xFF,0xFF,0xFF,a,0,0,0,a,8,12);
                    Large_Text.TXvsModeOutput(b,c+80,"Winning per "+Fg[3]+"%",0xFF,0xFF,0xFF,a,0,0,0,a,8,12);
                } else {
                    Large_Text.TXvsModeOutput(b,c+64," RANKING ERROR",0xFF,0xFF,0xFF,a,0,0,0,a,8,12);
                }
            }
            b = 332;
            Display_Mode = 1;
            dispItem(VSMODECODE13,b,c+0-2,VSMODECODE13.IG_you,16,0,0,VSMODECODE13.IG_you,16,a << 24 | 0xFFFFFFFF);
            Display_Mode = 0;
            largeMessage(Large_Text,b+60,c+40,VSMODECODE8==2? "WIN" :"LOSE",0xFF,0xFF,0xFF,a,VSMODECODE8==2? 0xFF :0,0,VSMODECODE8==2? 0 :0xFF,a,32,48);
            if (Eg!=0){
                if (Fg[0]=="ok"){
                    Large_Text.TXvsModeOutput(b,c+64,""+Fg[4]+" win "+Fg[5]+" lose",0xFF,0xFF,0xFF,a,0,0,0,a,8,12);
                    Large_Text.TXvsModeOutput(b,c+80,"Winning per "+Fg[6]+"%",0xFF,0xFF,0xFF,a,0,0,0,a,8,12);
                } else {
                    Large_Text.TXvsModeOutput(b,c+64," RANKING ERROR",0xFF,0xFF,0xFF,a,0,0,0,a,8,12);
                }
            }
        }
        //UI / HUD color
        drawButton(0,257,512,126,[0xCC9449,0x90A8B0,0x6E8038,0xA7BFC9,0x445599,0x00600A,0x6F582D,0x6F582D,0x996600][Stage_Spawns[Current_Stage][Current_Screen][0]]);
        Small_Text.TXvsModeOutput(10,374,"(C) 2008 ha55ii DAN-BALL.jp",0,0,0,0,0,0,0,128,5,7);
        largeMessage(Large_Text,DIRE_Win_Center,328,"VS",0xFF,0xFF,0xFF,0xFF,0,0,0,0xFF,16,24);
        b = 40;
        c = 268;
        dispItem(VS_Player_Team_ID,b,c+0-2,VS_Player_Team_ID.IG_you,16,0,0,VS_Player_Team_ID.IG_you,16,0xFF000000);
        Large_Text.TXoutput(b,c+16,"LV "+LV[0],0xFFFFFF,0x000000);
        Large_Text.TXoutput(b,c+16,"        FP "+FP[0],0xFFFFFF,0x000000);
        doVSModeText(VSMODECODE15,"\u300c "+VS_Player_Team_Name+" \u300d");
        dispItemCentered(VSMODECODE15,b+60,c+88,VSMODECODE15.IG_you,16,0,0,VSMODECODE15.IG_you,16,0xFF000000);
        b = 206;
        largeMessage(Large_Text,b,c+20+2,"Rank",0,0,0,0,0,0,0,128,8,12);
        largeMessage(Large_Text,b,c+60,""+Rank_List[Rank[0]],0,0,0,0,0,0,0,80,32,48);
        b = 352;
        dispItem(VSMODECODE13,b,c+0-2,VSMODECODE13.IG_you,16,0,0,VSMODECODE13.IG_you,16,0xFF000000);
        Large_Text.TXoutput(b,c+16,"LV "+LV[1],0xFFFFFF,0x000000);
        Large_Text.TXoutput(b,c+16,"        FP "+FP[1],0xFFFFFF,0x000000);
        doVSModeText(VSMODECODE16,"\u300c"+VS_Opponent_Team_Name+"\u300d");
        dispItemCentered(VSMODECODE16,b+60,c+88,VSMODECODE16.IG_you,16,0,0,VSMODECODE16.IG_you,16,0xFF000000);
        b = 306;
        largeMessage(Large_Text,b,c+20+2,"Rank",0,0,0,0,0,0,0,128,8,12);
        largeMessage(Large_Text,b,c+60,""+Rank_List[Rank[1]],0,0,0,0,0,0,0,80,32,48);
        b = 40;
        c = 316;
        for (s=0; s<Stickmen_Slots<<1; s++){
            if (s>=4)
                b = 224;
            drawButton(b+32*s,c-12,floor(24*LP_Current[s]/LP_Max[s]),4,0x800000); // player LP Bar display in vs mode
            e = maxOf(getVal(Item_Inv[Stickmen_Slots+s],Weap_MP_Price),1);
            g = getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID);
            if (g!=4 && g!=5 && g!=6)
                drawButton(b+32*s,c-6,floor(23*MP_Bar[s]/e)+1,2,0x000080); // player MP bar display in vs mode
            drawButton(b+32*s,c+0,24,24,0x000000);
            dispItem(Player_Img,b+32*s,c,24,24,24*getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID),0,24,24,0xFFFFFFFF);
            colorPortraitWeap(b+32*s,c,24*getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID),getVal(Item_Inv[Stickmen_Slots+s],Item_Color));
        }
    }
}

function menuCredits(){ // original name: Ff()
    drawButton(0,Win_Height-16,Win_Width,16,0x000000);
    textBox(Large_Text,DIRE_Win_Center,Win_Height-8,"Copyright (C) 2008 ha55ii DAN-BALL.jp",-1,0x663300);
}

window.fff = drawStage;
function drawStage(is_paused){ // original name: Tf()
    var pxl_color;
    Terrain.TRdrawTerrain();
    if (Current_Stage==0 && Current_Screen==1 || Current_Stage==20 && Current_Screen==1 || Current_Stage==47 && Current_Screen==1 || Current_Stage==77 && Current_Screen==1){
        dispItemCentered(Hut_Img,400,183,117,84,0,0,78,56,0xFFFFFFFF); // hut for Inn
        dispItemCentered(Hut_Img,40,170,156,112,0,0,78,56,0xFFFFFFFF); // hut for Shop
        textBox(Large_Text,400,168,"Inn",0xFFFFFF,0xD2953A); // white text at town type stages
        if (Current_Stage==0)
            textBox(Large_Text,40,152,"Shop/Forge",0xFFFFFF,0xD2953A);
        else if (Current_Stage==20)
            textBox(Large_Text,40,152," Compo Shop",0xFFFFFF,0xD2953A);
        else if (Current_Stage==47)
            textBox(Large_Text,40,152," Junk Shop",0xFFFFFF,0xD2953A);
        else if (Current_Stage==77)
            textBox(Large_Text,40,152," Compo Shop",0xFFFFFF,0xD2953A);
        textBox(Large_Text,40,184,"Book",0xFFFFFF,0xD2953A);
    }
    if (Current_Stage==70 && Current_Screen==1){
        dispItem(Forget_Tree_Img,0,-288,512,512,0,0,64,64,0xFFFFFFFF);
        if (Sequence_Step==52){
            textBox(Large_Text,DIRE_Win_Center,128,"Forget",0xFFFFFF,0x101814);
            textBox(Large_Text,DIRE_Win_Center,160,"Inn",0xFFFFFF,0x101814); // white text at forget tree
            textBox(Large_Text,DIRE_Win_Center,184,"Book",0xFFFFFF,0x101814);
        }
    }
    if (is_paused==0){
        Players.PLmain();
        Enemies.ENmain();
        Drops.DPmain();
        Indicators.INmain();
        Projectiles.PJmain();
    }

    // signs loading after all enemies killed (gauntlet style or no?)
    if (Terrain.TR_stage_num!=55 && Terrain.TR_stage_num!=89 && Current_Screen!=Stage_Spawns[Terrain.TR_stage_num].length-1 || Enemies.EN_index_current==0){
        var sign_height;
        if (Stage_Spawns[Current_Stage][Current_Screen][1]==7)
             sign_height = 8*Terrain.TR_low_dry_surface[Terrain.TR_width-1]-16;
        else sign_height = 8*Terrain.TR_high_surface[Terrain.TR_width-1]-16;
        drawItem(Sign_Img,Win_Width-32,sign_height,32,24,0,0,32,24);

        if (Current_Screen==Stage_Spawns[Terrain.TR_stage_num].length-1){
            if (Terrain.TR_stage_num==88)
                 textBox(Small_Text,Win_Width-16,sign_height+8,"END",0,-1);
            else textBox(Small_Text,Win_Width-16,sign_height+8,"MAP",0,-1);
        } else if (Current_Screen==Stage_Spawns[Terrain.TR_stage_num].length-2){
            textBox(Small_Text,Win_Width-16,sign_height+8,"BOSS",0,-1);
        } else {
            textBox(Small_Text,Win_Width-16,sign_height+8,"NEXT",0,-1);
        }
    }
    Enemies.ENrenderEnemy();
    Drops.DPrenderDrops();
    Players.PLrenderPlayer();
    Projectiles.PJrenderProjectiles();
    var stage_effect_canvas = Game_Canvas;
    var color,r,g,b;
    switch (Terrain.TR_stage_num){
        case 3:
        case 16:
        case 30:
        case 31:
        case 32:
        case 33:
        case 66:
        case 67:
        case 68:
        case 69: // mist grove mist effect
            Display_Mode = 1;
            Display_Mode2 = 3;
            Game_Canvas = Stage_Eff_Canvas.IG_pxl_color_index;
            var b = randomRange(1.7,3.69);
            b *= b*b*b;
            dispItemCentered(Projectiles_Img,randomRange(0,Win_Width),DIRE_Win_Center-b,DIRE_Win_Center,32,96,0,16,16,0x08FFFFFF);
            if (random(100)<3){
                for (var w=64*Win_Width; w<DIRE_Inv_Top*Win_Width; w++)
                    Game_Canvas[w] = 250*Game_Canvas[w]>>8;
            }
            Game_Canvas = stage_effect_canvas;
            for (var w=Win_Width*64; w<Win_Width*DIRE_Inv_Top; w++){
                color = Stage_Eff_Canvas.IG_pxl_color_index[w]&0xFF;
                stage_effect_canvas = Game_Canvas[w]>>16&0xFF;
                r = ((0xFF-stage_effect_canvas)*color>>8)+stage_effect_canvas;
                stage_effect_canvas = Game_Canvas[w]>>8&0xFF;
                g = ((0xFF-stage_effect_canvas)*color>>8)+stage_effect_canvas;
                stage_effect_canvas = Game_Canvas[w]&0xFF;
                b = ((0xFF-stage_effect_canvas)*color>>8)+stage_effect_canvas;
                Game_Canvas[w] = r<<16|g<<8|b;
            }
            Display_Mode = Display_Mode2 = 0;
            break;
        case 1:
        case 4:
        case 19:
        case 48:
        case 49:
        case 50:
        case 83:
        case 84: // cavern dark effect
            Game_Canvas = Stage_Eff_Canvas.IG_pxl_color_index;
            for (var a=0; a<Win_Width*DIRE_Inv_Top; a++)
                Game_Canvas[a] = 128;

            Display_Mode = Display_Mode2 = 3;

            for (var s=0; s<Stickmen_Slots; s++) // light around players
                dispItemCentered(Projectiles_Img,Players.PL_joint[s][0].x,Players.PL_joint[s][0].y,80,80,33,1,14,14,0xC0FFFFFF);

            for (var p=0; p<Projectiles.PJ_index; p++){ // light around projectiles
                if (Projectiles.PJ_class_ID[p]!=1)
                    dispItemCentered(Projectiles_Img,Projectiles.PJ_body[p].x,Projectiles.PJ_body[p].y,32,32,33,1,14,14,0x80FFFFFF);
            }
            for (var s=0; s<Stickmen_Slots; s++){
                if (Players.PL_class_ID[s]==8){ // if angel
                    for (var j=0; j<6; j++){
                        if (Players.PL_ring_thrown_status[s][j]!=0)
                            dispItemCentered(Projectiles_Img,Players.PL_joint[s][15+j].x,Players.PL_joint[s][15+j].y,32,32,33,1,14,14,0x80FFFFFF);
                    }
                }
            }
            for (var d=0; d<Drops.DP_index; d++) // light around drops
                dispItemCentered(Projectiles_Img,Drops.DP_position[d].x,Drops.DP_position[d].y-6,32,32,33,1,14,14,0xFFFFFFFF);

            if (Debug_Mode==1)
                 dispItemCentered(Projectiles_Img,Mouse_Xpos,Mouse_Ypos,600,600,33,1,14,14,0xC0FFFFFF); // bigger light around cursor
            else dispItemCentered(Projectiles_Img,Mouse_Xpos,Mouse_Ypos,80,80,33,1,14,14,0xC0FFFFFF); // light around cursor

            Game_Canvas = stage_effect_canvas;
            Display_Mode = 1;
            for (var x=0; x<Win_Width*DIRE_Inv_Top; x++){
                color = Stage_Eff_Canvas.IG_pxl_color_index[x];

                if (color==0xFF){
                    Game_Canvas[x] = 0x0F000000;
                    //Game_Canvas[x] = r<<4|g<<2|b;
                } else {
                    stage_effect_canvas = Game_Canvas[x]>>16&0xFF;
                    r = (-stage_effect_canvas*color>>8)+stage_effect_canvas;
                    stage_effect_canvas = Game_Canvas[x]>>8&0xFF;
                    g = (-stage_effect_canvas*color>>8)+stage_effect_canvas;
                    stage_effect_canvas = Game_Canvas[x]&0xFF;
                    b = (-stage_effect_canvas*color>>8)+stage_effect_canvas;
                    Game_Canvas[x] = r<<16|g<<8|b;
                }
            }
            Display_Mode = Display_Mode2 = 0;
            break;
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 40:
        case 41:
        case 43: // desert heat haze effect
            b = 1*Time_Desert_Haze&511;
            for (var h=0; h<DIRE_Inv_Top; h++){
                c = h*Win_Width;
                stage_effect_canvas = ~~(4*Xe[b][1]+0.5);
                for (var w=0; w<Win_Width; w++)
                    Stage_Eff_Canvas.IG_pxl_color_index[c+w] = Game_Canvas[c+clamp(w+stage_effect_canvas,0,Win_Width-1)];
                b = b+6&511;
            }
            for (var i=0; i<DIRE_Inv_Top*Win_Width; i++)
                Game_Canvas[i] = Stage_Eff_Canvas.IG_pxl_color_index[i];
            break;
        case 51:
        case 52:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61: // snowfield snow effect
            var snow_intensity = 1; // number of snowflakes created per frame
            if (Terrain.TR_stage_num==57)      snow_intensity = 2;
            else if (Terrain.TR_stage_num==58) snow_intensity = 2;
            else if (Terrain.TR_stage_num==59) snow_intensity = 2;
            else if (Terrain.TR_stage_num==60) snow_intensity = 3;
            else if (Terrain.TR_stage_num==61) snow_intensity = 3;

            for (var i=0; i<snow_intensity; i++)
                Stage_Eff_Canvas.IG_pxl_color_index[random(24576)] = 1;

            var tile_type,next_tile_type,current_pos,next_pos,next_xpos,next_ypos;
            for (var y=DIRE_Inv_Top-32-1; y>=0; y--){
                for (var x=Win_Width-1; x>=0; x--){
                    current_pos = y*Win_Width+x;
                    tile_type = Terrain.TR_tile_data[y>>3][x>>3];
                    if (Stage_Eff_Canvas.IG_pxl_color_index[current_pos]==1){
                        if (tile_type==-1 || tile_type==0 && (x&7)<3 && (y&7)<3 || tile_type==2 && (x&7)>4 && (y&7)<3){ // if air or top left or top right tile
                            if (random(100)>=50){
                                if (Terrain.TR_stage_num==57 || Terrain.TR_stage_num==58 || Terrain.TR_stage_num==61) // add wind for Snowfield 4, 5, 8
                                     next_xpos = x+floor(random(4))-2; // horizontal change: -2, -1, 0, or 1
                                else next_xpos = x+floor(random(3))-1; // horizontal change: -1, 0, or 1
                                next_xpos = cycle(next_xpos,0,Win_Width-1);
                                next_ypos = y+1;
                                next_pos = next_ypos*Win_Width+next_xpos;
                                if (Stage_Eff_Canvas.IG_pxl_color_index[next_pos]!=1){
                                    next_tile_type = Terrain.TR_tile_data[next_ypos>>3][next_xpos>>3];
                                    if (next_tile_type==-1 || next_tile_type==0 && (next_xpos&7)<3 && (next_ypos&7)<3 || next_tile_type==2 && (next_xpos&7)>4 && (next_ypos&7)<3){
                                        Stage_Eff_Canvas.IG_pxl_color_index[next_pos] = Stage_Eff_Canvas.IG_pxl_color_index[current_pos];
                                        Stage_Eff_Canvas.IG_pxl_color_index[current_pos] = 0;
                                    }
                                }
                            }
                        } else { // if tile cannot be occupied by snow
                            Stage_Eff_Canvas.IG_pxl_color_index[current_pos] = 0;
                        }
                    }
                }
            }
            Game_Canvas = Stage_Eff_Canvas.IG_pxl_color_index;
            for (var s=0; s<Stickmen_Slots; s++){
                if (LP_Current[s]!=0){
                    fillColor(Players.PL_joint[s][0].x,Players.PL_joint[s][0].y,3,3,0x000000);
                    fillColor(Players.PL_joint[s][9].x,Players.PL_joint[s][9].y,1,1,0x000000);
                    fillColor(Players.PL_joint[s][10].x,Players.PL_joint[s][10].y,1,1,0x000000);
                }
            }
            for (var p=0; p<Projectiles.PJ_index; p++){
                if (Projectiles.PJ_res_type[p]==1)
                    fillColor(Projectiles.PJ_body[p].x,Projectiles.PJ_body[p].y,3,3,0x000000);
            }
            Game_Canvas = stage_effect_canvas;
            for (var i=(DIRE_Inv_Top-32)*Win_Width-1; i>=0; i--){
                if (Stage_Eff_Canvas.IG_pxl_color_index[i]==1){
                    /*switch(i%12){ // rainbow snow
                        case 0: b = 0xFF0000; break;
                        case 1: b = 0xFF7700; break;
                        case 2: b = 0xFFFF00; break;
                        case 3: b = 0x77FF00; break;
                        case 4: b = 0x00FF00; break;
                        case 5: b = 0x00FF77; break;
                        case 6: b = 0x00FFFF; break;
                        case 7: b = 0x0077FF; break;
                        case 8: b = 0x0000FF; break;
                        case 9: b = 0x7700FF; break;
                        case 10: b = 0xFF00FF; break;
                        case 11: b = 0xFF0077; break;
                    }
                    Game_Canvas[i] = b;*/
                    Game_Canvas[i] = 0xE8F0F8;
                }
            }
    }

    Indicators.INoutput();
    if (!Prologue) {
        Display_Mode = 1;
        drawButton(4,4,8*(Stage_Names[Current_Stage].length+6)+8,20,0x80404040);
    }
    Display_Mode = 0;
    // top left stage info UI
    if (!Prologue) {
        if (Current_Stage==0 || Current_Stage==20 || Current_Stage==47 || Current_Stage==70 || Current_Stage==77)
            Large_Text.TXoutput(8,8,Stage_Names[Current_Stage],0xFFFFFF,0x000000);
        else if(Current_Screen+1==Stage_Spawns[Current_Stage].length) // if this is the final screen
            Large_Text.TXoutput(8,8,Stage_Names[Current_Stage]+": Boss",0xFFFFFF,0x000000);
        else
            Large_Text.TXoutput(8,8,Stage_Names[Current_Stage]+": "+(Current_Screen+1),0xFFFFFF,0x000000);
    }

    Display_Mode = 1;
    drawButton(Win_Width-56-4-8-80-4 + 96*Prologue,4,56,20,0x80404040);
    Display_Mode = 0;
    Large_Text.TXoutput(Win_Width-52-4-8-80-4 + 96*Prologue,8,"Option",0xFFFFFF,0x000000); // options button (white default text)

    if (!Prologue) {
        Display_Mode = 1;
        drawButton(Win_Width-80-4,4,80,20,0x80404040);
        Display_Mode = 0;
        Large_Text.TXoutput(Win_Width-4-70-6,8,"World Map",0xFFFFFF,0x000000); // Word Map button (white default text)
    }

    if (En_Count_From_Max>0){
        if (is_paused==0)
            En_Count_From_Max--;
        drawButton(196,10,120,12,0x303030); // HP bar max
        drawButton(196,10,floor(120*Target_HP_Current/Target_HP_Max),12,0x600000); // HP bar current
        if ((Stage_Status[Current_Stage]&Booked) > 0){
            textBox(Small_Text,DIRE_Win_Center,16,""+Target_HP_Current+"/"+Target_HP_Max,0xFFFFFF,0x000000);
            Enemies.ENdrawIcon(Target_Array_ID,206,33,1);
            Small_Text.TXoutput(216,25,"Drop",0xFFFFFF,0x000000);
            drop = 0;
            for (var i=0,j=0; i<6; i+=2,j++){
                drop = EN_Info[Target_Array_ID][En_Drop1+i];
                if (drop!=0){
                    Display_Mode2 = 2;
                    dispItem(Drop_Img,236+12*j,23,12,12,12*getVal(drop,Item_Ico_Sm),0,12,12,getVal(drop,Item_Color));
                    Display_Mode2 = 0;
                }
            }
            var enemy_xp = enemyDeath(Enemies,Target_Array_ID,1);
            Small_Text.TXoutput(276,25,"EXP "+enemy_xp,0xFFFFFF,0x000000);
        }
    }
}

window.fff = setRangersUI; // original name: Cf()
function setRangersUI(){
    antiCheatCheck();

    FP[0] = LV[0]; // FP (fighting power)
    FP[1] = LV[1];
    for (var s=0; s<Stickmen_Slots; s++)
        FP[0] += 2*getVal(Item_Inv[Stickmen_Slots+s],Item_LV)+getVal(Comp1_Inv[Stickmen_Slots+s],Item_LV)+getVal(Comp2_Inv[Stickmen_Slots+s],Item_LV);
    for (var s=Stickmen_Slots; s<Stickmen_Slots<<1; s++)
        FP[1] += 2*getVal(Item_Inv[Stickmen_Slots+s],Item_LV)+getVal(Comp1_Inv[Stickmen_Slots+s],Item_LV)+getVal(Comp2_Inv[Stickmen_Slots+s],Item_LV);

    if (floor((FP[0]-1)/20) < 9)
         Rank[0] = floor((FP[0]-1)/20);
    else Rank[0] = 9;
    if (floor((FP[1]-1)/20) < 9)
         Rank[1] = floor((FP[1]-1)/20);
    else Rank[1] = 9;
    if (Game_Mode!=1)
         var team_last = Stickmen_Slots;
    else var team_last = Stickmen_Slots<<1;

    for (var s=0; s<team_last; s++){
        STR[s] = STR_SP[s]; // get STR/DEX/MAG from invested SP
        DEX[s] = DEX_SP[s];
        MAG[s] = MAG_SP[s];
        if (checkEff(Stickmen_Slots+s,Stone_Red))
            STR[s] += getEff(Stickmen_Slots+s,Eff1); // add stones to STR/DEX/MAG
        if (checkEff(Stickmen_Slots+s,Stone_Green))
            DEX[s] += getEff(Stickmen_Slots+s,Eff1);
        if (checkEff(Stickmen_Slots+s,Stone_Blue))
            MAG[s] += getEff(Stickmen_Slots+s,Eff1);
        if (checkEff(Stickmen_Slots+s,Stone_Black)){
            STR[s] += getEff(Stickmen_Slots+s,Eff1),
            DEX[s] += getEff(Stickmen_Slots+s,Eff1),
            MAG[s] += getEff(Stickmen_Slots+s,Eff1);
        }
        // add stats from auras
        STR[s] += STR_Aura[s];
        DEX[s] += DEX_Aura[s];
        MAG[s] += MAG_Aura[s];
        var wATn = getVal(Item_Inv[Stickmen_Slots+s],Item_AT_Min);
        var wATx = getVal(Item_Inv[Stickmen_Slots+s],Item_AT_Max);
        var wAGIn = getVal(Item_Inv[Stickmen_Slots+s],Weap_AGI_Min);
        var wAGIx = getVal(Item_Inv[Stickmen_Slots+s],Weap_AGI_Max);
        var wRnge = getVal(Item_Inv[Stickmen_Slots+s],Weap_Range);
        switch (Team_List[s]){ // calculating values for UI
            case 1: // boxer
                AT_Min[s] = wATn+(STR[s]>>1);                          // Min AT
                AT_Max[s] = wATx+(STR[s]>>1);                          // Max AT
                if (wAGIn < maxOf(wAGIn-DEX[s],5))
                     Agi_Min[s] = wAGIn;                               // Min AGI
                else Agi_Min[s] = maxOf(wAGIn-DEX[s],5);
                if (wAGIx < maxOf(wAGIx-DEX[s],10))
                     Agi_Max[s] = wAGIx;                               // Max AGI
                else Agi_Max[s] = maxOf(wAGIx-DEX[s],10);
                Range[s] = wRnge;                                      // Range (from weapon)
                LP_Max[s] = 50+10*LP_SP[s]+4*STR[s]+3*DEX[s]+2*MAG[s]; // LP
                break;
            case 2: // gladiator
                AT_Max[s] = wATx+STR[s];                               // Max AT
                if (wATn+DEX[s] < AT_Max[s])
                     AT_Min[s] = wATn+DEX[s];                          // Min AT
                else AT_Min[s] = AT_Max[s];
                Agi_Min[s] = wAGIn;                                    // Min AGI
                Agi_Max[s] = wAGIx;                                    // Max AGI
                Range[s] = wRnge;                                      // Range (from weapon)
                if (checkEff(Stickmen_Slots+s,Card_Longsw))
                    Range[s] += getEff(Stickmen_Slots+s,Eff1);         // Range (from Long Sword's Card)
                if (checkEff(Stickmen_Slots+s,Card_Katana))
                    Range[s] += getEff(Stickmen_Slots+s,Eff2);         // Range (from Katana's Card)
                LP_Max[s] = 50+10*LP_SP[s]+4*STR[s]+4*DEX[s]+2*MAG[s]; // LP
                break;
            case 3: // sniper
                AT_Min[s] = wATn+(DEX[s]>>2);                          // Min AT
                AT_Max[s] = wATx+floor(DEX[s]/3);                      // Max AT
                Agi_Min[s] = wAGIn;                                    // Min AGI
                Agi_Max[s] = wAGIx;                                    // Max AGI
                Range[s] = wRnge+2*STR[s];                             // Range (from weapon and SP)
                if (checkEff(Stickmen_Slots+s,Card_Catapt))
                    Range[s] += getEff(Stickmen_Slots+s,Eff1);         // Range (from Catapult's Card)
                LP_Max[s] = 50+8*LP_SP[s]+2*STR[s]+3*DEX[s]+2*MAG[s];  // LP
                break;
            case 4: // magician
                AT_Min[s] = wATn+(MAG[s]>>2);                          // Min AT
                AT_Max[s] = wATx+floor(MAG[s]/3);                      // Max AT
                Agi_Min[s] = maxOf(wAGIn-DEX[s],50);                   // Min AGI
                Agi_Max[s] = maxOf(wAGIx-DEX[s],60);                   // Max AGI
                Range[s] = wRnge+2*STR[s];                             // Range (from weapon and SP)
                if (checkEff(Stickmen_Slots+s,Card_Catapt))
                    Range[s] += getEff(Stickmen_Slots+s,Eff1);         // Range (from Catapult's Card)
                LP_Max[s] = 50+8*LP_SP[s]+2*STR[s]+2*DEX[s]+2*MAG[s];  // LP
                break;
            case 5: // priest
                AT_Min[s] = wATn;                                      // Min AT
                AT_Max[s] = wATx;                                      // Max AT
                Agi_Min[s] = maxOf(wAGIn-DEX[s],50);                   // Min AGI
                Agi_Max[s] = maxOf(wAGIx-DEX[s],60);                   // Max AGI
                Range[s] = wRnge+2*STR[s];                             // Range (from weapon and SP)
                if (checkEff(Stickmen_Slots+s,Card_Catapt))
                    Range[s] += getEff(Stickmen_Slots+s,Eff1);         // Range (from Catapult's Card)
                LP_Max[s]=50+8*LP_SP[s]+2*STR[s]+2*DEX[s]+2*MAG[s];    // LP
                break;
            case 6: // gunner
                AT_Min[s] = wATn+floor(wATn*STR[s]/50);                // Min AT
                AT_Max[s] = wATx+floor(wATx*STR[s]/50);                // Max AT
                Agi_Min[s] = maxOf(floor(50*wAGIn/(DEX[s]+50)),5);     // Min AGI
                Agi_Max[s] = maxOf(floor(50*wAGIx/(DEX[s]+50)),10);    // Max AGI
                Range[s] = wRnge;                                      // Range (from weapon)
                if (checkEff(Stickmen_Slots+s,Card_Catapt))
                    Range[s] += getEff(Stickmen_Slots+s,Eff1);         // Range (from Catapult's Card)
                LP_Max[s] = 50+8*LP_SP[s]+2*STR[s]+2*DEX[s]+2*MAG[s];  // LP
                break;
            case 7: // whipper
                AT_Min[s] = wATn+(STR[s]>>1);                          // Min AT
                AT_Max[s] = wATx+(STR[s]>>1);                          // Max AT
                Agi_Min[s] = wAGIn;                                    // Min AGI
                Agi_Max[s] = wAGIx;                                    // Max AGI
                Range[s] = wRnge;                                      // Range (from weapon)
                LP_Max[s] = 50+10*LP_SP[s]+3*STR[s]+3*DEX[s]+2*MAG[s]; // LP
                break;
            case 8: // angel
                AT_Min[s] = wATn+(STR[s]>>2);                          // Min AT
                AT_Max[s] = wATx+floor(STR[s]/3);                      // Max AT
                Agi_Min[s] = wAGIn;                                    // Min AGI
                Agi_Max[s] = wAGIx;                                    // Max AGI
                Range[s] = wRnge;                                      // Range (from weapon)
                if (checkEff(Stickmen_Slots+s,Card_Catapt))
                    Range[s] += getEff(Stickmen_Slots+s,Eff1);         // Range (from Catapult's Card)
                LP_Max[s] = 50+10*LP_SP[s]+4*STR[s]+2*DEX[s]+2*MAG[s]; // LP
                break;
        }
        if (checkEff(Stickmen_Slots+s,Stone_White)) // LP boosting compos
            LP_Max[s] += getEff(Stickmen_Slots+s,Eff1);

        if (checkEff(Stickmen_Slots+s,Card_Zombie))
            LP_Max[s] += floor(getEff(Stickmen_Slots+s,Eff1)*LP_Max[s]/100);

        if (checkEff(Stickmen_Slots+s,Card_Rings))
            LP_Max[s] += getEff(Stickmen_Slots+s,Eff2);

        switch (getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID)){ // damage compos on UI
            case 1: // Boxer
            case 2: // Gladiator       // These classes use MP
            case 3: // Sniper          // Jewels only apply to bonus attacks, which are seperate from the initial physical attack
            case 7: // Whipper         // Red Crystals, Yellow Crystals, and Katana's Cards only apply to the initial physical attack
            case 8: // Angel
                if (checkEff(Stickmen_Slots+s,Crystal_Red)){
                    AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                    AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                }
                if (checkEff(Stickmen_Slots+s,Crystal_Yellow)){
                    AT_Min[s] += floor(getEff(Stickmen_Slots+s,Eff1)*AT_Min[s]/100);
                    AT_Max[s] += floor(getEff(Stickmen_Slots+s,Eff1)*AT_Max[s]/100);
                }
                if (checkEff(Stickmen_Slots+s,Card_Katana)){
                    AT_Min[s] += floor(getEff(Stickmen_Slots+s,Eff1)*AT_Min[s]/100);
                    AT_Max[s] += floor(getEff(Stickmen_Slots+s,Eff1)*AT_Max[s]/100);
                }
                break;
            case 4: // Magician         // Jewels also affect the initial attack for these classes
            case 5: // Priest
                if (checkEff(Stickmen_Slots+s,Jewel_Ruby)){
                    AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                    AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                }
                if (checkEff(Stickmen_Slots+s,Jewel_Sapphire)){
                    AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                    AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                }
                if (checkEff(Stickmen_Slots+s,Jewel_Topaz)){
                    AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                    AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                }
                if (checkEff(Stickmen_Slots+s,Jewel_Emerald)){
                    AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                    AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                }
                break;
            case 6: // Gunner                    // Crystals affect the initial attack of guns
                if (checkEff(Stickmen_Slots+s,Crystal_Red)){
                    AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                    AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                }
                if (checkEff(Stickmen_Slots+s,Crystal_Yellow)){
                    AT_Min[s] += floor(getEff(Stickmen_Slots+s,Eff1)*AT_Min[s]/100);
                    AT_Max[s] += floor(getEff(Stickmen_Slots+s,Eff1)*AT_Max[s]/100);
                }
                if (getVal(Item_Inv[Stickmen_Slots+s],Item_Res_Mode)==false){ // if the gun is elemental but has no bonus attack
                    if (checkEff(Stickmen_Slots+s,Jewel_Ruby)){               // the jewel also affects the initial attack
                        AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                        AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                    }
                    if (checkEff(Stickmen_Slots+s,Jewel_Sapphire)){
                        AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                        AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                    }
                    if (checkEff(Stickmen_Slots+s,Jewel_Topaz)){
                        AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                        AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                    }
                    if (checkEff(Stickmen_Slots+s,Jewel_Emerald)){
                        AT_Min[s] += getEff(Stickmen_Slots+s,Eff1);
                        AT_Max[s] += getEff(Stickmen_Slots+s,Eff2);
                    }
                }
        }
        if (checkEff(Stickmen_Slots+s,Card_Quicks)){
            var agi_reduction = getEff(Stickmen_Slots+s,Eff1);
            Agi_Min[s] -= floor(Agi_Min[s]*agi_reduction/100);
            Agi_Max[s] -= floor(Agi_Max[s]*agi_reduction/100);
        }
        AT_Min[s] += floor(AT_Min[s]*STR_Aura[s]/100); // Priest STR aura
        AT_Max[s] += floor(AT_Max[s]*STR_Aura[s]/100);

        if (Game_Mode==1){
            LP_Max[s] *= [1,5,5,5,5,3,4,5,5][Team_List[s]]; // LP boost for VS mode characters
            LP_Max[s] *= Rank[1]+1;
        }
        LP_Current[s] = clamp(LP_Current[s],0,LP_Max[s]);
    }
    for (var s=0; s<team_last; s++){
        STR_Aura[s] = 0;
        DEX_Aura[s] = 0;
        MAG_Aura[s] = 0;
        Dodge_Buff[s] = 0;
    }
    for (var s=0; s<team_last; s++){
        if (Team_List[s]==5 && getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID)==5 && LP_Current[s]!=0){
            var aura_Xpos = floor(Players.PL_joint[s][9].x+Players.PL_joint[s][10].x)>>1; // get center position of the priest's aura
            var aura_Ypos = floor(Players.PL_joint[s][9].y+Players.PL_joint[s][10].y)>>1;

            for (var j=team_last-4; j<team_last; j++){
                if (LP_Current[j]!=0){
                    var ranger_Xpos = floor(Players.PL_joint[j][9].x+Players.PL_joint[j][10].x)>>1; // get position of the character (that could receive the aura)
                    var ranger_Ypos = floor(Players.PL_joint[j][9].y+Players.PL_joint[j][10].y)>>1;
                    if (absVal(aura_Xpos-ranger_Xpos) < Range[s] && absVal(aura_Ypos-ranger_Ypos) < Range[s]){ // check to see if character is in range of the aura
                        if (Reloading[s]) {
                            switch (Status_Buff[s]) {
                                case 0: //DEX
                                    //STR_Aura[j] += 10;
                                    DEX_Aura[j] += 10;
                                    //MAG_Aura[j] += MAG[s];
                                    break;
                                case 1: //Heal
                                    if (LP_Current[j]!=0 && (MP_Bar[s]%5 < 1/50)) {
                                        LP_Current[j] = clamp(LP_Current[j]+2,0,LP_Max[j]);                         // increase LP
                                        Indicators.INadd(Players.PL_joint[j][0].x,Players.PL_joint[j][0].y,0,2,0x00FF00); // output LP increase
                                    }
                                    break;
                                case 2: //STR
                                    STR_Aura[j] += 5;
                                    //DEX_Aura[j] += 10;
                                    //MAG_Aura[j] += MAG[s];
                                    break;
                                case 3: //Dodge
                                    Dodge_Buff[j] += 5;
                                    //DEX_Aura[j] += 10;
                                    //MAG_Aura[j] += MAG[s];
                                    break;
                                case 4: //MAG
                                    //STR_Aura[j] += 10;
                                    //DEX_Aura[j] += 10;
                                    MAG_Aura[j]   += 5;
                                    break;
                            }
                            //Buff aura
                            if (Sequence_Step != 40 && Sequence_Step != 6 && Status_Buff[s] > 0){
                                Display_Mode = 2;
                                Display_Mode2 = 1;
                                color = maxOf(getVal(Item_Inv[Stickmen_Slots+s],Proj_Color),255); // aura color
                                dispItemCentered(Effect_Img,floor(Players.PL_joint[j][9].x+Players.PL_joint[j][10].x)>>1,floor(Players.PL_joint[j][9].y+Players.PL_joint[j][10].y)>>1,20,12,12,0,20,12,color);
                                Display_Mode = Display_Mode2 = 0;
                            }
                        }
                    }
                }
            }
        }
    }
    for (var s=0; s<team_last; s++){
        if (LP_Current[s]!=0 && checkEff(Stickmen_Slots+s,Card_Bersrk))
            Berserk_Aura[s] += getEff(Stickmen_Slots+s,Eff1); // Berserk Card
    }
    antiCheatSet();
}

function rangerSPupIndicators(ranger,stat){
    var ring_increase = 0;
    if (stat==1){ // effect of LP investment
        switch (Team_List[ranger]){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"LP+",0xFFFFFFFF); break;
        }
    } else if (stat==2){ // effect of STR investment
        switch (Team_List[ranger]){
            case 1:
            case 2:
            case 6:
            case 7:
            case 8: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"AT+",0xFFFF0000); break;
            case 3:
            case 4: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"RANGE+",0xFF00FFFF); break;
            case 5: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"AURA+",0xFFFF0000); break;
        }
    } else if (stat==3){ // effect of DEX investment
        switch (Team_List[ranger]){
            case 1:
            case 4:
            case 6: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"AGI-",0xFF00FF00); break;
            case 2:
            case 3: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"AT+",0xFFFF0000); break;
            case 5: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"AURA+",0xFF00FF00); break;
            case 7: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"BULLET+",0xFFFFFF00); break;
            case 8: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"RING+",0xFFFFFF00); break;

        }
    } else if (stat==4){ // effect of MAG investment
        switch (Team_List[ranger]){
            case 1:
            case 2:
            case 3:
            case 7:
            case 8: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"MP+"+1,0xFF6666FF); break;
            case 4: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"AT+",0xFFFF0000); break;
            case 5: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"RANGE+",0xFF00FFFF); break;
            case 6: Indicators.INadd(Players.PL_joint[Displayed_Object][0].x,Players.PL_joint[Displayed_Object][0].y,0,"COST-",0xFFFFFF00); break;
        }
    }
}
/* UI Modes
 0:
  fade in screen
  play normal & town screen
  fade out screen
  PvP
  game over
 1:
  paused game
  shop
  book
  forget tree
 2:
  world map
*/
// draw weapon stats, shop, and gui stuff
window.fff = drawUI;
function drawUI(UI_mode){ // original name: Jf()
    DIRE_Inv_Height = 128; // used to adjust tile drawing to fit above the inventory
    var column,row;
    if (Left_Click_Is_Up && Mouse_Ypos>=DIRE_Inv_Top)
        Mouse_Up = true;
    else if (Left_Click_Is_Up && Mouse_Ypos<DIRE_Inv_Top)
        Mouse_Up = false;
    drawButton(0,DIRE_Inv_Top+1,Win_Width,DIRE_Inv_Height-2,[0xCC9449,0x90A8B0,0x6E8038,0x747016,0x445599,0xCF8138,0xA7BFC9,0x607890,0x1D50AB,0x996600,0x667373,0x605550,0x605550][Stage_Spawns[Current_Stage][Current_Screen][0]]); // UI background
    Small_Text.TXvsModeOutput(10,Win_Height-10,"(C) 2008 ha55ii DAN-BALL.jp",0,0,0,0,0,0,0,128,5,7);
    var L = 10; // left margin
    var T = DIRE_Inv_Top+4;

    var xp_for_prev_LV = 4753000;
    var xp_for_next_LV = 9999999;
    if (LV[0] < 98){
        xp_for_prev_LV = 0;
        for (var l=1; l<LV[0]; l++)
            xp_for_prev_LV += 1000*l;
        xp_for_next_LV = xp_for_prev_LV+1000*l;
    }
    setRangersUI();
    if (UI_mode==2){
        antiCheatCheck();
        for (var s=0; s<Stickmen_Slots; s++){
            STR_Aura[s] = 0;
            DEX_Aura[s] = 0;
            MAG_Aura[s] = 0;
            //Dodge_Buff[s] = 0;
        }
        antiCheatSet();
    }
    if (Displayed_Object<Stickman_Count){ // if the displayed object is a ranger
        Large_Text.TXoutput(L,T+0,Class_Name_List[getVal(Item_Inv[Stickmen_Slots+Displayed_Object],Item_Class_ID)],0xFFFFFF,0x000000);
        Large_Text.TXoutput(L,T+16,"LP  "+LP_Current[Displayed_Object]+"/"+LP_Max[Displayed_Object],0xFFFFFF,0x000000);

        if (Players.PL_class_ID[Displayed_Object] != Class_Dead){
            var strColor = 0xFFFFFF;
            var dexColor = 0xFFFFFF;
            var magColor = 0xFFFFFF;
            if (STR_Aura[Displayed_Object] > 0)
                strColor = 0xFF8888;
            if (DEX_Aura[Displayed_Object] > 0)
                dexColor = 0x88FF88;
            if (MAG_Aura[Displayed_Object] > 0)
                magColor = 0x8888FF;
            Large_Text.TXoutput(L,T+28  ,"STR "+STR[Displayed_Object],strColor,0x000000);
            Large_Text.TXoutput(L,T+40  ,"DEX "+DEX[Displayed_Object],dexColor,0x000000);
            Large_Text.TXoutput(L,T+52  ,"MAG "+MAG[Displayed_Object],magColor,0x000000);
            Small_Text.TXoutput(L,T+28+2,"              AT ",-1,0x000000);
            Small_Text.TXoutput(L,T+40+2,"              AGI ",-1,0x000000);
            Small_Text.TXoutput(L,T+52+2,"              RANGE ",-1,0x000000);
            Small_Text.TXoutput(L,T+28+2,"                 "+AT_Min[Displayed_Object]+"-"+AT_Max[Displayed_Object],0,-1);
            Small_Text.TXoutput(L,T+40+2,"                  "+Agi_Min[Displayed_Object]+"-"+Agi_Max[Displayed_Object],0,-1);
            Small_Text.TXoutput(L,T+52+2,"                    "+Range[Displayed_Object],0,-1);
            
            /*
            if (Team_List[Displayed_Object]==5){        // extra info for priests
                Small_Text.TXoutput(L,T+64+2,"AURA          AURA",-1,0x000000);
                Small_Text.TXoutput(L,T+64+2,"     (AT)"+STR[Displayed_Object]+"%",0,-1);
                Small_Text.TXoutput(L,T+64+2,"                   (DF)"+DEX[Displayed_Object]/5,0,-1);
                
            } else*/ 
            if (Team_List[Displayed_Object]==7){ // extra info for whippers
                Small_Text.TXoutput(L,T+64+2,"              BULLET",-1,0x000000);
                Small_Text.TXoutput(L,T+64+2,"                     +"+DEX[Displayed_Object]/5,0,-1);
            } else if (Team_List[Displayed_Object]==8){ // extra info for angels
                var ring_count = 0;
                if (DEX[Displayed_Object]<10)
                    ring_count = 0+(DEX[Displayed_Object]-0)/10;
                else if (DEX[Displayed_Object]<30)
                    ring_count = 1+(DEX[Displayed_Object]-10)/20;
                else if (DEX[Displayed_Object]<60)
                    ring_count = 2+(DEX[Displayed_Object]-30)/30;
                else if (DEX[Displayed_Object]<100)
                    ring_count = 3+(DEX[Displayed_Object]-60)/40;
                else
                    ring_count = 4;
                Small_Text.TXoutput(L,T+64+2,"              RING",-1,0x000000);
                Small_Text.TXoutput(L,T+64+2,"                   +"+(""+ring_count).substring(0,5>(""+ring_count).length?(""+ring_count).length:5),0,-1);
            }
        }
        Large_Text.TXoutput(L,T+76,"LV  "+LV[0],0xFFFFFF,0x000000);
        Large_Text.TXoutput(L,T+76,"        SP "+SP[Displayed_Object],0xFFFFFF,0x000000);
        Large_Text.TXoutput(L,T+88,"EXP "+Team_EXP+"("+floor(100*(Team_EXP-xp_for_prev_LV)/(xp_for_next_LV-xp_for_prev_LV))+"%)",0xFFFFFF,0x000000);
        Large_Text.TXoutput(L,T+100,"$$$ "+Team_Gold,0xFFFFFF,0x000000);
        Small_Text.TXoutput(L+105,T+100+2,"FP "+FP[0],-1,0x000000);

        if (Players.PL_class_ID[Displayed_Object]==Class_Dead){
            var revive_data = "Revival $"+revival_cost;
            var revival_cost = maxOf(floor(Team_Gold/10),10*LV[0]);
            Large_Text.TXoutput(L,T+40,"Revival $"+revival_cost,0x808080,0x000000);
            if (isMouseHovered(L,T+40,8*revive_data.length,12)){
                Large_Text.TXoutput(L,T+40,"Revival $"+revival_cost,0xFFFF00,0x000000);
                if (Mouse_Up && revival_cost<=Team_Gold && Clicked && LP_Current[0]+LP_Current[1]+LP_Current[2]+LP_Current[3]!=0){
                    antiCheatCheck();
                    LP_Current[Displayed_Object] += LP_Max[Displayed_Object]>>2;
                    Team_Gold -= revival_cost;
                    Players.PLspawn(Displayed_Object,Players.PL_joint[Displayed_Object][0].x>>3,Players.PL_joint[Displayed_Object][0].y>>3);
                    antiCheatSet();
                }
            }
        } else if (SP[Displayed_Object] > 0){
            var lp_data = "LP  "+LP_Current[Displayed_Object]+"/"+LP_Max[Displayed_Object];
            var str_data = "STR "+STR[Displayed_Object];
            var dex_data = "DEX "+DEX[Displayed_Object];
            var mag_data = "MAG "+MAG[Displayed_Object];
            antiCheatCheck();
            if (isMouseHovered(L,T+16,8*lp_data.length+16,12)){
                if (Mouse_Up){
                    if (Clicked){
                        LP_SP[Displayed_Object]++;
                        SP[Displayed_Object]--;
                        rangerSPupIndicators(Displayed_Object,1);
                    }
                    Large_Text.TXoutput(L,T+16,"LP  "+LP_Current[Displayed_Object]+"/"+LP_Max[Displayed_Object],0xFF0000,0x000000);
                }
            } else if (isMouseHovered(L,T+28,8*str_data.length+16,12)){
                if (Mouse_Up){
                    if (Clicked){
                        STR_SP[Displayed_Object]++;
                        SP[Displayed_Object]--;
                        rangerSPupIndicators(Displayed_Object,2);
                    }
                    Large_Text.TXoutput(L,T+28,"STR "+STR[Displayed_Object],0xFF0000,0x000000);
                }
            } else if (isMouseHovered(L,T+40,8*dex_data.length+16,12)){
                if (Mouse_Up){
                    if (Clicked){
                        DEX_SP[Displayed_Object]++;
                        SP[Displayed_Object]--;
                        rangerSPupIndicators(Displayed_Object,3);
                    }
                    Large_Text.TXoutput(L,T+40,"DEX "+DEX[Displayed_Object],0xFF0000,0x000000);
                }
            } else if (isMouseHovered(L,T+52,8*mag_data.length+16,12)){
                if (Mouse_Up){
                    if (Clicked){
                        MAG_SP[Displayed_Object]++;
                        SP[Displayed_Object]--;
                        rangerSPupIndicators(Displayed_Object,4);
                    }
                    Large_Text.TXoutput(L,T+52,"MAG "+MAG[Displayed_Object],0xFF0000,0x000000);
                }
            }
            antiCheatSet();
            Large_Text.TXoutput(L+8*lp_data.length,T+16," +",0xFF0000,0x000000);
            Large_Text.TXoutput(L+8*str_data.length,T+28," +",0xFF0000,0x000000);
            Large_Text.TXoutput(L+8*dex_data.length,T+40," +",0xFF0000,0x000000);
            Large_Text.TXoutput(L+8*mag_data.length,T+52," +",0xFF0000,0x000000);
        }
    } else {
        var displayed_equipment = Item_Inv[Displayed_Object];
        if ((Stickmen_Slots<<1)<=Displayed_Object && Displayed_Object<Stickmen_Slots*3)
            displayed_equipment = Comp1_Inv[Stickmen_Slots+Displayed_Object-8];
        if (Stickmen_Slots*3<=Displayed_Object && Displayed_Object<Stickmen_Slots*4)
            displayed_equipment = Comp2_Inv[Stickmen_Slots+Displayed_Object-12];
        itemText(L,T+0,Item_Catalogue[displayed_equipment][Item_Name]+" "+(Item_Catalogue[displayed_equipment][Item_LV]? Item_Catalogue[displayed_equipment][Item_LV] :""),0xFFFFFF,0,-1);

        if (displayed_equipment!=0 && displayed_equipment!=Null_Slot){
            var item_class = getVal(displayed_equipment,Item_Class_ID);
            if (item_class==Class_Compo){
                Large_Text.TXoutput(L,T+16,"Compo Item",-1,0x000000);
                itemText(L,T+32,Item_Catalogue[displayed_equipment][Compo_Desc_1],0xFFFFFF,0,-1);
                itemText(L,T+44,Item_Catalogue[displayed_equipment][Compo_Desc_2],0xFFFFFF,0,-1);
            } else {
                Large_Text.TXoutput(L,T+16,"AT "+Item_Catalogue[displayed_equipment][Item_AT_Min]+"-"+Item_Catalogue[displayed_equipment][Item_AT_Max],0xFFFFFF,0x000000);
                Large_Text.TXoutput(L,T+28,"AGI "+Item_Catalogue[displayed_equipment][Weap_AGI_Min]+"-"+Item_Catalogue[displayed_equipment][Weap_AGI_Max],0xFFFFFF,0x000000);
                Large_Text.TXoutput(L,T+40,"Range "+Item_Catalogue[displayed_equipment][Weap_Range],0xFFFFFF,0x000000);

                var type = getVal(displayed_equipment,Item_Type);
                var type_param = getVal(displayed_equipment,Item_Type_Para);
                var priest_buff = getVal(displayed_equipment,Priest_Buff);
                var MP_price = maxOf(getVal(displayed_equipment,Weap_MP_Price),0);
                var bat_MIN = getVal(displayed_equipment,Item_BAT_Min);
                var bat_MAX = getVal(displayed_equipment,Item_BAT_Max);

                if (type==1 || type==2 || type==3 || type==4 || type==5){
                    if (checkEff(Displayed_Object,Jewel_Ruby)){
                        bat_MIN += getEff(Displayed_Object,Eff1);
                        bat_MAX += getEff(Displayed_Object,Eff2);
                    }
                    if (checkEff(Displayed_Object,Jewel_Sapphire)){
                        bat_MIN += getEff(Displayed_Object,Eff1);
                        bat_MAX += getEff(Displayed_Object,Eff2);
                    }
                    if (checkEff(Displayed_Object,Jewel_Topaz)){
                        bat_MIN += getEff(Displayed_Object,Eff1);
                        bat_MAX += getEff(Displayed_Object,Eff2);
                    }
                    if (checkEff(Displayed_Object,Jewel_Emerald)){
                        bat_MIN += getEff(Displayed_Object,Eff1);
                        bat_MAX += getEff(Displayed_Object,Eff2);
                    }
                    if (checkEff(Displayed_Object,Jewel_Aquamarine))
                        type_param += getEff(Displayed_Object,Eff1);
                    if (checkEff(Displayed_Object,Jewel_Peridot))
                        type_param += getEff(Displayed_Object,Eff1);
                    if (checkEff(Displayed_Object,Jewel_Diamond))
                        type_param += getEff(Displayed_Object,Eff1);
                }

                // color type (inventory UI)
                TYPE = "";
                indent_space = "        "; // indent between MP and type parameters
                type_color = 0xFFFFFF; // white
                physical = 0x959595;   // gray
                fire = 0xFF3333;       // red
                ice = 0x6C6CCB;        // blue
                thunder = 0xEDED00;    // yellow
                poison = 0x00FE00;     // green
                freeze = 0xCBCBFE;     // light blue

                switch (type){
                    case 0: TYPE = "Physical", type_color = physical; break;
                    case 1: TYPE = "Fire", type_color = fire; break;
                    case 2: TYPE = "Ice", type_color = ice; break;
                    case 3: TYPE = "Thunder", type_color = thunder; break;
                    case 4: TYPE = "Poison", type_color = poison; break;
                    case 5: TYPE = "Freeze", type_color = freeze; break;
                }
                Large_Text.TXoutput(L,T+56,"Type: "+TYPE,type_color,0x000000);
                Large_Text.TXoutput(L,T+68,"AT "+bat_MIN+"-"+bat_MAX,type_color,0x000000);

                if (item_class==6)
                    Large_Text.TXoutput(L,T+80,Math.ceil(maxOf(100/MP_price, 1)) + " round(s)",0xFFFFFF,0x000000,0x88FFAA,0x000000);
                else if (MP_price>0)
                    Large_Text.TXoutput(L,T+80,"MP "+MP_price,0x6666FF,0x000000);

                if (item_class==4)
                    indent_space=""; // if weapon is an orb, do not add space for MP (because there is no MP cost)
                
                if (item_class==5) { //preist
                    var buffEffect = "None";
                    switch (priest_buff) {
                        case 0: buffEffect = "+5 DEX"
                            break;
                        case 1: buffEffect = "+2 Regen"
                            break;
                        case 2: buffEffect = "+5 STR"
                            break;
                        case 3: buffEffect = "+10% Dodge"
                            break;
                        case 4: buffEffect = "+5 MAG"
                            break;
                    }
                    Large_Text.TXoutput(L,T+16,indent_space+buffEffect,0xFF00FF,0x000000); // display fire, poison, and freeze durations
                }

                if(type==1){
                    Large_Text.TXoutput(L,T+68,"        "+"Burn "+ getVal(displayed_equipment,Item_Type_Para)/10+"%",type_color,0x000000); // display burn %
                    if (getVal(displayed_equipment,Item_Res_Mode)!=0) // if there IS a residue mode, fire time = residue lifespan
                         fire_duration = getVal(displayed_equipment,Res_Lifespan);
                    else fire_duration = getVal(displayed_equipment,Proj_Lifespan); // if there is NOT a residue mode, fire time = projectile lifespan

                    Large_Text.TXoutput(L,T+80,indent_space+"Time "+fire_duration/50+"s",type_color,0x000000); // display fire duration
                } else if (type==2){
                    Large_Text.TXoutput(L,T+80,indent_space+"Slow "+type_param+"%",type_color,0x000000);    // display slow %
                } else if (type==4 || type==5){
                    Large_Text.TXoutput(L,T+80,indent_space+"Time "+type_param/50+"s",type_color,0x000000); // display poison and freeze durations
                }

                drawButton(L+0,T+96,12,12,0x000000);
                drawButton(L+75,T+96,12,12,0x000000);
                Display_Mode2 = 2;
                dispItem(Drop_Img,L+0,T+96,12,12,12*getVal(Comp1_Inv[Displayed_Object],Item_Ico_Sm),0,12,12,getVal(Comp1_Inv[Displayed_Object],Item_Color));
                dispItem(Drop_Img,L+75,T+96,12,12,12*getVal(Comp2_Inv[Displayed_Object],Item_Ico_Sm),0,12,12,getVal(Comp2_Inv[Displayed_Object],Item_Color));
                Display_Mode2 = 0;
                var mini_ui_compo1 = Item_Catalogue[Comp1_Inv[Displayed_Object]][Item_Name].substring(0,Item_Catalogue[Comp1_Inv[Displayed_Object]][Item_Name].length>8? 8 :Item_Catalogue[Comp1_Inv[Displayed_Object]][Item_Name].length)+" "+(Item_Catalogue[Comp1_Inv[Displayed_Object]][Item_LV]?Item_Catalogue[Comp1_Inv[Displayed_Object]][Item_LV]:"");
                Small_Text.TXoutput(L+16,T+96+3,mini_ui_compo1,-1,0x000000);
                var mini_ui_compo2 = Item_Catalogue[Comp2_Inv[Displayed_Object]][Item_Name].substring(0,Item_Catalogue[Comp2_Inv[Displayed_Object]][Item_Name].length>8? 8 :Item_Catalogue[Comp2_Inv[Displayed_Object]][Item_Name].length)+" "+(Item_Catalogue[Comp2_Inv[Displayed_Object]][Item_LV]?Item_Catalogue[Comp2_Inv[Displayed_Object]][Item_LV]:"");
                Small_Text.TXoutput(L+75+16,T+96+3,mini_ui_compo2,-1,0x000000);
            }
        }
    }
    L = 192;
    T = DIRE_Inv_Top+2+4+2+2+4+1; // margin + hp bar + margin + mp bar + margin + 1
    largeMessage(Small_Text,L-17,T+3+8,"PLAYER",0,0,0,0,0,0,0,128,5,7);
    largeMessage(Small_Text,L-17,T+31+8,"WEAPON",0,0,0,0,0,0,0,128,5,7);
    largeMessage(Small_Text,L-18,T+56+12,"COMPO",0,0,0,0,0,0,0,128,5,7);
    largeMessage(Small_Text,L-18,T+84+12,"COMPO",0,0,0,0,0,0,0,128,5,7);

    for (var s=0; s<Stickmen_Slots; s++){
        drawButton(L+32*s,T-12,24,4,0x000000);
        drawButton(L+32*s,T-12,floor(24*LP_Current[s]/LP_Max[s]),4,0x990000); // HP bar

        MP_price = maxOf(getVal(Item_Inv[Stickmen_Slots+s],Weap_MP_Price),1);
        var item_class = getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID);
        var bar_color = 0x000080;
        if (item_class != 0 && item_class!=4) // don't draw MP bar for non MP users
            if (item_class==5) {
                if (MP_Bar[s]/MP_price < 0.3) bar_color = 0x800000;
                else if (MP_Bar[s]/MP_price < 1) bar_color = 0x9000A0;
                else bar_color = 0xA844ff;
                if (!Reloading[s]) bar_color = 0x000080;
            }
            else if (item_class==6) {
                MP_price = 100;
                if (MP_Bar[s]/MP_price < 0.3) bar_color = 0x800000;
                else if (MP_Bar[s]/MP_price < 1) bar_color = 0x002288;
                else bar_color = 0x00ff88;
                if (Reloading[s]) bar_color = 0x444444;
            }
            //MP_price = Math.min(MP_price, 100);
            if (MP_Bar[s]/MP_price <= 1) drawButton(L+32*s,T-6,floor(23*MP_Bar[s]/MP_price)+1,2,bar_color); // MP bar
        if (item_class==2 && getVal(Item_Inv[Stickmen_Slots+s],41)>50){ // output energy bar for activated swords
            var r = 255-floor(Players.PL_gladr_resid_count[s]/getVal(Item_Inv[Stickmen_Slots+s],41)*255);
            var b = floor(Players.PL_gladr_resid_count[s]/getVal(Item_Inv[Stickmen_Slots+s],41)*255);
            var color = r<<16|b;
            drawButton(L+32*s,T-7,floor(23*Players.PL_gladr_resid_count[s]/getVal(Item_Inv[Stickmen_Slots+s],41))+1,1,color); // powered sword bar current
            drawButton(L+32*s,T-4,floor(23*Players.PL_gladr_resid_count[s]/getVal(Item_Inv[Stickmen_Slots+s],41))+1,1,color); // powered sword bar current
        }

        drawButton(L+32*s,T+0,24,24,0x000000);      // stickman slots
        drawButton(L+32*s,T+28,24,24,0x000000);     // weapon slots
        if (restrictSlots(s,0))
            drawButton(L+32*s,T+56,24,24,0x000000); // compo slot 1
        if (restrictSlots(s,1))
            drawButton(L+32*s,T+84,24,24,0x000000); // compo slot 2

        dispItem(Player_Img,L+32*s,T,24,24,24*getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID),0,24,24,0xFFFFFFFF);
        colorPortraitWeap(L+32*s,T,24*getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID),getVal(Item_Inv[Stickmen_Slots+s],Item_Color));
        Display_Mode2 = 2;
        dispItem(Item_Img,L+32*s,T+28,24,24,24*getVal(Item_Inv[Stickmen_Slots+s],Item_Ico_Big),0,24,24,getVal(Item_Inv[Stickmen_Slots+s],Item_Color));
        if (restrictSlots(s,0))
            dispItem(Item_Img,L+32*s,T+56,24,24,24*getVal(Comp1_Inv[Stickmen_Slots+s],Item_Ico_Big),0,24,24,getVal(Comp1_Inv[Stickmen_Slots+s],Item_Color));
        if (restrictSlots(s,1))
            dispItem(Item_Img,L+32*s,T+84,24,24,24*getVal(Comp2_Inv[Stickmen_Slots+s],Item_Ico_Big),0,24,24,getVal(Comp2_Inv[Stickmen_Slots+s],Item_Color));
        Display_Mode2 = 0;
        if (Item_Catalogue[Item_Inv[Stickmen_Slots+s]][Item_LV])
            Small_Text.TXoutput(L+32*s+19,T+28+17,""+Item_Catalogue[Item_Inv[Stickmen_Slots+s]][Item_LV],0xFFFFFF,-1);
        if (Item_Catalogue[Comp1_Inv[Stickmen_Slots+s]][Item_LV] && restrictSlots(s,0))
            Small_Text.TXoutput(L+32*s+19,T+56+17,""+Item_Catalogue[Comp1_Inv[Stickmen_Slots+s]][Item_LV],0xFFFFFF,-1);
        if (Item_Catalogue[Comp2_Inv[Stickmen_Slots+s]][Item_LV] && restrictSlots(s,1))
            Small_Text.TXoutput(L+32*s+19,T+84+17,""+Item_Catalogue[Comp2_Inv[Stickmen_Slots+s]][Item_LV],0xFFFFFF,-1);
    }
    drawRect(L+32*Selected_Player-1,T-1,26,26,0xFF0000);
    L = 344;
    T = DIRE_Inv_Top+2+4+2+2+4+1; // margin + hp bar + margin + mp bar + margin + 1
    Large_Text.TXoutput(L,T-12,"Inventory",0xFFFFFF,0x000000);
    for (var i=0; i<Inv_Last-Inv_First; i++){
        drawButton(L+i%6*28,T+28*floor(i/6),24,24,0x000000);
        Display_Mode2 = 2;
        dispItem(Item_Img,L+i%6*28,T+28*floor(i/6),24,24,24*getVal(Item_Inv[Inv_First+i],Item_Ico_Big),0,24,24,getVal(Item_Inv[Inv_First+i],Item_Color));
        Display_Mode2 = 0;
        if (Item_Catalogue[Item_Inv[Inv_First+i]][Item_LV])
            Small_Text.TXoutput(L+i%6*28+19,T+28*floor(i/6)+17,""+Item_Catalogue[Item_Inv[Inv_First+i]][Item_LV],0xFFFFFF,-1);
    }
    var mouse_slot_pos = -1;
    L = 192;
    T = DIRE_Inv_Top+2+4+2+2+4+1; // margin + hp bar + margin + mp bar + margin + 1
    if (isMouseHovered(L-4,T-4,128,112) && Mouse_Up){ // red background when hoving over stickmen, equipped weapon slots, and eqiupped compo slots
        column = (Mouse_Xpos-L+4)>>5;
        row = floor((Mouse_Ypos-T+4)/28);
        mouse_slot_pos = 4*row+column;
        backgroundFill(L+32*column,T+28*row,24,24,0x800000);
    }
    L = 344;
    T = DIRE_Inv_Top+2+4+2+2+4+1; // margin + hp bar + margin + mp bar + margin + 1
    if (isMouseHovered(L-4,T-4,168,112) && Mouse_Up){ // red background when hoving over inventory slots
        column = floor((Mouse_Xpos-L+4)/28);
        row = floor((Mouse_Ypos-T+4)/28);
        mouse_slot_pos = Inv_First+6*row+column;
        backgroundFill(L+28*column,T+28*row,24,24,0x800000);
    }
    // Augment Cost
    Augment_Cost = 0;
    if (Forge_Mode == 1 && Held_Item != 0 && Item_Inv[mouse_slot_pos] != 0) {
        for (var i = 0; i < Forge_Recipes.length; i++) {
            if (Item_Inv[mouse_slot_pos] == Forge_Recipes[i][0] && Held_Item == Forge_Recipes[i][1]) {
                Augment_Cost = (1.25)*(Item_Catalogue[Item_Inv[mouse_slot_pos]][2] + Item_Catalogue[Held_Item][2]);
                break;
            }
        }
    }
    antiCheatCheck();

    // Inventory moving
    if (0<=mouse_slot_pos && mouse_slot_pos<Stickmen_Slots && Held_Item==0 && Clicked){
        Selected_Player = mouse_slot_pos;
    } else if (Stickmen_Slots<=mouse_slot_pos && mouse_slot_pos<Stickmen_Slots<<1 && Clicked){
        if (Forge_Mode == 1 &&  Item_Inv[mouse_slot_pos]!=0 && Held_Item != 0) { // forging
            for (var i = 0; i < Forge_Recipes.length; i++) {
                if (Team_Gold>=Augment_Cost && Item_Inv[mouse_slot_pos] == Forge_Recipes[i][0] && Held_Item == Forge_Recipes[i][1]) {
                    PlaySoundInterrupt(snd_levelup, false);
                    Team_Gold -= Augment_Cost;
                    Item_Inv[mouse_slot_pos] = Forge_Recipes[i][2];
                    Held_Item = 0;
                    break;
                } else if (i == Forge_Recipes.length - 1) {
                    PlaySoundSFX(snd_casherror, false);
                }
            }
        } else if ((Held_Item==0 || Team_List[mouse_slot_pos-4]==getVal(Held_Item,Item_Class_ID)) && restrictSlots(mouse_slot_pos-4,0)){
            var proxy = Item_Inv[mouse_slot_pos];
            Item_Inv[mouse_slot_pos] = Held_Item;
            Held_Item = proxy;
              //Team_List[item_pos] = held_item_class_ID; //Change classes but it doesn't work really
            proxy = Comp1_Inv[mouse_slot_pos];
            Comp1_Inv[mouse_slot_pos] = Comp1_Inv[Inv_Last];
            Comp1_Inv[Inv_Last] = proxy;
            proxy = Comp2_Inv[mouse_slot_pos];
            Comp2_Inv[mouse_slot_pos] = Comp2_Inv[Inv_Last];
            Comp2_Inv[Inv_Last] = proxy;
            MP_Bar[mouse_slot_pos-4] = 0;
            Players.PL_gladr_resid_count[mouse_slot_pos-4] = 0;
            PlaySoundSFX(snd_weapon, false);
        }
    } else if ((Stickmen_Slots<<1)<=mouse_slot_pos && mouse_slot_pos<Stickmen_Slots*3 && Clicked){ // compo row 1
        if (getVal(Held_Item,Item_Class_ID)==Class_Compo && restrictSlots(mouse_slot_pos-8,0)){
            Comp1_Inv[Stickmen_Slots+mouse_slot_pos-(Stickmen_Slots<<1)] = Held_Item;
            Held_Item = 0;
            Comp1_Inv[Inv_Last] = 0;
            Comp2_Inv[Inv_Last] = 0;
            MP_Bar[mouse_slot_pos-(Stickmen_Slots<<1)] = 0;
            PlaySoundSFX(snd_compose, false);
        }
    } else if (Stickmen_Slots*3<=mouse_slot_pos && mouse_slot_pos<Stickmen_Slots*4 && Clicked){ // compo row 2
        if (getVal(Held_Item,Item_Class_ID)==Class_Compo && restrictSlots(mouse_slot_pos-12,1)){
            Comp2_Inv[Stickmen_Slots+mouse_slot_pos-Stickmen_Slots*3] = Held_Item;
            Held_Item = 0;
            Comp1_Inv[Inv_Last] = 0;
            Comp2_Inv[Inv_Last] = 0;
            MP_Bar[mouse_slot_pos-Stickmen_Slots*3] = 0;
            PlaySoundSFX(snd_compose, false);
        }
    } else if (Inv_First<=mouse_slot_pos && mouse_slot_pos<Inv_Last && Clicked){ // inventory
        if (Click_To_Sell_Mode==1 && Item_Inv[mouse_slot_pos]!=0){
            var sold_item = getVal(Item_Inv[mouse_slot_pos],Item_Buy_Price)>>3;
            if (Clicked){
                Drops.DPadd(40,200,1,sold_item,0);
                Item_Inv[mouse_slot_pos] = 0;
                Comp1_Inv[mouse_slot_pos] = 0;
                Comp2_Inv[mouse_slot_pos] = 0;
                PlaySoundSFX(snd_cashregister, false);
            }
        } else if (Forge_Mode == 1 &&  Item_Inv[mouse_slot_pos]!=0 && Held_Item != 0) { // Forge Mode
            for (var i = 0; i < Forge_Recipes.length; i++) {
                if (Team_Gold>=Augment_Cost && Item_Inv[mouse_slot_pos] == Forge_Recipes[i][0] && Held_Item == Forge_Recipes[i][1]) {
                    PlaySoundInterrupt(snd_levelup, false);
                    Team_Gold -= Augment_Cost;
                    Item_Inv[mouse_slot_pos] = Forge_Recipes[i][2];
                    Held_Item = 0;
                    break;
                } else if (i == Forge_Recipes.length - 1) {
                    PlaySoundSFX(snd_casherror, false);
                }
            }
        } else {
            UI_mode = Item_Inv[mouse_slot_pos];
            Item_Inv[mouse_slot_pos] = Held_Item;
            Held_Item = UI_mode;
            UI_mode = Comp1_Inv[mouse_slot_pos];
            Comp1_Inv[mouse_slot_pos] = Comp1_Inv[Inv_Last];
            Comp1_Inv[Inv_Last] = UI_mode;
            UI_mode = Comp2_Inv[mouse_slot_pos];
            Comp2_Inv[mouse_slot_pos] = Comp2_Inv[Inv_Last];
            Comp2_Inv[Inv_Last] = UI_mode;
            PlaySoundSFX(snd_click3, false);
        }
    } else if (mouse_slot_pos==-1 && Held_Item!=0 && Clicked && Mouse_Ypos<DIRE_Inv_Top && UI_mode==0){ // drop item out of inventory
        Drops.DPadd(Players.PL_joint[Selected_Player][0].x,Players.PL_joint[Selected_Player][0].y,Held_Item,Comp1_Inv[Inv_Last],Comp2_Inv[Inv_Last]);
        Held_Item = 0;
        Comp1_Inv[Inv_Last] = 0;
        Comp2_Inv[Inv_Last] = 0;
    }
    antiCheatSet();
    if (mouse_slot_pos==-1)
         Displayed_Object = Selected_Player;
    else Displayed_Object = mouse_slot_pos;
    if (Held_Item!=0){
        Display_Mode2 = 2;
        dispItemCentered(Item_Img,Mouse_Xpos,Mouse_Ypos,24,24,24*getVal(Held_Item,Item_Ico_Big),0,24,24,getVal(Held_Item,Item_Color));
        Display_Mode2 = 0;
    }
    if (Click_To_Sell_Mode==1){
        column = clamp(Mouse_Xpos,56,Win_Width-56);
        row = clamp(Mouse_Ypos-8,10,Win_Height-10);
        if (Inv_First<=mouse_slot_pos && mouse_slot_pos<Inv_Last){
            var sell_price = getVal(Item_Inv[mouse_slot_pos],Item_Buy_Price)>>3;
            textBox(Large_Text,column,row,"$"+sell_price+" Sell",0xFFFFFF,0x000000);
        } else {
            textBox(Large_Text,column,row,"Click to sell",0xFFFFFF,0x000000);
        }
    }
}

// hides slots
function restrictSlots(item_pos,compo_slot){ // original name: Ng()
    var held_item_eff_ID = getVal(Held_Item,Eff_ID);
    var held_item_class_ID = getVal(Held_Item,Item_Class_ID);
    var weapon = Stickmen_Slots+item_pos;
    if (1<=held_item_class_ID && held_item_class_ID<=8 && held_item_class_ID!=Team_List[item_pos])
        return false; // if item is a weapon && item doesn't fit character's class

    if (Held_Item==0 || held_item_class_ID!=Class_Compo)
        return true;  // if no item is held || if item held is not a compo

    if (Item_Inv[weapon]==0 || (compo_slot==0 && Comp1_Inv[weapon]==Null_Slot) || (compo_slot==1 && Comp2_Inv[weapon]==Null_Slot))
        return false; // if no weapon is equipped || if compo slot of weapon is null (store-bought weapons)

    if ((compo_slot==0 && held_item_eff_ID==getVal(Comp2_Inv[weapon],Eff_ID)) || (compo_slot==1 && held_item_eff_ID==getVal(Comp1_Inv[weapon],Eff_ID)))
        return false; // if weapon already has held compo
    else              // else check for restrictions
        return compRestrCheck(held_item_eff_ID,getVal(Item_Inv[weapon],Item_Class_ID),getVal(Item_Inv[weapon],Item_Type),getVal(Item_Inv[weapon],Item_Bullet));
}

// weapon and class restrictions on compos
function compRestrCheck(cp_eff_ID,class_ID,weap_type,weap_bullet){ // compRestrCheck() original name: Oe()
    if (cp_eff_ID==Stone_White || cp_eff_ID==Stone_Red || cp_eff_ID==Stone_Green || cp_eff_ID==Stone_Blue || cp_eff_ID==Stone_Black) // White, Red, Green, Blue, or Black Stone
        return true;                                                                                                                 // For all weapons and classes

    if (cp_eff_ID==Crystal_Red || cp_eff_ID == Crystal_Yellow){                                     // Red or Yellow Crystal
        if (class_ID==1 || class_ID==2 || class_ID==3 || class_ID==6 || class_ID==7 || class_ID==8) // Only for Boxer (1), Gladiator (2), Sniper (3), Gunner (6), Whipper (7), and Angel (8)
            return true;
    }
    if (cp_eff_ID==Crystal_Silver || cp_eff_ID==Crystal_Purple || cp_eff_ID==Crystal_Black) // Silver, Purple, or Black Crystal
        return true;                                                                        // For all weapons and classes

    if (cp_eff_ID==Jewel_Ruby || cp_eff_ID==Jewel_Garnet){ // Ruby or Garnet
        if (weap_type==1)                                  // Only for fire (type 1) weapons
            return true;
    }
    if (cp_eff_ID==Jewel_Sapphire || cp_eff_ID==Jewel_Aquamarine){ // Sapphire or Aquamarine
        if (weap_type==2)                                          // Only for ice (type 2) weapons
            return true;
    }
    if (cp_eff_ID==Jewel_Topaz){ // Topaz
        if (weap_type==3)        // Only for thunder (type 3) weapons
            return true;
    }
    if (cp_eff_ID==Jewel_Emerald || cp_eff_ID==Jewel_Peridot){ // Emerald or Peridot
        if (weap_type==4)                                      // Only for poison (type 4) weapons
            return true;
    }
    if (cp_eff_ID==Jewel_Diamond){ // Diamond
        if (weap_type==5)          // Only for freeze (type 5) weapons
            return true;
    }
    if (cp_eff_ID==Card_Quicks) // Quick's Card
        return true;            // For all weapons and classes

    if (cp_eff_ID==Card_Longsw){ // Long Sword's Card
        if (class_ID==2)         // Only works for Gladiator (2)
            return true;
    }
    if (cp_eff_ID==Card_Catapt){                                                     // Catapult's Card
        if (class_ID==3 || class_ID==4 || class_ID==5 || class_ID==6 || class_ID==8) // Only works for Sniper (3), Magician (4), Priest (5), Gunner (6), and Angel (8)
            return true;
    }
    if (cp_eff_ID==Card_Catapt){                       // Pierce's Card
        if (class_ID==3 || class_ID==4 || class_ID==6) // Only works for Sniper (3), Magician (4), and Gunner (6)
            return true;
    }
    if (cp_eff_ID==Card_Guides){                       // Guide's Card
        if (class_ID==3 || class_ID==4 || class_ID==6) // Only works for Sniper (3), Magician (4), and Gunner (6)
            return true;
    }
    if (cp_eff_ID==Card_Bullet){ // Bullet's Card
        if (weap_bullet>=2)      // Only works if weapon has 2 or more bullets
            return true;
    }
    if (cp_eff_ID==Card_Explsn){                                      // Explosion's Card
        if (class_ID==1 || class_ID==3 || class_ID==6 || class_ID==8) // Only for Boxer (1), Sniper (3), Gunner (6), and Angel (8)
            return true;
    }
    if (cp_eff_ID==Card_Bersrk){                       // Berserk Card
        if (class_ID==1 || class_ID==2 || class_ID==7) // Only for Boxer (1), Gladiator (2), and Whipper (7)
            return true;
    }
    if (cp_eff_ID==Card_Critcl){                                                                    // Critical's Card
        if (class_ID==1 || class_ID==2 || class_ID==3 || class_ID==6 || class_ID==7 || class_ID==8) // Only for Boxer (1), Gladiator (2), Sniper (3), Gunner (6), Whipper (7), and Angel (8)
            return true;
    }
    if (cp_eff_ID==Card_Big){           // Big Card
        if (class_ID==1 || class_ID==7) // Only for Boxer (1) and Whipper (7)
            return true;
    }
    if (cp_eff_ID==Card_Knockb){                                                     // Knockback's Card
        if (class_ID==1 || class_ID==3 || class_ID==4 || class_ID==6 || class_ID==7) // Only for Boxer (1), Sniper (3), Magician (4), Gunner (6), and Whipper (7)
            return true;
    }
    if (cp_eff_ID==Card_Reflct){                                                     // Reflection Card
        if (class_ID==3 || class_ID==4 || class_ID==6 || class_ID==7 || class_ID==8) // Only for Sniper (3), Magician (4), Gunner (6), Whipper (7), and Angel (8)
            return true;
    }
    if (cp_eff_ID==Card_Rings){ // Ring's Card
        if (class_ID==8)        // Only for Angel (8)
            return true;
    }
    if (cp_eff_ID==Card_Vampir){                       // Vampire's Card
        if (class_ID==1 || class_ID==2 || class_ID==7) // Only for Boxer (1), Gladiator (2), and Whipper (7)
            return true;
    }
    if (cp_eff_ID==Card_Heals) // Heal's Card
        return true;           // For all weapons and classes

    if (cp_eff_ID==Card_Katana){ // Katana's Card
        if (class_ID==2)         // Only for Gladiator (8)
            return true;
    }
    if (cp_eff_ID==Card_ONIGIR){                       // ONIGIRI's Card
        if (class_ID==1 || class_ID==2 || class_ID==7) // Only for Boxer (1), Gladiator (2), and Whipper (7)
            return true;
    }
    if (cp_eff_ID==Card_Gldrsh){                       // Gold rush Card
        if (class_ID==1 || class_ID==2 || class_ID==7) // Only for Boxer (1), Gladiator (2), and Whipper (7)
            return true;
    }
    if (cp_eff_ID==Card_Zombie) // Zombie's Card
        return true;            // For all weapons and classes

    if (cp_eff_ID==Medal_Bronze || cp_eff_ID==Medal_Silver || cp_eff_ID==Medal_Gold || cp_eff_ID==Medal_Iron) // Bronze, Silver, Gold, or Iron Medal
        return true;                                                                                          // For all weapons and classes

    if (cp_eff_ID==Ward_Ice || cp_eff_ID==Ward_Poison || cp_eff_ID==Ward_Freeze) // Ice, Poison, or Freeze Ward
        return true;                                                             // For all weapons and classes

    if (cp_eff_ID==Charm_Eff) // Any Charm
        return true;          // For all weapons and classes

    if (cp_eff_ID==Crown_Imprl || cp_eff_ID==Crown_Anger) // Imperial or Anger Crown
        return true;                                      // For all weapons and classes

    return false;
}

var Players = new SR_Player; // v = new Pg;
function SR_Player(){ // original name: Pg()
    this.PL_joint = Array((Stickmen_Slots<<1));                      // all the joints in the stickman's body             original name: .a
    this.PL_joint_destination = Array((Stickmen_Slots<<1));          // destination of the joint for the next frame       original name: .c
    this.PL_class_ID = new Int32Array((Stickmen_Slots<<1));          // class ID of stickman (1-8)                        original name: .step
    this.PL_array_ID = new Int32Array((Stickmen_Slots<<1));          // array ID of stickman (0,1,2,or 3)                 original name: .count
    this.PL_is_grounded = new Int32Array((Stickmen_Slots<<1));       // digit string for if stickmen is grounded/swimming original name: .h     next to ground 100/000 + in water 10/00 + on the ground 1/0
    this.PL_focus = new Int32Array((Stickmen_Slots<<1));             // focus point (body part where attack originates)   original name: .g
    this.PL_reload_ticks = new Int32Array((Stickmen_Slots<<1));      // number of frames until player can attack again    original name: .l
    this.PL_damaged_ticks = new Int32Array((Stickmen_Slots<<1));     // number of frames that character looks damaged     original name: .qa
    this.PL_gladr_resid_count = new Int32Array((Stickmen_Slots<<1)); // number of bullets to be emitted by the sword      original name: .pa
    this.PL_is_swimming = new Int32Array((Stickmen_Slots<<1));       // value for each stickman if it's swimming          original name: .Za
    this.PL_held_player = -1;                                        // array ID of stickman that is held (-1 if no one)  original name: .v
    this.PL_held_joint = 0;                                          // the joint that is being dragged                   original name: .T
    this.PL_is_chosen = new Int32Array((Stickmen_Slots<<1));         // value for each stickman if it's chosen            original name: .search
    this.PL_dmg_dealt = 0;                                           // sum of damage delt by a melee hit                 original name: .L
    this.PL_team_is_dead = 0;                                        // stores if stickman is ready to attack             original name: .fb
    this.PL_ice_ticks = new Int32Array((Stickmen_Slots<<1));         // number of frames that player will be slowed       original name: .C
    this.PL_slowness = new Int32Array((Stickmen_Slots<<1));          // degree (percent) of slowness                      original name: .X
    this.PL_poison_ticks = new Int32Array((Stickmen_Slots<<1));      // number of frames that player will be poisoned     original name: .D
    this.PL_poison_dmg = new Int32Array((Stickmen_Slots<<1));        // poison damage delt per tick                       original name: .H
    this.PL_frozen_ticks = new Int32Array((Stickmen_Slots<<1));      // number of frames that player will be frozen       original name: .B
    this.PL_ring_thrown_status = Array((Stickmen_Slots<<1));         // 0: held  1: going out  2: returning               original name: .O
    this.PL_ring_distance_to_travel = Array((Stickmen_Slots<<1));    // distance between ring and its next destination    original name: .aa
    this.PL_ring_ticks_until_active = Array((Stickmen_Slots<<1));    // number of frames until ring hitbox will be active original name: .ba
    for (var s=0; s<Stickmen_Slots<<1; s++){
        this.PL_joint[s] = Array(21);
        this.PL_joint_destination[s] = Array(21);
        this.PL_ring_thrown_status[s] = new Int32Array(6);
        this.PL_ring_distance_to_travel[s] = new Int32Array(6);
        this.PL_ring_ticks_until_active[s] = new Int32Array(6);
        for (var j=0; j<21; j++){
            this.PL_joint[s][j] = new Vector2D;
            this.PL_joint_destination[s][j] = new Vector2D;
        }
    }
}

SR_Player.prototype.PLreset = function(){ // Pg.prototype.j
    this.PL_held_player = -1;
    this.PL_held_joint = 0;
};

SR_Player.prototype.PLspawn = function(current_char,x_pos,y_pos){ // Pg.prototype.set
    x_pos *= 8;
    y_pos *= 8;
    for (var j=0; j<21; j++){
        assignVector2D(this.PL_joint[current_char][j],x_pos+random(4),y_pos+random(4));
        this.PL_joint_destination[current_char][j].Vset(this.PL_joint[current_char][j]);
    }
    this.PL_class_ID[current_char] = Team_List[current_char];
    this.PL_array_ID[current_char] = 0;
    this.PL_is_grounded[current_char] = 0;
    this.PL_focus[current_char] = -1;
    this.PL_reload_ticks[current_char] = 0;
    this.PL_damaged_ticks[current_char] = 0;
    this.PL_gladr_resid_count[current_char] = 0;
    this.PL_is_swimming[current_char] = 0;
    this.PL_is_chosen[current_char] = 0;
    this.PL_ice_ticks[current_char] = 0;
    this.PL_slowness[current_char] = 0;
    this.PL_poison_ticks[current_char] = 0;
    this.PL_poison_dmg[current_char] = 0;
    this.PL_frozen_ticks[current_char] = 0;
    for (var r=0; r<6; r++){
        this.PL_ring_thrown_status[current_char][r] = 0;
        this.PL_ring_distance_to_travel[current_char][r] = 0;
        this.PL_ring_ticks_until_active[current_char][r] = 0;
    }
};

window.fff = SR_Player.prototype.PLmovement;
SR_Player.prototype.PLmovement = function(current_char,current_joint){ // Pg.prototype.kb
    var joint = this.PL_joint[current_char][current_joint];
    var vec_d = new Vector2D;
    vec_d.Vdistance(this.PL_joint[current_char][current_joint],this.PL_joint_destination[current_char][current_joint]);
    joint.Vset(this.PL_joint_destination[current_char][current_joint]);
    var mag1 = (magnitudeOf(vec_d)>>2)+1;
    scaleVector2D(vec_d,1/mag1);
    var x_move,x_move,y_move;
    var x_tile = clamp(joint.x,0,Win_Width-1)>>3;
    var y_tile = clamp(joint.y,0,Win_Height-1)>>3;
    var tile_type = Terrain.TR_tile_data[y_tile][x_tile];
    if (tile_type==9){ // if stickman is in water
        scaleVector2D(vec_d,0.95);
        this.PL_is_grounded[current_char] |= 2;
    }
    var friction = 0.5;
    var tile_type_under;
    if (Stage_Spawns[Terrain.TR_stage_num][Current_Screen][0]==8) // if terrain is frozen lake (icey)
        friction = 1;
    for (var i=0; i<mag1; i++){
        y_move = joint.y+vec_d.y;
        x_tile = clamp(joint.x,0,Win_Width-1)>>3;
        y_tile = clamp(y_move,0,Win_Height-1)>>3;
        tile_type = Terrain.TR_tile_data[y_tile][x_tile];
        tile_type_under = Terrain.TR_tile_data[y_tile+1][x_tile];
        if (y_move<Win_Height){
            if (0<=tile_type && tile_type<=8){ // if stickman is on land
                vec_d.x *= friction;
                vec_d.y =- vec_d.y;
                this.PL_is_grounded[current_char] |= 1;
            } else {
                joint.y = y_move;
            }
            /** fix: stickmen sill attack if their feet are up to 8 pixels (1 tile) off the Ground */
            if (0<=tile_type_under && tile_type_under<=8)
                this.PL_is_grounded[current_char] |= 4;
            /***************************************************************************************/
        }
        x_move = joint.x+vec_d.x;
        x_tile = clamp(x_move,0,Win_Width-1)>>3;
        y_tile = clamp(joint.y,0,Win_Height-1)>>3;
        tile_type = Terrain.TR_tile_data[y_tile][x_tile];
        tile_type_under = Terrain.TR_tile_data[y_tile+1][x_tile];
        if (0<=x_move && x_move<Win_Width){
            if (0<=tile_type && tile_type<=8){ // if stickman is on land
                vec_d.y *= friction;
                vec_d.x =- vec_d.x;
                this.PL_is_grounded[current_char] |= 1;
            } else {
                joint.x = x_move;
            }
            /** fix: stickmen sill attack if their feet are up to 8 pixels (1 tile) off the Ground */
            if (0<=tile_type_under && tile_type_under<=8)
                this.PL_is_grounded[current_char] |= 4;
            /***************************************************************************************/
        }
    }
};

// Locate a player and return its numerical ID
SR_Player.prototype.PLfindPlayer = function(left_bound,bottom_bound,right_bound,top_bound,enemy_leader){ // Pg.prototype.m
    var range = (left_bound+right_bound)>>1;
    var max_range = 1000;
    var target_ID = -1;
    if (this.PL_team_is_dead==1)
        return target_ID;
    for (var s=enemy_leader; s<enemy_leader+Stickmen_Slots; s++){
        this.PL_is_chosen[s] = 0;          // set target player as not chosen
        var player_pos = this.PL_joint[s][2]; // get position of attacker
        if (this.PL_class_ID[s]!=Class_Dead && player_pos.x-5<=right_bound && player_pos.x+5>=left_bound && player_pos.y-10<=top_bound && player_pos.y+10>=bottom_bound){
            this.PL_is_chosen[s] = 1;      // if attacker is alive and within range, set target player as chosen
            if (max_range > absVal(player_pos.x-range)){
                max_range = absVal(player_pos.x-range);
                target_ID = s;
            }
        }
    }
    return target_ID;
};

// do damage to player original name: Pg.prototype.K
SR_Player.prototype.PLtakeDamage = function(splash,type,type_parameter,ATmin,ATmax,focus_Xpos,focus_Ypos,hitbox_width,hitbox_height,team_leader){
    var target_ID = -1;
    this.PL_dmg_dealt = 0;
    hitbox_width *= 0.5;
    hitbox_height *= 0.5;
    for (var s=team_leader; s<team_leader+Stickmen_Slots; s++){
        if (this.PL_class_ID[s]!=Class_Dead && !(this.PL_joint[s][2].x-5 > focus_Xpos+hitbox_width || this.PL_joint[s][2].x+5 < focus_Xpos-hitbox_width || this.PL_joint[s][2].y-10 > focus_Ypos+hitbox_height || this.PL_joint[s][2].y+10 < focus_Ypos-hitbox_height)){
            target_ID = -1;
            var pl_damage = ATmin+floor(random(ATmax-ATmin+1));
            this.PL_damaged_ticks[s] = 2; // amount of time that character turns red when hit
            var indicr_color = 0xFF0000;  // color of damage indicators
            if (s>=Stickmen_Slots){
                target_ID = 1;
                indicr_color = 0xC0C0C0;  // color of vs mode enemy team indicators
            }

            // damage altering compos
            if (checkEff(Stickmen_Slots+s,Card_Bersrk))
                pl_damage += floor(pl_damage*getEff(Stickmen_Slots+s,Eff2)/100);
            var resist = false;
            switch (type) {
                case 0: // physical attack
                    //pl_damage = maxOf(1,pl_damage-floor(DEX_Aura[s]/5)); break; // defense aura effect
                case 1: // fire attack
                    if (checkEff(Stickmen_Slots+s,Card_Zombie))
                        mpl_damage += floor(pl_damage*getEff(Stickmen_Slots+s,Eff2)/100); break; // zombie's card weakness vs fire damage
                case 2: // ice attack
                    if (checkEff(Stickmen_Slots+s,Ward_Ice) && random(100)<getEff(Stickmen_Slots+s,Eff1)) // ice ward vs ice
                        resist = true;
                    if (resist==false){
                        this.PL_ice_ticks[s] = 500; // duration of slow when iced
                        this.PL_slowness[s] = type_parameter;
                        if (checkEff(Stickmen_Slots+s,Crystal_Purple))
                            this.PL_ice_ticks[s] -= floor(this.PL_ice_ticks[s]*getEff(Stickmen_Slots+s,Eff1)/100);       // purple crystal effect vs slow duration
                    } break;
                case 4: // poison attack
                    if (checkEff(Stickmen_Slots+s,Ward_Poison) && random(100)<getEff(Stickmen_Slots+s,Eff1))
                        resist = true; // poison ward vs poison
                    if (resist==false){
                        this.PL_poison_ticks[s] = type_parameter;
                        this.PL_poison_dmg[s] = pl_damage;
                        if (checkEff(Stickmen_Slots+s,Crystal_Purple)){
                            this.PL_poison_ticks[s] -= floor(this.PL_poison_ticks[s]*getEff(Stickmen_Slots+s,Eff1)/100); // purple crystal effect vs poison duration
                            this.PL_poison_dmg[s] -= floor(this.PL_poison_dmg[s]*getEff(Stickmen_Slots+s,Eff1)/100);     // purple crystal effect vs poison damage
                        }
                    }
                    target_ID = s;
                    continue; break;
                case 5: // freeze attack
                    if (checkEff(Stickmen_Slots+s,Ward_Freeze) && random(100)<getEff(Stickmen_Slots+s,Eff1))
                        resist = true; // freeze ward vs freeze
                    if (resist==false){
                        this.PL_frozen_ticks[s] = floor(type_parameter/10);
                        if (checkEff(Stickmen_Slots+s,Crystal_Purple))
                            this.PL_frozen_ticks[s] -= floor(this.PL_frozen_ticks[s]*getEff(Stickmen_Slots+s,Eff1)/100);
                    } break;
            }
            if (checkEff(Stickmen_Slots+s,Crystal_Silver) && type==0)
                pl_damage = maxOf(1,pl_damage-getEff(Stickmen_Slots+s,Eff1));                           // silver crystal effect
            if (checkEff(Stickmen_Slots+s,Crystal_Purple) && type!=0)
                pl_damage -= floor(pl_damage*getEff(Stickmen_Slots+s,Eff1)/100);                        // purple crystal effect vs damage
            if (checkEff(Stickmen_Slots+s,Crystal_Black) && random(100)<getEff(Stickmen_Slots+s,Eff1)){ // black crystal effect
                pl_damage = 0;
                this.PL_damaged_ticks[s] = 0;
                indicr_color = 0xFF8080; // color of 0 damage number (number when attack is blocked)
            }
            if (Dodge_Buff[s] > 0 && random(100)<Dodge_Buff[s]){ // priest dodge buff
                pl_damage = 0;
                this.PL_damaged_ticks[s] = 0;
                indicr_color = 0xAAA080; // color of 0 damage number (number when attack is blocked)
            }
            if (pl_damage != 0) {
                PlaySoundSFX(snd_dmgplayer, false);
            } else {
                PlaySoundSFX(snd_atboxer, false);
            }
            antiCheatCheck();
            LP_Current[s] = clamp(LP_Current[s]-pl_damage,0,LP_Max[s]);
            antiCheatSet();
            if (Sett_Dmg_Indicators<2)
                Indicators.INadd(this.PL_joint[s][0].x,this.PL_joint[s][0].y,target_ID,pl_damage,indicr_color); // output damage effect
            this.PL_dmg_dealt += pl_damage;
            target_ID = s;
            // if no area of effect, break
            if (splash==false)
                break;
        }
    }
    return target_ID;
};

// set this.PL_held_player
window.fff = SR_Player.prototype.PLsetHeldChar;
SR_Player.prototype.PLsetHeldChar = function(){ // Pg.prototype.jb
    var dist_vector = new Vector2D;
    var grab_reach = 20;
    var dist_from_cursor;
    var prev_dist_from_cursor = grab_reach;

    if (Left_Click_Is_Up){ // if mouse button is released, let go of stickman
        this.PL_held_player = -1;
        this.PL_held_joint = 0;
    } else if (Game_Mode!=1 && Clicked){
        for (var s=0; s<Stickman_Count; s++){
            for (var j=0; j<10; j++){
                dist_vector.x = Mouse_Xpos-this.PL_joint_destination[s][j].x;
                dist_vector.y = Mouse_Ypos-this.PL_joint_destination[s][j].y;
                dist_from_cursor = magnitudeOf(dist_vector);
                if (dist_from_cursor<grab_reach && dist_from_cursor<prev_dist_from_cursor && (LP_Current[s]!=0 || Sett_Drag_Dead_Body!=0)){
                    prev_dist_from_cursor = dist_from_cursor;
                    this.PL_held_player = s;
                    this.PL_held_joint = j;
                    Selected_Player = s;
                }
            }
        }
    }
};



// attack function for SR_Player original name: Pg.prototype.p
SR_Player.prototype.PLprojectileAttack = function(source,AT_focus_Xpos,AT_focus_Ypos,target){
    var proj_direction = new Vector2D;
    var AT_item = source;
    if (source < Stickmen_Slots<<1)
        AT_item = Item_Inv[Stickmen_Slots+source];  // if source is a stickman, get the stickman's weapon

    var AT_at_mode1 = getVal(AT_item,(Stickmen_Slots<<1))%100;       // Attack Mode                                                   original name: k
    var proj_angle = floor(getVal(AT_item,(Stickmen_Slots<<1))/100); // Attack mode detail                                            original name: r
    var AT_pj_orient = getVal(AT_item,17);                    // Projectile Orientation                                               original name: m
    var AT_pj_img = getVal(AT_item,18);                       // Projectile Image                                                     original name: n
    var AT_pj_color = getVal(AT_item,Proj_Color);             // Projectile Color                                                     original name: F
    var AT_pj_transp = getVal(AT_item,20);                    // Projectile Transparency (2 = Apply Trasparency,1 = Do Not Apply)     original name: H
    var AT_pj_width = getVal(AT_item,21);                     // Projectile Size X-direction                                          original name: M
    var AT_pj_height = getVal(AT_item,22);                    // Projectile Size Y-direction                                          original name: E
    var AT_pj_box_width = getVal(AT_item,23);                 // Projectile Hitbox Size X-direction                                   original name: ka
    var AT_pj_box_height = getVal(AT_item,24);                // Projectile Hitbox Size Y-direction                                   original name: Ja
    var AT_pj_APdelay = getVal(AT_item,25);                   // Appearence Delay for multiple projectiles (time for all to appear)   original name: Ea
    var AT_pj_EFdelay = getVal(AT_item,26);                   // Delay before SR_Projectile is Effective                              original name: Ca
    var AT_pj_life = getVal(AT_item,27);                      // Projectile Lifespan                                                  original name: Z
    var AT_pj_disap_eff = getVal(AT_item,28);                 // Projectile Disappearing Effect Time                                  original name: X
    var AT_pj_grav = getVal(AT_item,29);                      // Projetile Gravity (0 = Ignore Gravity,>0 = Falling,<0 = Rising)      original name: $
    var AT_pj_accel = getVal(AT_item,30);                     // Projectile Acceleration                                              original name: ob
    var AT_pj_pierce = getVal(AT_item,31);                    // Projectile Terrain Piercing Switch (1 = Yes,0 = No)                  original name: pb
    var AT_pj_bounce = getVal(AT_item,32);                    // Projectile Terrain Interaction (0 = Disappear,1 = Slide,2 = Reflect) original name: Xa
    var AT_pj_home = getVal(AT_item,33);                      // Homing Range                                                         original name: ta
    var AT_knockback = 0;                                     // Knockback                                                            original name: ya
    var AT_pj_splash = getVal(AT_item,Item_Splash);           // Projectile Splash                                                    original name: rb
    if (source < Stickmen_Slots<<1)
         var AT_AT_min = AT_Min[source];
    else var AT_AT_min = getVal(AT_item,Item_AT_Min);         // Minimum AT                                                           original name: ia
    if (source < Stickmen_Slots<<1)
         var AT_AT_max = AT_Max[source];
    else var AT_AT_max = getVal(AT_item,Item_AT_Max);         // Maximum AT                                                           original name: ja
    var AT_weap_bullet = getVal(AT_item,Item_Bullet);         // Weapon Number of Bullets                                             original name: za
    var AT_pj_speed = getVal(AT_item,13);                     // SR_Projectile Speed                                                  original name: bb
    var AT_bonus_type = getVal(AT_item,Item_Type);            // Weapon Element Type                                                  original name: ab
    var AT_bonus_type_param = getVal(AT_item,Item_Type_Para); // Element Type Parameters                                              original name: pa
    var AT_res_mode = getVal(AT_item,Item_Res_Mode);          // Weapon Residue Mode                                                  original name: Ya
    var AT_res_orient = getVal(AT_item,42);                   // Residue Orientation                                                  original name: Bb
    var AT_res_img = getVal(AT_item,43);                      // Residue Image                                                        original name: Cb
    var AT_res_color = getVal(AT_item,Res_Color);             // Residue Color                                                        original name: Sa
    var AT_res_transp = getVal(AT_item,45);                   // Residue Transparency                                                 original name: Oa
    var AT_res_width = getVal(AT_item,46);                    // Residue Size X-direction                                             original name: Ob
    var AT_res_height = getVal(AT_item,47);                   // Residue Size Y-direction                                             original name: Pb
    var AT_res_box_width = getVal(AT_item,48);                // Residue Hitbox Size X-direction                                      original name: Qb
    var AT_res_box_height = getVal(AT_item,49);               // Residue Hitbox Size Y-direction                                      original name: Rb
    var AT_res_APdelay = getVal(AT_item,50);                  // Appearence Delay for Multiple Residues                               original name: Sb
    var AT_res_EFdelay = getVal(AT_item,51);                  // Delay before Residue is Effective                                    original name: Tb
    var AT_res_life = getVal(AT_item,52);                     // Residue Lifespan                                                     original name: qb
    var AT_res_fade_time = getVal(AT_item,53);                // Residue Disappearing Effect Time                                     original name: Ub
    var AT_res_grav = getVal(AT_item,54);                     // Residue Gravity                                                      original name: Vb
    var AT_res_accel = getVal(AT_item,55);                    // Residue Acceleration                                                 original name: Wb
    var AT_res_pierce = getVal(AT_item,56);                   // Residue Terrain Piercing Switch                                      original name: Xb
    var AT_res_bounce = getVal(AT_item,57);                   // Residue Terrain Interaction                                          original name: Yb
    var AT_res_splash = getVal(AT_item,38);                   // Residue Splash Switch                                                original name: Zb
    var AT_BATmin = getVal(AT_item,Item_BAT_Min);             // Bonus AT Minimum                                                     original name: ba
    var AT_BATmax = getVal(AT_item,Item_BAT_Max);             // Bonus AT Maximum                                                     original name: U
    var AT_res_bullet = getVal(AT_item,41);                   // Residue Number of Bullets                                            original name: sc
    var base_AT_bonus_type = AT_bonus_type;                   // Base Weapon Element Type                                             original name: gd
    var base_AT_bonus_type_param = AT_bonus_type_param;       // Base Element Type Parameters                                         original name: Ta

    if (source<Stickmen_Slots<<1){ // damage compos on projectiles
        var AT_weap_class_ID = getVal(Item_Inv[Stickmen_Slots+source],Item_Class_ID);
        switch (AT_weap_class_ID){
            case 1: // Boxer
            case 2: // Gladiator
            case 7: // Whipper
                AT_AT_min = getVal(Item_Inv[Stickmen_Slots+source],Item_BAT_Min); // melee classes have no initial projectile, so they use
                AT_AT_max = getVal(Item_Inv[Stickmen_Slots+source],Item_BAT_Max); // the initial projectile slots to be their bonus attack projectile
                if (checkEff(Stickmen_Slots+source,Jewel_Ruby)){
                    AT_AT_min += getEff(Stickmen_Slots+source,Eff1);
                    AT_AT_max += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Garnet))
                    AT_pj_life += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Jewel_Sapphire)){
                    AT_AT_min += getEff(Stickmen_Slots+source,Eff1);
                    AT_AT_max += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Aquamarine))
                    AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Jewel_Topaz)){
                    AT_AT_min += getEff(Stickmen_Slots+source,Eff1);
                    AT_AT_max += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Emerald)){
                    AT_AT_min += getEff(Stickmen_Slots+source,Eff1);
                    AT_AT_max += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Peridot))
                    AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Jewel_Diamond))
                    AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);

                AT_AT_min += floor(AT_AT_min*Berserk_Aura[source]/100);
                AT_AT_max += floor(AT_AT_max*Berserk_Aura[source]/100);
                
                if (AT_weap_class_ID==7)
                    AT_weap_bullet += floor(DEX[source]/5);
                break;

            case 3: // Sniper
                if (AT_item!=402)
                    AT_bonus_type_param = AT_bonus_type = 0; // exception for Indra arrow
                antiCheatCheck();
                var bow_MP = getVal(Item_Inv[Stickmen_Slots+source],Weap_MP_Price); // bonus attack activation
                if (MP_Bar[source]+MAG[source] < bow_MP)    // if this hit doesn't fill MP bar
                    MP_Bar[source] = MP_Bar[source]+MAG[source]; // add MAG to the magic bar
                else
                    MP_Bar[source] = bow_MP;            // otherwise set the magic bar to full (maxOf capacity of magic bar is the weapon's MP)

                if (MP_Bar[source]==bow_MP && bow_MP>0) // if magic bar is full and weapon has source bonus attack
                    MP_Bar[source] = 0;
                else
                    AT_res_mode = 0;

                antiCheatSet();
                if (checkEff(Stickmen_Slots+source,Jewel_Ruby)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Garnet))
                    AT_res_life += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Jewel_Sapphire)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Aquamarine))
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Jewel_Topaz)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Emerald)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Peridot))
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Jewel_Diamond))
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);

                AT_BATmin += floor(AT_BATmin*Berserk_Aura[source]/100);
                AT_BATmax += floor(AT_BATmax*Berserk_Aura[source]/100);
                if (checkEff(Stickmen_Slots+source,Card_Catapt) && getEff(Stickmen_Slots+source,Eff1)>random(100))
                    AT_pj_pierce = 1;

                if (checkEff(Stickmen_Slots+source,Card_Guides))
                    AT_pj_home += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Card_Explsn) && getEff(Stickmen_Slots+source,Eff1)>random(100))
                    AT_pj_splash = 1;

                //Natural crit :hahayes:
                if (2>random(100)){
                    AT_AT_min += 2*AT_AT_min;
                    AT_AT_max += 2*AT_AT_max;
                    DIRE_crit_highlight = 1;
                } else DIRE_crit_highlight = 0;
                if (checkEff(Stickmen_Slots+source,Card_Critcl) && getEff(Stickmen_Slots+source,Eff1)>random(100)){
                    AT_AT_min += floor(getEff(Stickmen_Slots+source,Eff2)*AT_AT_min/100);
                    AT_AT_max += floor(getEff(Stickmen_Slots+source,Eff2)*AT_AT_max/100);
                    DIRE_crit_highlight = 1;
                } 
                 break;

            case 4: // Magician
            case 5: // Priest
                if (checkEff(Stickmen_Slots+source,Jewel_Ruby)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Garnet)){
                    AT_pj_life += getEff(Stickmen_Slots+source,Eff1);
                    AT_res_life += getEff(Stickmen_Slots+source,Eff1);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Sapphire)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Aquamarine)){
                    AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Topaz)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Emerald)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Peridot)){
                    AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Diamond)){
                    AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                }
                AT_BATmin += floor(AT_BATmin*Berserk_Aura[source]/100);
                AT_BATmax += floor(AT_BATmax*Berserk_Aura[source]/100);
                if (checkEff(Stickmen_Slots+source,Card_Catapt) && getEff(Stickmen_Slots+source,Eff1)>random(100)){
                    AT_pj_pierce = 1;
                }
                if (checkEff(Stickmen_Slots+source,Card_Guides))
                    AT_pj_home += getEff(Stickmen_Slots+source,Eff1);
                break;
            case 6: // Gunner
                if (AT_res_mode!=0)
                    AT_bonus_type_param = AT_bonus_type = 0;

                if (checkEff(Stickmen_Slots+source,Jewel_Ruby)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Garnet))
                    AT_res_life += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Jewel_Sapphire)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Aquamarine))
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Jewel_Topaz)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Emerald)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Peridot))
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Jewel_Diamond))
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);

                AT_BATmin += floor(AT_BATmin*Berserk_Aura[source]/100);
                AT_BATmax += floor(AT_BATmax*Berserk_Aura[source]/100);
                if (checkEff(Stickmen_Slots+source,Card_Catapt) && getEff(Stickmen_Slots+source,Eff1)>random(100))
                    AT_pj_pierce = 1;

                if (checkEff(Stickmen_Slots+source,Card_Guides))
                    AT_pj_home += getEff(Stickmen_Slots+source,Eff1);

                if (checkEff(Stickmen_Slots+source,Card_Explsn) && getEff(Stickmen_Slots+source,Eff1)>random(100))
                    AT_pj_splash = 1;

                if (checkEff(Stickmen_Slots+source,Card_Critcl) && getEff(Stickmen_Slots+source,Eff1)>random(100)){
                    AT_AT_min += floor(getEff(Stickmen_Slots+source,Eff2)*AT_AT_min/100);
                    AT_AT_max += floor(getEff(Stickmen_Slots+source,Eff2)*AT_AT_max/100);
                    DIRE_crit_highlight = 1;
                } break;
            case 8: // Angel
                AT_AT_min = getVal(Item_Inv[Stickmen_Slots+source],Item_BAT_Min);
                AT_AT_max = getVal(Item_Inv[Stickmen_Slots+source],Item_BAT_Max);
                if (checkEff(Stickmen_Slots+source,Jewel_Ruby)){
                    AT_AT_min += getEff(Stickmen_Slots+source,Eff1);
                    AT_AT_max += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Ruby)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Garnet)){
                    AT_pj_life += getEff(Stickmen_Slots+source,Eff1);
                    AT_res_life += getEff(Stickmen_Slots+source,Eff1);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Sapphire)){
                    AT_AT_min += getEff(Stickmen_Slots+source,Eff1);
                    AT_AT_max += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Sapphire)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Aquamarine)){
                    AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Topaz)){
                    AT_AT_min += getEff(Stickmen_Slots+source,Eff1);
                    AT_AT_max += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Topaz)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Emerald)){
                    AT_AT_min += getEff(Stickmen_Slots+source,Eff1);
                    AT_AT_max += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Emerald)){
                    AT_BATmin += getEff(Stickmen_Slots+source,Eff1);
                    AT_BATmax += getEff(Stickmen_Slots+source,Eff2);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Peridot)){
                    AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                }
                if (checkEff(Stickmen_Slots+source,Jewel_Diamond)){
                    AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                    base_AT_bonus_type_param += getEff(Stickmen_Slots+source,Eff1);
                }
                AT_AT_min += floor(AT_AT_min*Berserk_Aura[source]/100);
                AT_AT_max += floor(AT_AT_max*Berserk_Aura[source]/100);
                AT_BATmin += floor(AT_BATmin*Berserk_Aura[source]/100);
                AT_BATmax += floor(AT_BATmax*Berserk_Aura[source]/100);
                break;
        }
        if (checkEff(Stickmen_Slots+source,Card_Bullet))
            AT_weap_bullet += getEff(Stickmen_Slots+source,Eff1)+floor(AT_weap_bullet*getEff(Stickmen_Slots+source,Eff2)/100);

        if (AT_weap_class_ID==3 || AT_weap_class_ID==4 || AT_weap_class_ID==6){ // ranged knockback
            if (checkEff(Stickmen_Slots+source,Card_Knockb) && getEff(Stickmen_Slots+source,Eff1)>random(100))
                AT_knockback = getEff(Stickmen_Slots+source,Eff2);
        }
        if (checkEff(Stickmen_Slots+source,Card_Reflct) && getEff(Stickmen_Slots+source,Eff1)>random(100))
            AT_pj_bounce = 2;
    }

    AT_weap_class_ID = 0;
    var horizontal_spd,vertical_spd,AT_Xpos,AT_Ypos,proj_angle,spread,lf;

    if (Game_Mode!=1){
        if (AT_at_mode1==6){
            AT_EN_Xpos = Enemies.EN_joint[target][0].x;
            AT_EN_Ypos = Enemies.EN_joint[target][0].y;
        } else {
            AT_EN_Xpos = Enemies.EN_joint[target][Enemies.EN_center].x;
            AT_EN_Ypos = Enemies.EN_joint[target][Enemies.EN_center].y;
        }
    } else {
        AT_weap_class_ID = 1-(target>>2);
        AT_EN_Xpos = this.PL_joint[target][2].x;
        AT_EN_Ypos = this.PL_joint[target][2].y;
    }

    switch (AT_at_mode1){ // player attack mode
        case 0: break;                                      // 0  none/melee mode (e.g. Mach Punch)

        case 1:                                             // 1  no movement (but can drop with gravitiy on)
            AT_Xpos = AT_focus_Xpos+10*proj_direction.x;
            AT_Ypos = AT_focus_Ypos+10*proj_direction.y;
            Projectiles.PJadd
            (
                AT_weap_class_ID,
                AT_Xpos,
                AT_Ypos,
                0,
                0,
                AT_pj_orient,
                AT_pj_img,
                AT_pj_color,
                AT_pj_transp,
                AT_pj_width,
                AT_pj_height,
                AT_pj_box_width,
                AT_pj_box_height,
                AT_pj_APdelay,
                AT_pj_EFdelay,
                AT_pj_life,
                AT_pj_disap_eff,
                AT_pj_grav,
                AT_pj_accel,
                AT_pj_pierce,
                AT_pj_bounce,
                AT_pj_home,
                AT_knockback,
                AT_pj_splash,
                AT_AT_min,
                AT_AT_max,
                AT_bonus_type,
                AT_bonus_type_param,
                AT_res_mode,
                AT_res_orient,
                AT_res_img,
                AT_res_color,
                AT_res_transp,
                AT_res_width,
                AT_res_height,
                AT_res_box_width,
                AT_res_box_height,
                AT_res_APdelay,
                AT_res_EFdelay,
                AT_res_life,
                AT_res_fade_time,
                AT_res_grav,
                AT_res_accel,
                AT_res_pierce,
                AT_res_bounce,
                AT_res_splash,
                AT_BATmin,
                AT_BATmax,
                AT_res_bullet,
                base_AT_bonus_type,
                base_AT_bonus_type_param
            );
            break;

        case 2:                                             // 2  horizontal
            proj_direction = AT_EN_Xpos-AT_focus_Xpos/absVal(AT_EN_Xpos-AT_focus_Xpos);
            AT_Xpos = AT_focus_Xpos+10*proj_direction;
            AT_Ypos = AT_focus_Ypos;
            horizontal_spd = proj_direction*AT_pj_speed*0.1;
            for (var p=0; p<AT_weap_bullet; p++){
                Projectiles.PJadd
                (
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    horizontal_spd,
                    0,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
            }
            break;

        case 3:                                             // 3  aimed straight line (X03 adjusts spread, X closer to 1 -> smaller spread. BUT 102403 = zero spread. X=16 if not specified)
            assignVector2D(proj_direction,AT_EN_Xpos-AT_focus_Xpos,AT_EN_Ypos-AT_focus_Ypos);
            if (proj_angle>0)
                 spread = proj_angle;
            else spread = 16;
            proj_angle = floor(512*angleToXAxis(proj_direction)/TwoPi)-((AT_weap_bullet-1)*spread>>1);
            for (var p=0; p<AT_weap_bullet; p++){
                proj_direction.x = Xe[proj_angle&511][0];
                proj_direction.y = -Xe[proj_angle&511][1];
                AT_Xpos = AT_focus_Xpos+10*proj_direction.x;
                AT_Ypos = AT_focus_Ypos+10*proj_direction.y;
                horizontal_spd = proj_direction.x*AT_pj_speed*0.1;
                vertical_spd = proj_direction.y*AT_pj_speed*0.1;
                Projectiles.PJadd
                (
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    horizontal_spd,
                    vertical_spd,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
                proj_angle += spread;
            }
            break;

        case 4:                                             // 4  arc (X04 adjusts spread, X=1 -> zero spread. X=(4+Bullet count) if not specified. Speed is "frames taken to reach target position"? and must !=0)
            for (var p=0; p<AT_weap_bullet; p++){
                assignVector2D(proj_direction,AT_EN_Xpos-AT_focus_Xpos,AT_EN_Ypos-AT_focus_Ypos);
                if (proj_angle>0)
                     spread = proj_angle
                else spread = AT_weap_bullet+4;
                if (AT_weap_bullet>1){
                    horizontal_spd = floor(random(512));
                    lf = random(4)*spread;
                    proj_direction.x += Xe[horizontal_spd][0]*lf;
                    proj_direction.y += Xe[horizontal_spd][1]*lf;
                }
                AT_Xpos = AT_focus_Xpos;
                AT_Ypos = AT_focus_Ypos;
                horizontal_spd = proj_direction.x/AT_pj_speed;
                vertical_spd = (proj_direction.y-0.5*AT_pj_speed*AT_pj_speed*AT_pj_grav*0.01)/AT_pj_speed;
                Projectiles.PJadd
                (
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    horizontal_spd,
                    vertical_spd,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
            }
            break;

        case 5:                                             // 5  aimed from distance (e.g. Ice Bolt)
            for (var p=0; p<AT_weap_bullet; p++){
                if (proj_angle==0){
                    AT_Xpos = AT_focus_Xpos+randomRange(-40,40);
                    AT_Ypos = AT_focus_Ypos+randomRange(-60,0);
                } else {
                    AT_Xpos = AT_focus_Xpos+randomRange(-10*(proj_angle-1),10*(proj_angle-1));
                }
                AT_Ypos = AT_focus_Ypos+randomRange(-60,-50);
                assignVector2D(proj_direction,AT_EN_Xpos-AT_Xpos,AT_EN_Ypos-AT_Ypos);
                Normalize(proj_direction);
                scaleVector2D(proj_direction,AT_pj_speed);
                Projectiles.PJadd
                (
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    proj_direction.x,
                    proj_direction.y,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
            }
            break;

        case 6:                                             // 6  around enemy (speed 0 = on enemy, higher speed => greater projectile spread, projectile orientation must =0)
            for (var p=0; p<AT_weap_bullet; p++){
                AT_Xpos = AT_EN_Xpos+randomRange(-AT_pj_speed,AT_pj_speed);
                AT_Ypos = AT_EN_Ypos+randomRange(-AT_pj_speed,AT_pj_speed);
                Projectiles.PJadd
                (
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    0,
                    0,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
            }
            break;

        case 7:                                             // 7  lightsaber like (outward) (Sword/Dual Sword/Hammer only?)
        case 10:                                            // 8  spawn around range (X08: horizontal range = 20(X-1) centered at target x-position, 108 = Thunder Spear like. X=5 if not specified)
            proj_direction.x = AT_focus_Xpos-this.PL_joint[source][5].x;
            proj_direction.y = AT_focus_Ypos-this.PL_joint[source][5].y;
            if (AT_Xpos==10 && proj_direction.y>0)
                proj_direction.y = -proj_direction.y;
            AT_Xpos = this.PL_joint[source][5].x+0.5*proj_direction.x;
            AT_Ypos = this.PL_joint[source][5].y+0.5*proj_direction.y;
            Normalize(proj_direction);
            scaleVector2D(proj_direction,0.1*AT_pj_speed);
            for (var p=0; p<AT_weap_bullet; p++){
                Projectiles.PJadd
                (
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    proj_direction.x,
                    proj_direction.y,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
            }
            break;

        case 12:                                            // 12 unused, looks like 2?
            proj_direction = AT_focus_Xpos-this.PL_joint[AT_Ypos][0].x/absVal(proj_direction);
            AT_Xpos = this.PL_joint[AT_Ypos][0].x;
            AT_Ypos = this.PL_joint[AT_Ypos][0].y;
            horizontal_spd = proj_direction*AT_pj_speed*0.1;
            for (var p=0; p<AT_weap_bullet; p++){
                Projectiles.PJadd
                (
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    horizontal_spd,
                    0,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
            }
            break;

        case 8:                                             // 8  spawn around range (X08: horizontal range = 20(X-1) centered at target x-position, 108 = Thunder Spear like. X=5 if not specified)
            for (var p=0; p<AT_weap_bullet; p++){
                if (proj_angle==0)
                     AT_Xpos = AT_EN_Xpos+randomRange(-40,40);
                else AT_Xpos = AT_EN_Xpos+randomRange(-10*(proj_angle-1),10*(proj_angle-1));
                AT_Ypos = AT_EN_Ypos+randomRange(-30,-60);
                Projectiles.PJadd
                (
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    0,
                    0,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
            }
            break;

        case 9:                                             // 9  ring formation (9 = on enemy, 109 = on attacker, 1 projectile = random direction projectile)
            if (proj_angle==0){
                AT_Xpos = AT_EN_Xpos;
                AT_Ypos = AT_EN_Ypos;
            } else {
                AT_Xpos = AT_focus_Xpos;
                AT_Ypos = AT_focus_Ypos;
            }
            AT_focus_Xpos = floor(512/AT_weap_bullet);
            horizontal_spd = floor(random(AT_focus_Xpos));
            for (var p=0; p<AT_weap_bullet; p++){
                proj_direction.x = Xe[horizontal_spd][0]*AT_pj_speed;
                proj_direction.y = Xe[horizontal_spd][1]*AT_pj_speed;
                Projectiles.PJadd
                (
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    proj_direction.x,
                    proj_direction.y,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
                horizontal_spd += AT_focus_Xpos;
            }
            break;

        case 11:                                            // 11 thunder ring like (X11 adjusts spread, X=0 if not specified)
            assignVector2D(proj_direction,AT_EN_Xpos-AT_focus_Xpos,AT_EN_Ypos-AT_focus_Ypos);
            lf = Normalize(proj_direction);
            if (proj_angle>0)
                 spread = proj_angle;
            else spread = 0;
            for (var p=0; p<AT_weap_bullet; p++){
                horizontal_spd = randomRange(-spread,spread);
                AT_Xpos = AT_focus_Xpos+proj_direction.x*lf/2+proj_direction.y*horizontal_spd;
                AT_Ypos = AT_focus_Ypos+proj_direction.y*lf/2-proj_direction.x*horizontal_spd;
                horizontal_spd = AT_pj_speed*(p+1)/AT_weap_bullet*proj_direction.x;
                vertical_spd = AT_pj_speed*(p+1)/AT_weap_bullet*proj_direction.y;
                Projectiles.PJadd(
                    AT_weap_class_ID,
                    AT_Xpos,
                    AT_Ypos,
                    horizontal_spd,
                    vertical_spd,
                    AT_pj_orient,
                    AT_pj_img,
                    AT_pj_color,
                    AT_pj_transp,
                    AT_pj_width,
                    AT_pj_height,
                    AT_pj_box_width,
                    AT_pj_box_height,
                    AT_pj_APdelay,
                    AT_pj_EFdelay,
                    AT_pj_life,
                    AT_pj_disap_eff,
                    AT_pj_grav,
                    AT_pj_accel,
                    AT_pj_pierce,
                    AT_pj_bounce,
                    AT_pj_home,
                    AT_knockback,
                    AT_pj_splash,
                    AT_AT_min,
                    AT_AT_max,
                    AT_bonus_type,
                    AT_bonus_type_param,
                    AT_res_mode,
                    AT_res_orient,
                    AT_res_img,
                    AT_res_color,
                    AT_res_transp,
                    AT_res_width,
                    AT_res_height,
                    AT_res_box_width,
                    AT_res_box_height,
                    AT_res_APdelay,
                    AT_res_EFdelay,
                    AT_res_life,
                    AT_res_fade_time,
                    AT_res_grav,
                    AT_res_accel,
                    AT_res_pierce,
                    AT_res_bounce,
                    AT_res_splash,
                    AT_BATmin,
                    AT_BATmax,
                    AT_res_bullet,
                    base_AT_bonus_type,
                    base_AT_bonus_type_param
                );
            }
            break;
    }
};

// walking  original name: Yg()
var Move_Spd = 4; // force propelling stickmens' legs (new variable)
function Walk(Stickman,char_ID){
    var ranger_Xpos,ranger_Ypos,ranger_sight,ranger_target;
    var ranger_Xtile,ranger_Ytile;
    var hop_strength = 0.6;
    if (Sett_Auto_Move[char_ID]!=0 || Game_Mode==1){
        if (Stickman.PL_is_swimming[char_ID]>0){
            Stickman.PL_is_swimming[char_ID]--;

        //             if LP is NOT less than 20%  OR  if Move If Dying setting is off
        } else if (!(floor(100*LP_Current[char_ID]/LP_Max[char_ID]<20) && Game_Mode!=1 && Sett_Move_If_Dying==0)){
            ranger_Xpos = (Stickman.PL_joint[char_ID][9].x+Stickman.PL_joint[char_ID][10].x)>>1;
            ranger_Ypos = (Stickman.PL_joint[char_ID][9].y+Stickman.PL_joint[char_ID][10].y)>>1;
            ranger_sight = Range[char_ID];

            if (Game_Mode!=1){
                ranger_target = Enemies.ENfindEnemy(ranger_Xpos-200-ranger_sight,ranger_Ypos-20-ranger_sight,ranger_Xpos+200+ranger_sight,ranger_Ypos+100+ranger_sight);
                /** fix: priests won't walk toward enemies outside their vertical range */
                if (Team_List[char_ID]==5)
                    ranger_target = Enemies.ENfindEnemy(ranger_Xpos-200-ranger_sight,ranger_Ypos-20-(ranger_sight>>1),ranger_Xpos+200+ranger_sight,ranger_Ypos+100+ranger_sight);
                /************************************************************************/
            }
            else
                ranger_target = Players.PLfindPlayer(ranger_Xpos-600,ranger_Ypos-300,ranger_Xpos+600,ranger_Ypos+300,getLeader(char_ID,1));

            // if target is found
            if (ranger_target!=-1){
                Stickman.PL_is_swimming[char_ID] = 15;

                if (ranger_Xpos < (Game_Mode!=1? Enemies.EN_joint[ranger_target][Enemies.EN_center].x :Stickman.PL_joint[ranger_target][2].x)){ // if to the left of target
                    ranger_Xtile = clamp(ranger_Xpos+14,0,Win_Width-1)>>3; // get right x tile pos
                    ranger_Ytile = clamp(ranger_Ypos-6,8,Win_Height-1)>>3;  // get center y tile pos

                    if (0<=Terrain.TR_tile_data[ranger_Ytile][ranger_Xtile] && Terrain.TR_tile_data[ranger_Ytile][ranger_Xtile]<=8)
                        hop_strength = 2;
                    if (0<=Terrain.TR_tile_data[ranger_Ytile-1][ranger_Xtile] && Terrain.TR_tile_data[ranger_Ytile-1][ranger_Xtile]<=8) // if ranger is at a wall
                        hop_strength = 4;

                    if (Stickman.PL_joint[char_ID][9].x < Stickman.PL_joint[char_ID][10].x){
                        Stickman.PL_joint[char_ID][7].x += Move_Spd;
                        Stickman.PL_joint[char_ID][7].y -= 3*hop_strength;
                    } else {
                        Stickman.PL_joint[char_ID][8].x += Move_Spd;
                        Stickman.PL_joint[char_ID][8].y -= 3*hop_strength;
                    }
                } else {                                                                                                                            // if to the right of target
                    ranger_Xtile = clamp(ranger_Xpos-14,0,Win_Width-1)>>3; // get left x tile pos
                    ranger_Ytile = clamp(ranger_Ypos-6,8,Win_Height-1)>>3;  // get center y tile pos

                    if (Terrain.TR_tile_data[ranger_Ytile][ranger_Xtile]>=0 && Terrain.TR_tile_data[ranger_Ytile][ranger_Xtile]<=8)
                        hop_strength = 2;
                    if (Terrain.TR_tile_data[ranger_Ytile-1][ranger_Xtile]>=0 && Terrain.TR_tile_data[ranger_Ytile-1][ranger_Xtile]<=8)
                        hop_strength = 4;

                    if (Stickman.PL_joint[char_ID][9].x > Stickman.PL_joint[char_ID][10].x){
                        Stickman.PL_joint[char_ID][7].x -= Move_Spd; // stickman walking speed
                        Stickman.PL_joint[char_ID][7].y -= 3*hop_strength;
                    } else {
                        Stickman.PL_joint[char_ID][8].x -= Move_Spd; // stickman walking speed
                        Stickman.PL_joint[char_ID][8].y -= 3*hop_strength;
                    }
                }
            }
        }
    }
}

// swimming original name: Zg()
function Swim(Stickman,char_ID){
    if (Sett_Auto_Move[char_ID]==1 && (floor(100*LP_Current[char_ID]/LP_Max[char_ID]>20) || Sett_Move_If_Dying==1)){
        var ranger_Xpos = (Stickman.PL_joint[char_ID][9].x+Stickman.PL_joint[char_ID][10].x)>>1;
        var ranger_Ypos = (Stickman.PL_joint[char_ID][9].y+Stickman.PL_joint[char_ID][10].y)>>1;

        if (Game_Mode!=1)
             var ranger_target = Enemies.ENfindEnemy(ranger_Xpos-200-Range[char_ID],ranger_Ypos-100-Range[char_ID],ranger_Xpos+200+Range[char_ID],ranger_Ypos+100+Range[char_ID]);
        else var ranger_target = Players.PLfindPlayer(ranger_Xpos-600,ranger_Ypos-300,ranger_Xpos+600,ranger_Ypos+300,getLeader(char_ID,1));

        if (ranger_target!=-1 && Terrain.TR_tile_data[clamp(ranger_Ypos,8,Win_Height-1)>>3][clamp(ranger_Xpos,0,Win_Width-1)>>3]==9){ // if target is found and stickman is in water
            if (ranger_Xpos < (Game_Mode!=1? Enemies.EN_joint[ranger_target][Enemies.EN_center].x :Stickman.PL_joint[ranger_target][2].x)){ // if target is to the right
                Stickman.PL_joint[char_ID][0].x += 0.25; // swim right
                Stickman.PL_joint[char_ID][1].x += 0.25;
            } else { // if target is to the left
                Stickman.PL_joint[char_ID][0].x -= 0.25; // swim left
                Stickman.PL_joint[char_ID][1].x -= 0.25;
            }
            if (ranger_Ypos < (Game_Mode!=1? Enemies.EN_joint[ranger_target][Enemies.EN_center].y :Stickman.PL_joint[ranger_target][2].y)){ // if target is below
                /** fix: stickmen no longer swim into corners if enemy is on the other side of a wall **/
                //if (Selected_Player==0 && -1<=Terrain.TR_tile_data[(clamp(ranger_Ypos-6,8,Win_Height-1)>>3)-1][(clamp(ranger_Xpos+14,0,Win_Width-1)>>3)] && Terrain.TR_tile_data[(clamp(ranger_Ypos-6,8,Win_Height-1)>>3)-1][(clamp(ranger_Xpos+14,0,Win_Width-1)>>3)]<=8){
                    //Stickman.PL_joint[char_ID][0].y -= 0.25;
                    //Stickman.PL_joint[char_ID][1].y -= 0.25;
                //} else {
                /**/
                    Stickman.PL_joint[char_ID][0].y += 0.25; // swim down
                    Stickman.PL_joint[char_ID][1].y += 0.25;
                /**/
                //}
                /**/
            } else { // if target is above
                Stickman.PL_joint[char_ID][0].y -= 0.25; // swim up
                Stickman.PL_joint[char_ID][1].y -= 0.25;
            }

            Stickman.PL_joint[char_ID][0].x += randomRange(-0.25,0.25);
            Stickman.PL_joint[char_ID][0].y += randomRange(-0.25,0.25);
            Stickman.PL_joint[char_ID][1].x += randomRange(-0.25,0.25);
            Stickman.PL_joint[char_ID][1].y += randomRange(-0.25,0.25);
        }
    }
}

window.fff = SR_Player.prototype.PLmain;
SR_Player.prototype.PLmain = function(){ // Pg.prototype.move
    this.PLsetHeldChar();
    if (Game_Mode!=1)
         var team_leader = Stickmen_Slots;
    else var team_leader = Stickmen_Slots<<1;

    for (var current_char=0; current_char<team_leader; current_char++){
        //LP_Current[current_char] = maxOf(LP_Current[current_char],100); // unkillable stickmen for testing
        if (this.PL_poison_ticks[current_char]>0 && LP_Current[current_char]>0){
            this.PL_poison_ticks[current_char]--;
            antiCheatCheck();
            LP_Current[current_char] = maxOf(LP_Current[current_char]-this.PL_poison_dmg[current_char],0);
            antiCheatSet();
        }
        if (this.PL_frozen_ticks[current_char]>0 && LP_Current[current_char]>0){
            this.PL_frozen_ticks[current_char]--;
        } else {
            if (this.PL_ice_ticks[current_char]>0 && LP_Current[current_char]>0){
                this.PL_ice_ticks[current_char]--;
                if (random(100)<this.PL_slowness[current_char])
                    continue;
            }
            if (LP_Current[current_char]!=0){
                if (Item_Inv[Stickmen_Slots+current_char]==0)
                     this.PL_class_ID[current_char] = 0;
                else this.PL_class_ID[current_char] = Team_List[current_char];
            }
            // sign load zones (gauntlet style or no?)
            if ((Current_Stage!=55 && Current_Stage!=89 && Current_Screen!=Stage_Spawns[Current_Stage].length-1 || Enemies.EN_index_current==0) && (this.PL_is_grounded[current_char]&1)>0 && LP_Current[current_char]!=0){
                var x_pos = (this.PL_joint[current_char][9].x+this.PL_joint[current_char][10].x)/2;
                var y_pos = (this.PL_joint[current_char][9].y+this.PL_joint[current_char][10].y)/2;
                var sign_height = Terrain.TR_high_surface[Terrain.TR_width-1];
                if (Stage_Spawns[Current_Stage][Current_Screen][1]==7) // if stage uses desert tileset
                    sign_height = Terrain.TR_low_dry_surface[Terrain.TR_width-1];
                if (x_pos>Win_Width-12 && absVal(8*sign_height-y_pos)<10){
                    if (Current_Screen!=Stage_Spawns[Current_Stage].length-1)
                         Sign_Touched_Mode = 1;
                    else Sign_Touched_Mode = 2;
                }
            }
            this.PL_array_ID[current_char]++;
            if (LP_Current[current_char]==0){
                for (var j=0; j<11; j++)
                    moveJoint(this.PL_joint[current_char][j],this.PL_joint_destination[current_char][j],0.05,0.99);
            } else if (this.PL_is_grounded[current_char]==2){
                for (var j=0; j<11; j++)
                    moveJoint(this.PL_joint[current_char][j],this.PL_joint_destination[current_char][j],0.01,0.99);
            } else if (this.PL_array_ID[current_char]<10){
                moveJoint(this.PL_joint[current_char][0] ,this.PL_joint_destination[current_char][0] ,-0.2,0.99); // upward force to maintain stickman's posture
                moveJoint(this.PL_joint[current_char][1] ,this.PL_joint_destination[current_char][1] ,0   ,0.99);
                moveJoint(this.PL_joint[current_char][2] ,this.PL_joint_destination[current_char][2] ,-0.1,0.99); // upward force to maintain stickman's posture
                moveJoint(this.PL_joint[current_char][3] ,this.PL_joint_destination[current_char][3] ,0   ,0.99);
                moveJoint(this.PL_joint[current_char][4] ,this.PL_joint_destination[current_char][4] ,0   ,0.99);
                moveJoint(this.PL_joint[current_char][5] ,this.PL_joint_destination[current_char][5] ,0   ,0.99);
                moveJoint(this.PL_joint[current_char][6] ,this.PL_joint_destination[current_char][6] ,0   ,0.99);
                moveJoint(this.PL_joint[current_char][7] ,this.PL_joint_destination[current_char][7] ,0   ,0.99);
                moveJoint(this.PL_joint[current_char][8] ,this.PL_joint_destination[current_char][8] ,0   ,0.99);
                moveJoint(this.PL_joint[current_char][9] ,this.PL_joint_destination[current_char][9] ,0.3 ,0.99); // downward force to maintain stickman's posture
                moveJoint(this.PL_joint[current_char][10],this.PL_joint_destination[current_char][10],0.3 ,0.99); // downward force to maintain stickman's posture
            } else {
                for (var j=0; j<11; j++)
                    moveJoint(this.PL_joint[current_char][j],this.PL_joint_destination[current_char][j],0.05,0.99);
            }
            if (LP_Current[current_char]==0 && this.PL_class_ID[current_char]!=Class_Dead){
                this.PL_class_ID[current_char] = Class_Dead;
                PlaySoundSFX(snd_deathplayer, false);
                for (var j=0; j<11; j++){
                    this.PL_joint[current_char][j].x += randomRange(-2,2);
                    this.PL_joint[current_char][j].y += randomRange(-1,-3);
                }
                if (Game_Mode==1){
                    var opponent_leader = getLeader(current_char,1);
                    for (var s=0; s<Stickmen_Slots; s++){ // charm
                        if (checkEff(Stickmen_Slots+opponent_leader+s,Charm_Eff) && getEff(Stickmen_Slots+opponent_leader+s,Eff1)>random(100)){
                            charm_target = Players.PLfindPlayer(this.PL_joint[current_char][0].x-600,this.PL_joint[current_char][0].y-300,this.PL_joint[current_char][0].x+600,this.PL_joint[current_char][0].y+300,getLeader(current_char,0));
                            if (charm_target!=-1)
                                Players.PLprojectileAttack(getEff(Stickmen_Slots+opponent_leader+s,Eff2),this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,charm_target);
                        }
                    }
                }
            }
            if (this.PL_held_player==current_char && Game_Mode!=1){
                this.PL_joint[this.PL_held_player][this.PL_held_joint].x += (Mouse_Xpos-this.PL_joint[this.PL_held_player][this.PL_held_joint].x)*(LP_Current[current_char]==0? 0.04 :0.2);
                this.PL_joint[this.PL_held_player][this.PL_held_joint].y += (Mouse_Ypos-this.PL_joint[this.PL_held_player][this.PL_held_joint].y)*(LP_Current[current_char]==0? 0.04 :0.2);
            }

             // Dodge rolling (test)
             // Cooldown
            if (Dodge_Cooldown > 0) Dodge_Cooldown--;
            if (Dodge_Unlocked) {
                if (Left_Click_Is_Up){ // if mouse button is released, dodge
                    if (Dodge_Cooldown <= -50) {
                        for (var s=0; s<Stickman_Count; s++){
                            // Get angle
                            var mouseAngle = new Vector2D();
                            assignVector2D(mouseAngle,Mouse_Xpos-this.PL_joint[s][0].x,Mouse_Ypos-this.PL_joint[s][0].y);
                            Normalize(mouseAngle);
                            // Setup dest
                            var dest = this.PL_joint[s][0];
                            var x_tile = clamp(dest.x,0,Win_Width-1)>>3;
                            var y_tile = clamp(dest.y,0,Win_Height-1)>>3;
                            // Check for collisions
                            for (var dist = 0; dist <= 20 && (Terrain.TR_tile_data[y_tile][x_tile] < 0 || Terrain.TR_tile_data[y_tile][x_tile] > 8); dist++) {
                                dest = this.PL_joint[s][0].Vadd(mouseAngle);
                                x_tile = clamp(dest.x,0,Win_Width-1)>>3;
                                y_tile = clamp(dest.y,0,Win_Height-1)>>3;
                            }
                            // Move
                            moveJoint(this.PL_joint[s][0], dest, 0,0.99);
                        }
                        Dodge_Cooldown = 50;
                    }
                    if (Dodge_Cooldown < 0) Dodge_Cooldown++;
                } else if (Game_Mode!=1 && this.PL_held_player == -1 && Left_Click_Is_Down && Dodge_Cooldown <= 0){ // Dodge activation
                    if (Dodge_Cooldown > -50) Dodge_Cooldown--;
                }
            }

            switch (this.PL_class_ID[current_char]){
                case 0: this.Stickman_pl(current_char); break;
                case 1: this.Boxer(current_char); break;
                case 2: this.Gladiator(current_char); break;
                case 3: this.Sniper(current_char); break;
                case 4: this.Magician(current_char); break;
                case 5: this.Priest(current_char); break;
                case 6: this.Gunner(current_char); break;
                case 7: this.Whipper(current_char); break;
                case 8: this.Angel(current_char); break;
                case Class_Dead:
                    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][2] ,3.6,0.5,0.5);
                    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][5] ,4.8,0.5,0.5);
                    pullJoints(this.PL_joint[current_char][4],this.PL_joint[current_char][6] ,4.8,0.5,0.5);
                    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][9] ,4.8,0.5,0.5);
                    pullJoints(this.PL_joint[current_char][8],this.PL_joint[current_char][10],4.8,0.5,0.5);
                    break;
            }
            if ((this.PL_is_grounded[current_char]&1) > 0)
                this.PL_array_ID[current_char] = 0;

            this.PL_is_grounded[current_char] = 0; // reset grounded status
            for (var j=0; j<11; j++)
                this.PLmovement(current_char,j);
        }
    }
};


// empty class (class with unequipped weapons)
window.fff = SR_Player.prototype.Stickman_pl;
SR_Player.prototype.Stickman_pl = function(current_char){
    //*
    pullJoints(this.PL_joint[current_char][0],this.PL_joint[current_char][1] ,3.6,0.5,0.5); // top of head to neck
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][2] ,3.6,0.5,0.5); // neck to crotch
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][3] ,4.8,0.5,0.5); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][4] ,4.8,0.5,0.5); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][5] ,4.8,0.5,0.5); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4],this.PL_joint[current_char][6] ,4.8,0.5,0.5); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][7] ,4.8,0.5,0.5); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][8] ,4.8,0.5,0.5); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][9] ,4.8,0.5,0.5); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8],this.PL_joint[current_char][10],4.8,0.5,0.5); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][8] ,6  ,0.1,0.1); // left knee to right knee
    //*/
    /*
    pullJoints(this.PL_joint[current_char][0],this.PL_joint[current_char][1] ,36,0.01,0.01); // top of head to neck
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][2] ,36,0.01,0.01); // neck to crotch
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][3] ,48,0.01,0.01); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][4] ,48,0.01,0.01); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][5] ,48,0.01,0.01); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4],this.PL_joint[current_char][6] ,48,0.01,0.01); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][7] ,48,0.01,0.01); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][8] ,48,0.01,0.01); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][9] ,48,0.01,0.01); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8],this.PL_joint[current_char][10],48,0.01,0.01); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][8] ,60,0.001,0.001); // left knee to right knee
    //*/
  //pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][8] , 6,4  ,0.1); // makes them fly (ish)
};


// boxer class      original name: sa
window.fff = SR_Player.prototype.Boxer;
SR_Player.prototype.Boxer = function(current_char){
    var box_target,glove_MP,box_heals_eff,glove_splash,glove_hbox_w,glove_hbox_h,box_combatant,box_vampHeal,box_KB;
    var box_kb_vector = new Vector2D;
    var box_ATin = AT_Min[current_char]; // set base stats
    var box_ATax = AT_Max[current_char];
    var box_AGI = Agi_Min[current_char]+randInt(Agi_Max[current_char]-Agi_Min[current_char]+1);
    var box_range = Range[current_char];
    var box_Xpos = (this.PL_joint[current_char][9].x+this.PL_joint[current_char][10].x)>>1; // set position
    var box_Ypos = (this.PL_joint[current_char][9].y+this.PL_joint[current_char][10].y)>>1;

    if (this.PL_is_grounded[current_char]!=0 && this.PL_held_player!=current_char){ // if on the ground and not being held
        if (this.PL_reload_ticks[current_char] > 0) // if ready to attack
            this.PL_reload_ticks[current_char]--;   // decrement reload timer
        if (Game_Mode!=1) // find target
              box_target = Enemies.ENfindEnemy(box_Xpos-box_range,box_Ypos-box_range,box_Xpos+box_range,box_Ypos);
        else  box_target = Players.PLfindPlayer(box_Xpos-box_range,box_Ypos-box_range,box_Xpos+box_range,box_Ypos,getLeader(current_char,1));

        if (box_target!=-1){ // when a target is found
            if (this.PL_reload_ticks[current_char]==0){       // when ready to attack
                this.PL_reload_ticks[current_char] = box_AGI; // restart reload timer
                // body movement when attacking
                if (box_Xpos < (Game_Mode!=1? Enemies.EN_joint[box_target][Enemies.EN_center].x :this.PL_joint[box_target][2].x)){ // if enemy is to the right
                    if (this.PL_joint[current_char][5].x < this.PL_joint[current_char][6].x){ // if right hand is in front
                        this.PL_joint[current_char][5].x += 4; // move left hand right
                        this.PL_joint[current_char][4].x -= 4; // move right elbow left
                        this.PL_joint[current_char][2].y += 1; // move crotch down
                        this.PL_focus[current_char] = 5;       // set focus point to left hand (focus is the point on the body where the attack originates from)
                    } else {                               // if left hand is in front
                        this.PL_joint[current_char][6].x += 4; // move right hand right
                        this.PL_joint[current_char][3].x -= 4; // move left elbow left
                        this.PL_joint[current_char][2].y += 1; // move crotch down
                        this.PL_focus[current_char] = 6;       // set focus point to right hand
                    }
                } else {                               // if enemy is to the left
                    if (this.PL_joint[current_char][6].x < this.PL_joint[current_char][5].x){ // if right hand is in front
                        this.PL_joint[current_char][5].x -= 4; // move left hand right
                        this.PL_joint[current_char][4].x += 4; // move right elbow left
                        this.PL_joint[current_char][2].y += 1; // move crotch down
                        this.PL_focus[current_char] = 5;       // set focus point to left hand
                    } else {                               // if left hand is in front
                        this.PL_joint[current_char][6].x -= 4; // move right hand right
                        this.PL_joint[current_char][3].x += 4; // move left elbow left
                        this.PL_joint[current_char][2].y += 1; // move crotch down
                        this.PL_focus[current_char] = 6;       // set focus point to right hand
                    }
                }
                antiCheatCheck();
                glove_MP = getVal(Item_Inv[Stickmen_Slots+current_char],Weap_MP_Price); // bonus attack activation
                if (MP_Bar[current_char]+MAG[current_char] < glove_MP)                  // if this hit doesn't fill MP bar
                     MP_Bar[current_char] += MAG[current_char];                         // add MAG to the magic bar
                else MP_Bar[current_char] = glove_MP;                                   // otherwise set the magic bar to full (maxOf capacity of magic bar is the weapon's MP)
                if (glove_MP==MP_Bar[current_char] && glove_MP>0 || glove_MP==-1){      // if magic bar is full and weapon has a bonus attack, or if bonus attack is free
                    MP_Bar[current_char] = 0;                                           // reset mp bar
                    this.PLprojectileAttack(current_char,this.PL_joint[current_char][this.PL_focus[current_char]].x,this.PL_joint[current_char][this.PL_focus[current_char]].y,box_target); // perform projectile attack
                }
                if (checkEff(Stickmen_Slots+current_char,Card_Heals)){                                                            // boxer Heal's Card
                    box_heals_eff = getEff(Stickmen_Slots+current_char,Eff1);
                    LP_Current[current_char] = clamp(LP_Current[current_char]+box_heals_eff,0,LP_Max[current_char]);              // increase LP
                    Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,box_heals_eff,0x00FF00); // output LP increase
                }
                antiCheatSet();
                if (sfxEnabled) PlaySoundInterrupt(snd_atboxer, false);
            }
        } else if ((this.PL_is_grounded[current_char]&3)>0){ // if a target is not found
            Walk(this,current_char);
        }
        Swim(this,current_char);
    }
    if (this.PL_focus[current_char]!=-1 && this.PL_held_player!=current_char){ // base attack activation
        // boxer splash damage
        glove_splash = getVal(Item_Inv[Stickmen_Slots+current_char],Item_Splash); // if weapon already does spash damage, set glove_splash to 1
        if (checkEff(Stickmen_Slots+current_char,Card_Explsn) && random(100)<getEff(Stickmen_Slots+current_char,Eff1))  // boxer Explosion's Card
            glove_splash = true;
        if (checkEff(Stickmen_Slots+current_char,Card_Critcl) && random(100)<getEff(Stickmen_Slots+current_char,Eff1)){ // boxer Critical's Card
            box_ATin += floor(getEff(Stickmen_Slots+current_char,Eff2)*box_ATin/100);
            box_ATax += floor(getEff(Stickmen_Slots+current_char,Eff2)*box_ATax/100);
            DIRE_crit_highlight = 1;
        }
        glove_hbox_w = 12;
        glove_hbox_h = 8;
        if (checkEff(Stickmen_Slots+current_char,Card_Big)){ // boxer Big Card
            glove_hbox_w += floor(12*getEff(Stickmen_Slots+current_char,Eff1)/100);
            glove_hbox_h += floor(8*getEff(Stickmen_Slots+current_char,Eff1)/100);
        }
        if (Game_Mode!=1) // detect if basic attack hits
             box_combatant = Enemies.ENtakeDamage(glove_splash,0,0,box_ATin,box_ATax,this.PL_joint[current_char][this.PL_focus[current_char]].x,this.PL_joint[current_char][this.PL_focus[current_char]].y,glove_hbox_w,glove_hbox_h);
        else box_combatant = Players.PLtakeDamage(glove_splash,0,0,box_ATin,box_ATax,this.PL_joint[current_char][this.PL_focus[current_char]].x,this.PL_joint[current_char][this.PL_focus[current_char]].y,glove_hbox_w,glove_hbox_h,getLeader(current_char,1));

        if (box_combatant!=-1){ // if going to do damage
            this.PL_focus[current_char] = -1; // unset focus point
            if (checkEff(Stickmen_Slots+current_char,Card_Vampir)){                                                          // boxer Vampire's Card
                box_vampHeal = maxOf(1,floor(this.PL_dmg_dealt*getEff(Stickmen_Slots+current_char,Eff1)/100));               // set life gain amount
                antiCheatCheck();
                LP_Current[current_char] = clamp(LP_Current[current_char]+box_vampHeal,0,LP_Max[current_char]);              // add life gain to current LP
                antiCheatSet();
                Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,box_vampHeal,0x00FF00); // output life gain
            }
            if (checkEff(Stickmen_Slots+current_char,Card_ONIGIR) && Game_Mode==0 && random(100)<getEff(Stickmen_Slots+current_char,Eff1)) // boxer ONIGIRI's card
                Drops.DPadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,2,0,0);                                      // drop onigiri

            if (checkEff(Stickmen_Slots+current_char,Card_Gldrsh) && Game_Mode==0 && random(100)<getEff(Stickmen_Slots+current_char,Eff1)){    // boxer Gold rush Card
                box_gold_mult = 100;                                                                                                           // 100 as in 100%
                for (var s=0; s<Stickmen_Slots; s++){
                    if (checkEff(Stickmen_Slots+s,Medal_Gold))
                        box_gold_mult += getEff(Stickmen_Slots+s,Eff1);                                                                        // get gold medal effect from all 4 stickmen
                }
                Drops.DPadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,1,floor(this.PL_dmg_dealt*box_gold_mult/100),0); // drop gold
            }
            if (checkEff(Stickmen_Slots+current_char,Card_Knockb) && random(100)<getEff(Stickmen_Slots+current_char,Eff1)){ // boxer Knockback's Card
                box_KB = getEff(Stickmen_Slots+current_char,Eff2);                                                          // set knockback power
                if (Game_Mode!=1)
                     box_kb_vector.Vdistance(Enemies.EN_joint[getLeader(current_char,1)][0],this.PL_joint[current_char][1]);
                else box_kb_vector.Vdistance(Players.PL_joint[getLeader(current_char,1)][1],this.PL_joint[current_char][1]);
                Normalize(box_kb_vector);
                scaleVector2D(box_kb_vector,0.2*box_KB);
                if (Game_Mode!=1)
                     scaleVector2D(box_kb_vector,Text_Spacing[EN_Info[Enemies.EN_array_ID[getLeader(current_char,1)]][EN_Species]]/EN_Info[Enemies.EN_array_ID[getLeader(current_char,1)]][EN_Size]);
                else scaleVector2D(box_kb_vector,0.1);
                if (Game_Mode!=1)
                     Enemies.EN_joint_destination[getLeader(current_char,1)][0].Vsub(box_kb_vector);
                else Players.PL_joint_destination[getLeader(current_char,1)][0].Vsub(box_kb_vector);
            }
        }
    }
    pullJoints(this.PL_joint[current_char][0],this.PL_joint[current_char][1] ,3.6,0.5,0.5); // top of head to neck
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][2] ,3.6,0.5,0.5); // neck to crotch
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][3] ,4.8,0.5,0.5); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][4] ,4.8,0.5,0.5); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][5] ,4.8,0.5,0.5); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4],this.PL_joint[current_char][6] ,4.8,0.5,0.5); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][7] ,4.8,0.5,0.5); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][8] ,4.8,0.5,0.5); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][9] ,4.8,0.5,0.5); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8],this.PL_joint[current_char][10],4.8,0.5,0.5); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][8] ,6  ,0.1,0.1); // left knee to right knee
};

// gladiator class  original name: ta
window.fff = SR_Player.prototype.Gladiator;
SR_Player.prototype.Gladiator = function(current_char){
    var gla_target,sword_MP,gla_heals_eff,gla_combatant,gla_vampHeal,gla_gold_mult;
    var sword_vector = new Vector2D;
    var gla_ATin = AT_Min[current_char]; // set base stats
    var gla_ATax = AT_Max[current_char];
    var gla_AGI = Agi_Min[current_char]+randInt(Agi_Max[current_char]-Agi_Min[current_char]+1);
    var gla_range = Range[current_char];
    var gla_Xpos = (this.PL_joint[current_char][9].x+this.PL_joint[current_char][10].x)>>1; // set position
    var gla_Ypos = (this.PL_joint[current_char][9].y+this.PL_joint[current_char][10].y)>>1;

    if (this.PL_is_grounded[current_char]!=0 && this.PL_held_player!=current_char){ // if on the ground and not being held
        if (this.PL_reload_ticks[current_char] > 0) // if ready to attack
            this.PL_reload_ticks[current_char]--;   // decrement reload timer
        if (Game_Mode!=1) // find target
             gla_target = Enemies.ENfindEnemy(gla_Xpos-gla_range,gla_Ypos-gla_range,gla_Xpos+gla_range,gla_Ypos);
        else gla_target = Players.PLfindPlayer(gla_Xpos-gla_range,gla_Ypos-gla_range,gla_Xpos+gla_range,gla_Ypos,getLeader(current_char,1));

        if (gla_target!=-1){ // when a target is found
            if (this.PL_reload_ticks[current_char]==0){       // when ready to attack
                this.PL_reload_ticks[current_char] = gla_AGI; // restart reload timer
                // body movement when attacking
                if (gla_Xpos < (Game_Mode!=1? Enemies.EN_joint[gla_target][Enemies.EN_center].x :this.PL_joint[gla_target][2].x)){ // if enemy is to the right
                    this.PL_joint[current_char][5].x += 3;                                                 // move left hand right
                    this.PL_joint[current_char][5].y += 0.2*(gla_Ypos-2-this.PL_joint[current_char][5].y); // move left hand down
                    this.PL_joint[current_char][6].x = this.PL_joint[current_char][5].x-2;                 // move right hand behind left hand
                    this.PL_joint[current_char][6].y = this.PL_joint[current_char][5].y;                   // move right hand to same height as left hand
                    this.PL_joint[current_char][1].x -= 3;                                                 // move neck right
                } else {                                                                               // if enemy is to the left
                    this.PL_joint[current_char][5].x -= 3;                                                 // move left hand left
                    this.PL_joint[current_char][5].y += 0.2*(gla_Ypos-2-this.PL_joint[current_char][5].y); // move left hand down
                    this.PL_joint[current_char][6].x = this.PL_joint[current_char][5].x+2;                 // move right hand in front of left hand
                    this.PL_joint[current_char][6].y = this.PL_joint[current_char][5].y;                   // move right hand to same height as left hand
                    this.PL_joint[current_char][1].x += 3;                                                 // move neck right
                }
                this.PL_focus[current_char] = 5;                                                       // set focus point to left hand
                antiCheatCheck();
                sword_MP = getVal(Item_Inv[Stickmen_Slots+current_char],Weap_MP_Price); // bonus attack activation
                if (MP_Bar[current_char]+MAG[current_char] < sword_MP)                  // if this hit doesn't fill MP bar
                     MP_Bar[current_char] += MAG[current_char];                         // add MAG to the magic bar
                else MP_Bar[current_char] = sword_MP;                                   // otherwise set the magic bar to full (maxOf capacity of magic bar is the weapon's MP)
                if (MP_Bar[current_char]==sword_MP && sword_MP>0){                      // if magic bar is full and the weapon has a bonus attack
                    MP_Bar[current_char] = 0;                                           // reset mp bar
                    this.PL_gladr_resid_count[current_char] = getVal(Item_Inv[Stickmen_Slots+current_char],41); // perform projectile attack
                }
                if (checkEff(Stickmen_Slots+current_char,Card_Heals)){                                                            // gladiator Heal's Card
                    gla_heals_eff = getEff(Stickmen_Slots+current_char,Eff1);
                    LP_Current[current_char] = clamp(LP_Current[current_char]+gla_heals_eff,0,LP_Max[current_char]);              // increase LP
                    Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,gla_heals_eff,0x00FF00); // output LP increase
                }
                antiCheatSet();
                if (sfxEnabled) PlaySoundInterrupt(snd_atglad, false);
            }
        } else if ((this.PL_is_grounded[current_char]&3)>0){ // if a target is not found
            Walk(this,current_char);
        }
        Swim(this,current_char);
    }
    if (this.PL_focus[current_char]!=-1 && this.PL_held_player!=current_char){ // base attack activation
        if (checkEff(Stickmen_Slots+current_char,Card_Critcl) && random(100)<getEff(Stickmen_Slots+current_char,Eff1)){ // gladiator Critical's Card
            gla_ATin += floor(getEff(Stickmen_Slots+current_char,Eff2)*gla_ATin/100);
            gla_ATax += floor(getEff(Stickmen_Slots+current_char,Eff2)*gla_ATax/100);
            DIRE_crit_highlight = 1;
        }
        sword_vector.Vdistance(this.PL_joint[current_char][5],this.PL_joint[current_char][6]);
        Normalize(sword_vector);
        scaleVector2D(sword_vector,gla_range);

        if (Game_Mode!=1) // detect if basic attack hits
             gla_combatant = Enemies.ENtakeDamage(1,0,0,gla_ATin,gla_ATax,this.PL_joint[current_char][6].x+sword_vector.x/2,this.PL_joint[current_char][6].y+sword_vector.y/2,absVal(sword_vector.x),absVal(sword_vector.y));
        else gla_combatant = Players.PLtakeDamage(1,0,0,gla_ATin,gla_ATax,this.PL_joint[current_char][6].x+sword_vector.x/2,this.PL_joint[current_char][6].y+sword_vector.y/2,absVal(sword_vector.x),absVal(sword_vector.y),getLeader(current_char,1));

        if (gla_combatant!=-1){ // if going to do damage
            this.PL_focus[current_char] = -1; // unset focus point
            if (checkEff(Stickmen_Slots+current_char,Card_Vampir)){                                                          // gladiator Vampire's Card
                gla_vampHeal = maxOf(1,floor(this.PL_dmg_dealt*getEff(Stickmen_Slots+current_char,Eff1)/100));               // set life gain amount
                antiCheatCheck();
                LP_Current[current_char] = clamp(LP_Current[current_char]+gla_vampHeal,0,LP_Max[current_char]);              // add life gain to current LP
                antiCheatSet();
                Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,gla_vampHeal,0x00FF00); // output life gain
            }
            if (checkEff(Stickmen_Slots+current_char,Card_ONIGIR) && Game_Mode==0 && random(100)<getEff(Stickmen_Slots+current_char,Eff1)) // gladiator ONIGIRI's Card
                Drops.DPadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,2,0,0);                                      // drop onigiri

            if (checkEff(Stickmen_Slots+current_char,Card_Gldrsh) && Game_Mode==0 && random(100)<getEff(Stickmen_Slots+current_char,Eff1)){    // gladiator Gold rush Card
                gla_gold_mult = 100;                                                                                                           // 100 as in 100%
                for (var s=0; s<Stickmen_Slots; s++){
                    if (checkEff(Stickmen_Slots+s,Medal_Gold))
                        gla_gold_mult += getEff(Stickmen_Slots+s,Eff1);                                                                        // get gold medal effect from all 4 stickmen
                }
                Drops.DPadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,1,floor(this.PL_dmg_dealt*gla_gold_mult/100),0); // drop gold
            }
        }
    }
    pullJoints(this.PL_joint[current_char][0],this.PL_joint[current_char][1] ,3.6,0.5 ,0.5 ); // top of head to neck
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][2] ,3.6,0.5 ,0.5 ); // neck to crotch
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][3] ,4.8,0.5 ,0.5 ); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][4] ,4.8,0.5 ,0.5 ); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][5] ,4.8,0.5 ,0.5 ); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4],this.PL_joint[current_char][6] ,4.8,0.5 ,0.5 ); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][4] ,4.8,0.01,0.01); // right elbow to left elbow
    pullJoints(this.PL_joint[current_char][5],this.PL_joint[current_char][6] ,2.4,0.5 ,0.5 ); // right hand to left hand
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][7] ,4.8,0.5 ,0.5 ); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][8] ,4.8,0.5 ,0.5 ); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][9] ,4.8,0.5 ,0.5 ); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8],this.PL_joint[current_char][10],4.8,0.5 ,0.5 ); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][8] ,6  ,0.1 ,0.1 ); // left knee to right knee

    //Selected_Player==0&&(this.PL_gladr_resid_count[current_char] = getVal(Item_Inv[Stickmen_Slots+current_char],41)); // testing: manual sword activation

    if (this.PL_gladr_resid_count[current_char]>0){ // gladiator emits 1 residue at a time
        this.PL_gladr_resid_count[current_char]--;

        sword_vector.Vdistance(this.PL_joint[current_char][5],this.PL_joint[current_char][6]);
        Normalize(sword_vector);
        scaleVector2D(sword_vector,gla_range);
        sword_vector.Vadd(this.PL_joint[current_char][6]);
        if (Game_Mode!=1)
             this.PLprojectileAttack(current_char,sword_vector.x,sword_vector.y,0);
        else this.PLprojectileAttack(current_char,sword_vector.x,sword_vector.y,getLeader(current_char,1));
    }
};

// sniper class     original name: ua
window.fff = SR_Player.prototype.Sniper;
SR_Player.prototype.Sniper = function(current_char){
    var snp_target,snp_heals_eff;
    var snp_AGI = Agi_Min[current_char]+randInt(Agi_Max[current_char]-Agi_Min[current_char]+1); // set base stats
    var snp_range = Range[current_char];
    var snp_Xpos = (this.PL_joint[current_char][9].x+this.PL_joint[current_char][10].x)>>1; // set position
    var snp_Ypos = (this.PL_joint[current_char][9].y+this.PL_joint[current_char][10].y)>>1;

    if (this.PL_is_grounded[current_char]!=0 && this.PL_held_player!=current_char){ // if on the ground and not being held
        if (this.PL_reload_ticks[current_char] > 0) // if ready to attack
            this.PL_reload_ticks[current_char]--;   // decrement reload timer
        if (Game_Mode!=1) // find target
             snp_target = Enemies.ENfindEnemy(snp_Xpos-snp_range,snp_Ypos-snp_range,snp_Xpos+snp_range,snp_Ypos+snp_range);
        else snp_target = Players.PLfindPlayer(snp_Xpos-snp_range,snp_Ypos-snp_range,snp_Xpos+snp_range,snp_Ypos+snp_range,getLeader(current_char,1));

        if (snp_target!=-1){ // when a target is found
            // body movement while aiming
            if (snp_Xpos < (Game_Mode!=1? Enemies.EN_joint[snp_target][Enemies.EN_center].x :this.PL_joint[snp_target][2].x)){ // if enemy is to the right
                this.PL_joint[current_char][6].x += 0.2; // move right hand right
                this.PL_joint[current_char][6].y -= 0.2; // move right hand up
                this.PL_joint[current_char][5].x -= 0.2; // move left hand left
            } else {                                 // if enemy is to the left
                this.PL_joint[current_char][6].x -= 0.2; // move right hand left
                this.PL_joint[current_char][6].y -= 0.2; // move right hand up
                this.PL_joint[current_char][5].x += 0.2; // move left hand right
            }
            this.PL_joint[current_char][5].y += 0.2;     // move left hand down to balance forces
            if (this.PL_reload_ticks[current_char]==0){        // when ready to attack
                this.PL_reload_ticks[current_char] = snp_AGI;  // restart reload timer
                // body movement while attacking
                pullJoints(this.PL_joint[current_char][5],this.PL_joint[current_char][6],2,0.2,0.2); // create bow and arrow
                this.PL_focus[current_char] = 6;                                                   // set focus point to right hand

                if (checkEff(Stickmen_Slots+current_char,Card_Heals)){                                                            // sniper Heal's Card
                    snp_heals_eff = getEff(Stickmen_Slots+current_char,Eff1);
                    antiCheatCheck();
                    LP_Current[current_char] = clamp(LP_Current[current_char]+snp_heals_eff,0,LP_Max[current_char]);              // increase LP
                    antiCheatSet();
                    Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,snp_heals_eff,0x00FF00); // output LP increase
                }
                if (this.PL_focus[current_char] != -1){                                                                                 // base attack activation
                    this.PLprojectileAttack(current_char,this.PL_joint[current_char][6].x,this.PL_joint[current_char][6].y,snp_target); // perform projectile attack
                    this.PL_focus[current_char] = -1;                                                                                   // unset focus point
                }
                if (sfxEnabled) PlaySoundInterrupt(snd_atsniper, false);
            }
        } else if ((this.PL_is_grounded[current_char]&3)>0){ // if a target is not found
            Walk(this,current_char);
            Swim(this,current_char);
        }
    }

    pullJoints(this.PL_joint[current_char][0],this.PL_joint[current_char][1] ,3.6,0.5 ,0.5 ); // top of head to neck
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][2] ,3.6,0.5 ,0.5 ); // neck to crotch
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][3] ,4.8,0.5 ,0.5 ); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][4] ,4.8,0.5 ,0.5 ); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][5] ,4.8,0.5 ,0.5 ); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4],this.PL_joint[current_char][6] ,4.8,0.5 ,0.5 ); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][5],this.PL_joint[current_char][6] ,9.6,0.02,0.02); // right hand to left hand
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][7] ,4.8,0.5 ,0.5 ); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][8] ,4.8,0.5 ,0.5 ); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][9] ,4.8,0.5 ,0.5 ); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8],this.PL_joint[current_char][10],4.8,0.5 ,0.5 ); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][8] ,6  ,0.1 ,0.1 ); // left knee to right knee
};

// magician class   original name: ma
window.fff = SR_Player.prototype.Magician;
SR_Player.prototype.Magician = function(current_char){
    var mgi_target,mgi_heals_eff;
    var mgi_AGI = Agi_Min[current_char]+randInt(Agi_Max[current_char]-Agi_Min[current_char]+1); // set base stats
    var mgi_range = Range[current_char];
    var mgi_Xpos = (this.PL_joint[current_char][9].x+this.PL_joint[current_char][10].x)>>1; // set position
    var mgi_Ypos = (this.PL_joint[current_char][9].y+this.PL_joint[current_char][10].y)>>1;

    if (this.PL_is_grounded[current_char]!=0 && this.PL_held_player!=current_char){ // if on the ground and not being held
        if (this.PL_reload_ticks[current_char] > 0) // if ready to attack
            this.PL_reload_ticks[current_char]--;   // decrement reload timer
        if (Game_Mode!=1) // find target
             mgi_target = Enemies.ENfindEnemy(mgi_Xpos-mgi_range,mgi_Ypos-mgi_range,mgi_Xpos+mgi_range,mgi_Ypos+mgi_range);
        else mgi_target = Players.PLfindPlayer(mgi_Xpos-mgi_range,mgi_Ypos-mgi_range,mgi_Xpos+mgi_range,mgi_Ypos+mgi_range,getLeader(current_char,1));

        if (mgi_target!=-1){ // if a target is found
            // body movement while attacking
            if (mgi_Xpos < (Game_Mode!=1? Enemies.EN_joint[mgi_target][Enemies.EN_center].x :this.PL_joint[mgi_target][2].x)){ // if enemy is to the right
                this.PL_joint[current_char][5].x += 0.1; // move left hand right
                this.PL_joint[current_char][6].x += 0.1; // move right hand right
                this.PL_joint[current_char][1].x -= 0.2; // move neck left
            } else {                                 // if enemy is to the left
                this.PL_joint[current_char][5].x -= 0.1; // move left hand left
                this.PL_joint[current_char][6].x -= 0.1; // move right hand left
                this.PL_joint[current_char][1].x += 0.2; // move neck right
            }
            if (this.PL_reload_ticks[current_char]==0){       // when ready to attack
                this.PL_reload_ticks[current_char] = mgi_AGI; // restart reload timer

                pullJoints(this.PL_joint[current_char][5],this.PL_joint[current_char][6],0,0.1,0.1); // create held orb
                if (mgi_Xpos < (Game_Mode!=1? Enemies.EN_joint[mgi_target][Enemies.EN_center].x :this.PL_joint[mgi_target][2].x))
                     this.PL_focus[current_char] = 6; // set focus point to right hand
                else this.PL_focus[current_char] = 5; // set focus point to left hand

                if (checkEff(Stickmen_Slots+current_char,Card_Heals)){                                                            // magician Heal's Card
                    mgi_heals_eff = getEff(Stickmen_Slots+current_char,Eff1);
                    antiCheatCheck();
                    LP_Current[current_char] = clamp(LP_Current[current_char]+mgi_heals_eff,0,LP_Max[current_char]);              // increase LP
                    antiCheatSet();
                    Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,mgi_heals_eff,0x00FF00); // output LP increase
                }

                if (this.PL_focus[current_char] != -1){                                                                                 // base attack activation
                    this.PLprojectileAttack(current_char,this.PL_joint[current_char][6].x,this.PL_joint[current_char][6].y,mgi_target); // perform projectile attack
                    this.PL_focus[current_char] = -1;                                                                                   // unset focus point
                }
                if (sfxEnabled) PlaySoundInterrupt(snd_atmag, false);
            }
        } else if ((this.PL_is_grounded[current_char]&3)>0){ // if a target is not found
            Walk(this,current_char);
            Swim(this,current_char);
        }
    }
    pullJoints(this.PL_joint[current_char][0],this.PL_joint[current_char][1] ,3.6 ,0.5 ,0.5 ); // top of head to neck
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][2] ,3.6 ,0.5 ,0.5 ); // neck to crotch
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][3] ,4.8 ,0.5 ,0.5 ); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][4] ,4.8 ,0.5 ,0.5 ); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][5] ,4.8 ,0.5 ,0.5 ); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4],this.PL_joint[current_char][6] ,4.8 ,0.5 ,0.5 ); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][5],this.PL_joint[current_char][6] ,10.8,0.01,0.01); // right hand to left hand
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][7] ,4.8 ,0.5 ,0.5 ); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][8] ,4.8 ,0.5 ,0.5 ); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][9] ,4.8 ,0.5 ,0.5 ); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8],this.PL_joint[current_char][10],4.8 ,0.5 ,0.5 ); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][8] ,6   ,0.1 ,0.1 ); // left knee to right knee
};

// priest class     original name: na
window.fff = SR_Player.prototype.Priest;
SR_Player.prototype.Priest = function(current_char){
    var pri_target,pri_heals_eff,pri_MP;
    var pri_AGI = Agi_Min[current_char]+randInt(Agi_Max[current_char]-Agi_Min[current_char]+1); // set base stats
    var pri_range = Range[current_char];
    var pri_Xpos = (this.PL_joint[current_char][9].x+this.PL_joint[current_char][10].x)>>1; // set position
    var pri_Ypos = (this.PL_joint[current_char][9].y+this.PL_joint[current_char][10].y)>>1;

    if (Reloading[current_char]) { //Drain MP when aura is active
        if (MP_Bar[current_char] > 0) MP_Bar[current_char] -= (1/50)*(maxOf(getVal(Item_Inv[Stickmen_Slots+current_char],Weap_MP_Price), 20)/20);
            else Reloading[current_char] = false;
    }

    if (this.PL_is_grounded[current_char]!=0 && this.PL_held_player!=current_char){ // if on the ground and not being held
        if (this.PL_reload_ticks[current_char] > 0) // if ready to attack
            this.PL_reload_ticks[current_char]--;   // decrement reload timer
        if (Game_Mode!=1) // find target
             pri_target = Enemies.ENfindEnemy(pri_Xpos-pri_range,pri_Ypos-(pri_range>>1),pri_Xpos+pri_range,pri_Ypos+(pri_range>>1)); // vertical Range is 1/2 for priest
        else pri_target = Players.PLfindPlayer(pri_Xpos-pri_range,pri_Ypos-(pri_range>>1),pri_Xpos+pri_range,pri_Ypos+(pri_range>>1),getLeader(current_char,1));

        
        if (pri_target!=-1){ // when a target is found
            if (this.PL_reload_ticks[current_char]==0){       // when ready to attack
                this.PL_reload_ticks[current_char] = pri_AGI; // restart reload timer
                // body movement when attacking
                this.PL_joint[current_char][6].y -= 2; // move right hand up
                this.PL_joint[current_char][5].y += 2; // move left hand down

                pri_MP = getVal(Item_Inv[Stickmen_Slots+current_char],Weap_MP_Price); // bonus attack activation
                if (!Reloading[current_char]) {
                    if (MP_Bar[current_char]+MAG[current_char] < pri_MP)                  // if this hit doesn't fill MP bar
                        MP_Bar[current_char] += MAG[current_char];                        // add MAG to the magic bar
                    else MP_Bar[current_char] = pri_MP;          
                }                                                                   // otherwise set the magic bar to full (maxOf capacity of magic bar is the weapon's
                if (MP_Bar[current_char]==pri_MP && pri_MP>0 || pri_MP==-1){        // if magic bar is full and weapon has a bonus attack, or if bonus attack is free
                    if (!Reloading[current_char]) { // start drain
                        Reloading[current_char] = true;
                        Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,MP_Bar[current_char],0xFFFFFF);
                    }                                     
                    //Buff
                    Status_Buff[current_char] = getVal(Item_Inv[Stickmen_Slots+current_char],Priest_Buff);
                }
                
                if (checkEff(Stickmen_Slots+current_char,Card_Heals)){                                              // priest Heal's Card
                    pri_heals_eff = getEff(Stickmen_Slots+current_char,Eff1);
                    antiCheatCheck();
                    for (var s=getLeader(current_char,0); s<getLeader(current_char,0)+Stickmen_Slots; s++){
                        if (s!=current_char && LP_Current[s]!=0){
                            LP_Current[s] = clamp(LP_Current[s]+pri_heals_eff,0,LP_Max[s]);                         // increase LP
                            Indicators.INadd(this.PL_joint[s][0].x,this.PL_joint[s][0].y,0,pri_heals_eff,0x00FF00); // output LP increase
                        }
                    }
                    antiCheatSet();
                }
                if (Game_Mode!=1){                                                                                                     // base attack activation
                    for (var e=0; e<Enemies.EN_index_current; e++){                                                                    // find all enemies
                        if (Enemies.EN_is_found[e]==true)
                            this.PLprojectileAttack(current_char,this.PL_joint[current_char][6].x,this.PL_joint[current_char][6].y,e); // perform projectile attack
                    }
                } else {
                    for (var s=getLeader(current_char,1); s<getLeader(current_char,1)+Stickmen_Slots; s++){                            // find all enemy players
                        if (Players.PL_is_chosen[s]==true)
                            this.PLprojectileAttack(current_char,this.PL_joint[current_char][6].x,this.PL_joint[current_char][6].y,s); // perform projectile attack
                    }
                }
                if (sfxEnabled) PlaySoundInterrupt(snd_atpriest, false);
            }
        } else if ((this.PL_is_grounded[current_char]&3)>0){ // if a target is not found
            Walk(this,current_char);
            Swim(this,current_char);
        }
    }
    //if (Sett_LP_Bar_Disp&1) drawButton(pri_Xpos-pri_range,pri_Ypos-pri_range,pri_range*2,pri_range*2,0xFF0000FF); // draw aura

    pullJoints(this.PL_joint[current_char][0],this.PL_joint[current_char][1] ,3.6,0.5,0.5); // top of head to neck
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][2] ,3.6,0.5,0.5); // neck to crotch
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][3] ,4.8,0.5,0.5); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][4] ,4.8,0.5,0.5); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][5] ,4.8,0.5,0.5); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4],this.PL_joint[current_char][6] ,4.8,0.5,0.5); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][7] ,4.8,0.5,0.5); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][8] ,4.8,0.5,0.5); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][9] ,4.8,0.5,0.5); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8],this.PL_joint[current_char][10],4.8,0.5,0.5); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][8] ,6  ,0.1,0.1); // left knee to right knee
};

// gunner class     original name: va
window.fff = SR_Player.prototype.Gunner;
SR_Player.prototype.Gunner = function(current_char){
    var gnr_target,gnr_heals_eff;
    var point_gun = new Vector2D;
    var gnr_AGI = Agi_Min[current_char]+randInt(Agi_Max[current_char]-Agi_Min[current_char]+1); // set base stats
    var gnr_range = Range[current_char];
    var gun_cost = getVal(Item_Inv[Stickmen_Slots+current_char],Weap_MP_Price);
    var gun_bullet = 1;
    var gnr_Xpos = (this.PL_joint[current_char][9].x+this.PL_joint[current_char][10].x)>>1; // set position
    var gnr_Ypos = (this.PL_joint[current_char][9].y+this.PL_joint[current_char][10].y)>>1;
    var magFac = 1;

    if (this.PL_is_grounded[current_char]!=0 && this.PL_held_player!=current_char){ // if on the ground and not being held
        //Reloading
        if (MP_Bar[current_char] <= 0) {
            if (!Reloading[current_char]) {
                Reloading[current_char] = true;
                Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,"(reload)",0x665544);
            }
            
        }
        if (Reloading[current_char]) {
            if (MP_Bar[current_char] >= 100) {
                PlaySoundSFX(snd_click2, false);
                Reloading[current_char] = false;
                Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,"ok",0x44FF99);
                MP_Bar[current_char] = clamp(MP_Bar[current_char],0,100);     
            }
            else {
                magFac = maxOf(MAG[current_char]/10, 1);
                MP_Bar[current_char] += 1 + (MAG[current_char]/magFac)/10;
            }
        }
        if (this.PL_reload_ticks[current_char] > 0) // if ready to attack
            this.PL_reload_ticks[current_char]--;   // decrement reload timer
        if (Game_Mode!=1) // find target
             gnr_target = Enemies.ENfindEnemy(gnr_Xpos-gnr_range,gnr_Ypos-gnr_range,gnr_Xpos+gnr_range,gnr_Ypos+gnr_range);
        else gnr_target = Players.PLfindPlayer(gnr_Xpos-gnr_range,gnr_Ypos-gnr_range,gnr_Xpos+gnr_range,gnr_Ypos+gnr_range,getLeader(current_char,1));

        if (gnr_target!=-1){ // gunner body movement when aiming
            if (Game_Mode!=1)
                 point_gun.Vdistance(Enemies.EN_joint[gnr_target][Enemies.EN_center],this.PL_joint[current_char][6]);
            else point_gun.Vdistance(this.PL_joint[gnr_target][2],this.PL_joint[current_char][6]);
            Normalize(point_gun);
                // pulls hands toward target so that gunner is pointing gun at target
            this.PL_joint[current_char][5].x += 0.2*point_gun.x; // move left hand right
            this.PL_joint[current_char][5].y += 0.2*point_gun.y; // move left hand down
            this.PL_joint[current_char][6].x += 0.2*point_gun.x; // move right hand right
            this.PL_joint[current_char][6].y += 0.2*point_gun.y; // move right hand down
                // counters the pull
            this.PL_joint[current_char][1].x -= 0.4*point_gun.x; // move neck left
            this.PL_joint[current_char][1].y -= 0.4*point_gun.y; // move neck up

            if (!Reloading[current_char] && this.PL_reload_ticks[current_char]==0){       // when ready to attack
                this.PL_reload_ticks[current_char] = gnr_AGI; // restart reload timer
                // gunner body movement when attacking (gun recoil)
                this.PL_joint[current_char][5].y -= 1.5;         // move left hand up
                this.PL_joint[current_char][6].y -= 1.5;         // move right hand up
                this.PL_joint[current_char][3].y += 1.6;         // move left elbow down
                this.PL_joint[current_char][4].y += 1.6;         // move right elbow down
                this.PL_focus[current_char] = 6;                 // set focus point to right hand

                antiCheatCheck();
                // base attack activation
                if (Item_Inv[Stickmen_Slots+current_char]==258){                                                                                            // create exception for 3-round burst, because 1 attack = 3 bullets to pay for
                    gun_bullet = getVal(Item_Inv[Stickmen_Slots+current_char],Item_Bullet);
                    if (checkEff(Stickmen_Slots+current_char,Card_Bullet))
                        gun_bullet += getEff(Stickmen_Slots+current_char,Eff1)+floor(gun_bullet*getEff(Stickmen_Slots+current_char,Eff2)/100);
                }
                if (gun_cost>0){                                                                                                                            // create exception for starter gun
                    gun_cost = maxOf(gun_cost,1);                                                                                         // set shooting cost after reduction from MAG (minimum of 1)
                    //if (gun_cost*gun_bullet <= Team_Gold){                                                                                                  // if you have enough gold to pay for each bullet
                    MP_Bar[current_char] = clamp(MP_Bar[current_char]-gun_cost*gun_bullet,0,9999999);                                                                         // pay for each bullet
                    for (var b=0; b<gun_bullet; b++)
                        Indicators.INadd(this.PL_joint[current_char][6].x,this.PL_joint[current_char][6].y,point_gun.x<0? 0.5 :-0.5,Math.ceil(MP_Bar[current_char]/gun_cost),0xff8800); // output ammo payments
                    gun_cost = 0;                                                                                                                       // after paying for bullets, set cost to 0
                    //}
                }
                if (gun_cost==0){
                    if (checkEff(Stickmen_Slots+current_char,Card_Heals)){                                                            // gunner Heal's Card
                        gnr_heals_eff = getEff(Stickmen_Slots+current_char,Eff1);
                        LP_Current[current_char] = clamp(LP_Current[current_char]+gnr_heals_eff,0,LP_Max[current_char]);              // increase LP
                        Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,gnr_heals_eff,0x00FF00); // output LP increase
                    }
                    if (this.PL_focus[current_char]!=-1){                                                                                   // when gold for shot has been paid
                        this.PLprojectileAttack(current_char,this.PL_joint[current_char][6].x,this.PL_joint[current_char][6].y,gnr_target); // perform projectile attack
                        this.PL_focus[current_char] = -1;                                                                                   // unset focus point
                    }
                }
                antiCheatSet();
                if (sfxEnabled) //snd_atgunner.play();
                    PlaySoundInterrupt(snd_atgunner, false);
            }
        } else if ((this.PL_is_grounded[current_char]&3)>0){ // if a target is not found
            Walk(this,current_char);
            Swim(this,current_char);
            if (Enemies.ENfindEnemy(gnr_Xpos-(gnr_range*1.5),gnr_Ypos-(gnr_range*1.5),gnr_Xpos+(gnr_range*1.5),gnr_Ypos+(gnr_range*1.5)) == -1 && this.PL_reload_ticks[current_char] <= 0 && MP_Bar[current_char] < 100) {
                if (!Reloading[current_char]) {
                    Reloading[current_char] = true;
                    MP_Bar[current_char] = 0;
                    Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,"(reload)",0x665544);
                }
            }
        }
    }
    pullJoints(this.PL_joint[current_char][0],this.PL_joint[current_char][1] ,3.6,0.5,0.5); // top of head to neck
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][2] ,3.6,0.5,0.5); // neck to crotch
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][3] ,4.8,0.5,0.5); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1],this.PL_joint[current_char][4] ,4.8,0.5,0.5); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3],this.PL_joint[current_char][5] ,4.8,0.5,0.5); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4],this.PL_joint[current_char][6] ,4.8,0.5,0.5); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][5],this.PL_joint[current_char][6] ,1.2,0.5,0.5); // right hand to left hand
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][7] ,4.8,0.5,0.5); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2],this.PL_joint[current_char][8] ,4.8,0.5,0.5); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][9] ,4.8,0.5,0.5); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8],this.PL_joint[current_char][10],4.8,0.5,0.5); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7],this.PL_joint[current_char][8] ,6  ,0.1,0.1); // left knee to right knee
};

// whipper class    original name: wa
window.fff = SR_Player.prototype.Whipper;
SR_Player.prototype.Whipper = function(current_char){
    var wpr_target,whip_MP,whip_ypos,whip_xtile,whip_ytile,wpr_heal_crd,whip_hbox,wpr_combatant,wpr_vamp_gain,wpr_gold_mult,whipper_KB;
    var wpr_kb_vector = new Vector2D;
    var wpr_ATin = AT_Min[current_char]; // set base stats
    var wpr_ATax = AT_Max[current_char];
    var wpr_AGI = Agi_Min[current_char]+randInt(Agi_Max[current_char]-Agi_Min[current_char]+1);
    var wpr_range = Range[current_char];
    var wpr_Xpos = (this.PL_joint[current_char][9].x+this.PL_joint[current_char][10].x)>>1; // set position
    var wpr_Ypos = (this.PL_joint[current_char][9].y+this.PL_joint[current_char][10].y)>>1;

    for (var j=11; j<=14; j++) // make whip joints
        moveJoint(this.PL_joint[current_char][j],this.PL_joint_destination[current_char][j],0.05,0.95);

    if (this.PL_is_grounded[current_char]!=0 && this.PL_held_player!=current_char){ // if on the ground and not being held
        if (this.PL_reload_ticks[current_char] > 0) // if ready to attack
            this.PL_reload_ticks[current_char]--;   // decrement reload timer
        if (Game_Mode!=1) // find target
             wpr_target = Enemies.ENfindEnemy(wpr_Xpos-wpr_range,wpr_Ypos-wpr_range-20,wpr_Xpos+wpr_range,wpr_Ypos+20);
        else wpr_target = Players.PLfindPlayer(wpr_Xpos-wpr_range,wpr_Ypos-wpr_range-20,wpr_Xpos+wpr_range,wpr_Ypos+20,getLeader(current_char,1));

        if (wpr_target!=-1){ // when a target is found
            if (this.PL_reload_ticks[current_char]==0){       // when ready to attack
                this.PL_reload_ticks[current_char] = wpr_AGI; // restart reload timer
                // body movement when attacking
                if (this.PL_joint[current_char][5].x < this.PL_joint[current_char][6].x){ // if right hand is to the right
                    this.PL_joint[current_char][5].x += 4; // move left hand right
                    this.PL_joint[current_char][4].x -= 4; // move right elbow left
                } else {                               // if right hand is to the right
                    this.PL_joint[current_char][6].x += 4; // move right hand right
                    this.PL_joint[current_char][3].x -= 4; // move left elbow left
                }
                this.PL_joint[current_char][2].y += 1; // move crotch down
                this.PL_focus[current_char] = 14;      // set focus point to tip of whip
                antiCheatCheck();
                whip_MP = getVal(Item_Inv[Stickmen_Slots+current_char],Weap_MP_Price); // bonus attack activation
                if (MP_Bar[current_char]+MAG[current_char] < whip_MP)                  // if this hit doesn't fill MP bar
                     MP_Bar[current_char] += MAG[current_char];                        // add MAG to the magic bar
                else MP_Bar[current_char] = whip_MP;                                   // otherwise set the magic bar to full (maxOf capacity of magic bar is the weapon's
                if (MP_Bar[current_char]==whip_MP && whip_MP>0 || whip_MP==-1){        // if magic bar is full and weapon has a bonus attack, or if bonus attack is free
                    MP_Bar[current_char] = 0;                                          // reset mp bar
                    whip_ypos = this.PL_joint[current_char][this.PL_focus[current_char]].y;
                    whip_xtile = clamp(this.PL_joint[current_char][this.PL_focus[current_char]].x,0,Win_Width-1)>>3;
                    whip_ytile = clamp(this.PL_joint[current_char][this.PL_focus[current_char]].y,0,DIRE_Inv_Top-1)>>3;
                    if (whip_ytile-Terrain.TR_low_dry_surface[whip_xtile]>=0)
                        whip_ypos = 8*Terrain.TR_low_dry_surface[whip_xtile]+7;
                    else if (absVal(whip_ytile-Terrain.TR_high_surface[whip_xtile])<=3)
                        whip_ypos = 8*Terrain.TR_high_surface[whip_xtile]+7;

                    this.PLprojectileAttack(current_char,this.PL_joint[current_char][this.PL_focus[current_char]].x,whip_ypos,wpr_target); // perform projectile attack
                }
                if (checkEff(Stickmen_Slots+current_char,Card_Heals)){                                                           // whipper Heal's Card
                    wpr_heal_crd = getEff(Stickmen_Slots+current_char,Eff1);
                    LP_Current[current_char] = clamp(LP_Current[current_char]+wpr_heal_crd,0,LP_Max[current_char]);              // increase LP
                    Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,wpr_heal_crd,0x00FF00); // output LP increase
                }
                antiCheatSet();
                if (sfxEnabled) PlaySoundInterrupt(snd_atwhipper, false);
            }
        } else if ((this.PL_is_grounded[current_char]&3)>0){ // if a target is not found
            Walk(this,current_char);
        }
        Swim(this,current_char);
    }
    if (this.PL_focus[current_char]!=-1 && this.PL_held_player!=current_char){ // base attack activation
        if (checkEff(Stickmen_Slots+current_char,Card_Critcl) && random(100)<getEff(Stickmen_Slots+current_char,Eff1)){ // whipper Critical's Card
            wpr_ATin += floor(getEff(Stickmen_Slots+current_char,Eff2)*wpr_ATin/100);
            wpr_ATax += floor(getEff(Stickmen_Slots+current_char,Eff2)*wpr_ATax/100);
            DIRE_crit_highlight = 1;
        }
        whip_hbox = 20; // whipper Big Card
        if (checkEff(Stickmen_Slots+current_char,Card_Big)){
             whip_hbox += floor(20*getEff(Stickmen_Slots+current_char,Eff1)/100);
        }
        if (Game_Mode!=1) // detect if basic attack hits
             wpr_combatant = Enemies.ENtakeDamage(1,0,0,wpr_ATin,wpr_ATax,this.PL_joint[current_char][this.PL_focus[current_char]].x,this.PL_joint[current_char][this.PL_focus[current_char]].y,whip_hbox,whip_hbox);
        else wpr_combatant = Players.PLtakeDamage(1,0,0,wpr_ATin,wpr_ATax,this.PL_joint[current_char][this.PL_focus[current_char]].x,this.PL_joint[current_char][this.PL_focus[current_char]].y,whip_hbox,whip_hbox,wpr_combatant);

        if (wpr_combatant!=-1){ // if going to do damage
            this.PL_focus[current_char] = -1; // unset focus point
            if (checkEff(Stickmen_Slots+current_char,Card_Vampir)){                                                           // whipper Vampire's Card
                wpr_vamp_gain = maxOf(1,floor(this.PL_dmg_dealt*getEff(Stickmen_Slots+current_char,Eff1)/100));               // set life gain amount
                antiCheatCheck();
                LP_Current[current_char] = clamp(LP_Current[current_char]+wpr_vamp_gain,0,LP_Max[current_char]);              // add life gain to current LP
                antiCheatSet();
                Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,wpr_vamp_gain,0x00FF00); // output life gain
            }
            if (checkEff(Stickmen_Slots+current_char,Card_ONIGIR) && Game_Mode==0 && random(100)<getEff(Stickmen_Slots+current_char,Eff1)) // whipper ONIGIRI's Card
                Drops.DPadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,2,0,0);                                      // drop onigiri

            if (checkEff(Stickmen_Slots+current_char,Card_Gldrsh) && Game_Mode==0 && random(100)<getEff(Stickmen_Slots+current_char,Eff1)){    // whipper Gold rush Card
                wpr_gold_mult = 100;                                                                                                           // 100 as in 100%
                for (var s=0; s<Stickmen_Slots; s++)
                    if (checkEff(Stickmen_Slots+s,Medal_Gold))
                        wpr_gold_mult += getEff(Stickmen_Slots+s,Eff1);                                                                        // get gold medal effect from all 4 stickmen
                Drops.DPadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,1,floor(this.PL_dmg_dealt*wpr_gold_mult/100),0); // drop gold
            }
            if (checkEff(Stickmen_Slots+current_char,Card_Knockb) && random(100)<getEff(Stickmen_Slots+current_char,Eff1)){ // whipper Knockback's Card
                whipper_KB = getEff(Stickmen_Slots+current_char,Eff2);                                                      // set knockback power
                if (Game_Mode!=1)
                     wpr_kb_vector.Vdistance(Enemies.EN_joint[wpr_combatant][0],this.PL_joint[current_char][1]);
                else wpr_kb_vector.Vdistance(Players.PL_joint[wpr_combatant][1],this.PL_joint[current_char][1]);
                Normalize(wpr_kb_vector);
                scaleVector2D(wpr_kb_vector,0.2*whipper_KB);
                if (Game_Mode!=1)
                     scaleVector2D(wpr_kb_vector,Text_Spacing[EN_Info[Enemies.EN_array_ID[wpr_combatant]][EN_Species]]/EN_Info[Enemies.EN_array_ID[wpr_combatant]][EN_Size]);
                else scaleVector2D(wpr_kb_vector,0.1);
                if (Game_Mode!=1)
                     Enemies.EN_joint_destination[wpr_combatant][0].Vsub(wpr_kb_vector);
                else Players.PL_joint_destination[wpr_combatant][0].Vsub(wpr_kb_vector);
            }
        }
    }
    pullJoints(this.PL_joint[current_char][0] ,this.PL_joint[current_char][1] ,3.6 ,0.5 ,0.5 ); // top of head to neck
    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][2] ,3.6 ,0.5 ,0.5 ); // neck to crotch
    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][3] ,4.8 ,0.5 ,0.5 ); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][4] ,4.8 ,0.5 ,0.5 ); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3] ,this.PL_joint[current_char][5] ,4.8 ,0.5 ,0.5 ); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4] ,this.PL_joint[current_char][6] ,4.8 ,0.5 ,0.5 ); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][5] ,this.PL_joint[current_char][6] ,14.4,0.02,0.02); // right hand to left hand

    pullJoints(this.PL_joint[current_char][5] ,this.PL_joint[current_char][11],4.8 ,0   ,0.3 ); // right hand to whip joint 1
    pullJoints(this.PL_joint[current_char][11],this.PL_joint[current_char][12],4.8 ,0   ,0.3 ); // right hand to whip joint 2
    pullJoints(this.PL_joint[current_char][12],this.PL_joint[current_char][13],4.8 ,0   ,0.3 ); // whip joint 2 to whip joint 3
    pullJoints(this.PL_joint[current_char][13],this.PL_joint[current_char][14],4.8 ,0   ,0.3 ); // whip joint 3 to whip tip 4

    pullJoints(this.PL_joint[current_char][2] ,this.PL_joint[current_char][7] ,4.8 ,0.5 ,0.5 ); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2] ,this.PL_joint[current_char][8] ,4.8 ,0.5 ,0.5 ); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7] ,this.PL_joint[current_char][9] ,4.8 ,0.5 ,0.5 ); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8] ,this.PL_joint[current_char][10],4.8 ,0.5 ,0.5 ); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7] ,this.PL_joint[current_char][8] ,6   ,0.1 ,0.1 ); // left knee to right knee
};

// angel class      original name: xa
window.fff = SR_Player.prototype.Angel;
SR_Player.prototype.Angel = function(current_char){
    var ang_target,ang_range2,ang_splash,ang_combatant,ring_MP,ang_heal_crd;
    var ring_vector = new Vector2D;
    var ang_ATin = AT_Min[current_char]; // set base stats
    var ang_ATax = AT_Max[current_char];
    var ang_AGI = Agi_Min[current_char]+randInt(Agi_Max[current_char]-Agi_Min[current_char]+1);
    var ang_range = Range[current_char];
    var ang_Xpos = (this.PL_joint[current_char][9].x+this.PL_joint[current_char][10].x)>>1; // set position
    var ang_Ypos = (this.PL_joint[current_char][9].y+this.PL_joint[current_char][10].y)>>1;
    var ang_ring;
    if (DEX[current_char]<10) ang_ring = 1;
    else if (DEX[current_char]<30) ang_ring = 2;
    else if (DEX[current_char]<60) ang_ring = 3;
    else if (DEX[current_char]<100) ang_ring = 4;
    else ang_ring = 5;
    if (checkEff(Stickmen_Slots+current_char,Card_Rings))
        ang_ring += 1; // angel Ring's Card

    for (var j=11; j<=14; j++)
        moveJoint(this.PL_joint[current_char][j],this.PL_joint_destination[current_char][j],0.05,0.95); // make wings
    for (var j=15; j<=20; j++)
        moveJoint(this.PL_joint[current_char][j],this.PL_joint_destination[current_char][j],0,1);       // make 6 rings
    // keep wings afloat?
    this.PL_joint[current_char][11].x -= 0.1; // move right wing shoulder left
    this.PL_joint[current_char][11].y -= 0.1; // move right wing shoulder up
    this.PL_joint[current_char][12].x -= 0.1; // move right wingtip left
    this.PL_joint[current_char][12].y += 0.1; // move right wingtip down
    this.PL_joint[current_char][13].x += 0.1; // move left wing shoulder right
    this.PL_joint[current_char][13].y -= 0.1; // move left wing shoulder up
    this.PL_joint[current_char][14].x += 0.1; // move left wingtip right
    this.PL_joint[current_char][14].y += 0.1; // move left wingtip down

    if (this.PL_is_grounded[current_char]!=0 && this.PL_held_player!=current_char){ // if on the ground and not being held
        if (this.PL_reload_ticks[current_char] > 0) // if ready to attack
            this.PL_reload_ticks[current_char]--;   // decrement reload timer
        if (Game_Mode!=1) // find target
             ang_target = Enemies.ENfindEnemy(ang_Xpos-ang_range,ang_Ypos-ang_range,ang_Xpos+ang_range,ang_Ypos+ang_range);
        else ang_target = Players.PLfindPlayer(ang_Xpos-ang_range,ang_Ypos-ang_range,ang_Xpos+ang_range,ang_Ypos+ang_range,getLeader(current_char,1));

        if (ang_target!=-1){ // when a target is found
            for (var current_ring=0; current_ring<ang_ring && this.PL_ring_thrown_status[current_char][current_ring]!=0; current_ring++);
            if (this.PL_reload_ticks[current_char]==0 && current_ring!=ang_ring){ // when ready to attack and this is not the last ring
                this.PL_reload_ticks[current_char] = ang_AGI;                     // restart reload timer
                this.PL_ring_thrown_status[current_char][current_ring] = 1;                      // set ring as outgoing
                this.PL_ring_distance_to_travel[current_char][current_ring] = (ang_range>>1)+20; // set destination as 20 px past enemy
                this.PL_ring_ticks_until_active[current_char][current_ring] = 0;                 // set ring hitbox as active

                this.PL_joint[current_char][12].x -= 2; // move right wingtip left
                this.PL_joint[current_char][14].x += 2; // move left wingtip right
                this.PL_focus[current_char] = 15+current_ring; // set focus to this ring
                this.PL_joint[current_char][this.PL_focus[current_char]].Vset(this.PL_joint[current_char][0]);
                this.PL_joint[current_char][this.PL_focus[current_char]].y -= 5;
                this.PL_joint_destination[current_char][this.PL_focus[current_char]].Vset(this.PL_joint[current_char][this.PL_focus[current_char]]);

                if (Game_Mode!=1) // send out ring?
                     ring_vector.Vdistance(Enemies.EN_joint[ang_target][Enemies.EN_center],this.PL_joint[current_char][this.PL_focus[current_char]]);
                else ring_vector.Vdistance(this.PL_joint[ang_target][1],this.PL_joint[current_char][this.PL_focus[current_char]]);
                Normalize(ring_vector);
                scaleVector2D(ring_vector,2);
                this.PL_joint[current_char][this.PL_focus[current_char]].Vadd(ring_vector);
                if (sfxEnabled) PlaySoundInterrupt(snd_atangel, false);
            }
        } else if ((this.PL_is_grounded[current_char]&3)>0){ // if a target is not found
            Walk(this,current_char);
            Swim(this,current_char);
        }
    }

    for (var r=0; r<ang_ring; r++){
        if (this.PL_ring_thrown_status[current_char][r] != 0){  // if ring is not held
            this.PL_focus[current_char] = 15+r;                 // set focus point
            this.PL_ring_distance_to_travel[current_char][r]--; // move ring towards its target

            if (this.PL_ring_distance_to_travel[current_char][r] <= 0){ // once ring has reached its destination
                if (this.PL_ring_thrown_status[current_char][r]==1){    // if ring was going out
                    this.PL_ring_thrown_status[current_char][r]++;      // make ring return
                    ring_vector.Vset(this.PL_joint[current_char][0]);
                    ring_vector.y -= 5;
                    this.PL_joint_destination[current_char][this.PL_focus[current_char]].Vset(this.PL_joint[current_char][this.PL_focus[current_char]]);
                    ring_vector.Vdistance(ring_vector,this.PL_joint[current_char][this.PL_focus[current_char]]);
                    ang_range2 = Normalize(ring_vector);
                    scaleVector2D(ring_vector,2);
                    this.PL_joint[current_char][this.PL_focus[current_char]].Vadd(ring_vector);
                    this.PL_ring_distance_to_travel[current_char][r] = ang_range2>>1;
                } else {                                             // if ring was incoming
                    this.PL_ring_thrown_status[current_char][r] = 0; // set ring as held
                    this.PL_ring_distance_to_travel[current_char][r] = 0;
                    this.PL_ring_ticks_until_active[current_char][r] = 0;
                }
            }
            this.PL_ring_ticks_until_active[current_char][r]--;
            if (this.PL_ring_ticks_until_active[current_char][r] <= 0){ // rase attack activation
                ang_splash = false; // angel splash damage
                if (checkEff(Stickmen_Slots+current_char,Card_Explsn) && random(100)<getEff(Stickmen_Slots+current_char,Eff1)) ang_splash = true; // angel Explosion's Card

                if (checkEff(Stickmen_Slots+current_char,Card_Critcl) && random(100)<getEff(Stickmen_Slots+current_char,Eff1)){ // angel Critical's Card
                    ang_ATin += floor(getEff(Stickmen_Slots+current_char,Eff2)*ang_ATin/100);
                    ang_ATax += floor(getEff(Stickmen_Slots+current_char,Eff2)*ang_ATax/100);
                    DIRE_crit_highlight = 1;
                }

                if (Game_Mode!=1) // detect if basic attack hits
                     ang_combatant = Enemies.ENtakeDamage(ang_splash,0,0,ang_ATin,ang_ATax,this.PL_joint[current_char][this.PL_focus[current_char]].x,this.PL_joint[current_char][this.PL_focus[current_char]].y,10,10);
                else ang_combatant = Players.PLtakeDamage(ang_splash,0,0,ang_ATin,ang_ATax,this.PL_joint[current_char][this.PL_focus[current_char]].x,this.PL_joint[current_char][this.PL_focus[current_char]].y,10,10,getLeader(current_char,1));

                if (ang_combatant!=-1){ // if going to do damage
                    antiCheatCheck();
                    ring_MP = getVal(Item_Inv[Stickmen_Slots+current_char],Weap_MP_Price); // bonus attack activation
                    if (MP_Bar[current_char]+MAG[current_char] < ring_MP)                  // if this hit doesn't fill MP rar
                         MP_Bar[current_char] = MP_Bar[current_char]+MAG[current_char];    // add MAG to the magic rar
                    else MP_Bar[current_char] = ring_MP;                                   // otherwise set the magic rar to full (maxOf capacity of magic rar is the weapon's
                    if (ring_MP==MP_Bar[current_char] && ring_MP>0 || ring_MP==-1){        // if magic rar is full and weapon has a ronus attack, or if ronus attack is free
                        MP_Bar[current_char] = 0;                                          // reset mp rar
                        this.PLprojectileAttack(current_char,this.PL_joint[current_char][this.PL_focus[current_char]].x,this.PL_joint[current_char][this.PL_focus[current_char]].y,ang_combatant);
                    }
                    if (checkEff(Stickmen_Slots+current_char,Card_Heals)){                                                           // angel Heal's Card
                        ang_heal_crd = getEff(Stickmen_Slots+current_char,Eff1);
                        LP_Current[current_char] = clamp(LP_Current[current_char]+ang_heal_crd,0,LP_Max[current_char]);              // increase LP
                        Indicators.INadd(this.PL_joint[current_char][0].x,this.PL_joint[current_char][0].y,0,ang_heal_crd,0x00FF00); // output LP increase
                    }
                    antiCheatSet();
                    this.PL_ring_ticks_until_active[current_char][r] = getVal(Item_Inv[Stickmen_Slots+current_char],Ring_HBox_Rate);
                }
            }
        }
    }
    pullJoints(this.PL_joint[current_char][0] ,this.PL_joint[current_char][1] ,3.6,0.5,0.5); // top of head to neck
    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][2] ,3.6,0.5,0.5); // neck to crotch
    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][3] ,4.8,0.5,0.5); // neck to left elbow
    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][4] ,4.8,0.5,0.5); // neck to right elbow
    pullJoints(this.PL_joint[current_char][3] ,this.PL_joint[current_char][5] ,4.8,0.5,0.5); // left elbow to left hand
    pullJoints(this.PL_joint[current_char][4] ,this.PL_joint[current_char][6] ,4.8,0.5,0.5); // right elbow to right hand
    pullJoints(this.PL_joint[current_char][2] ,this.PL_joint[current_char][7] ,4.8,0.5,0.5); // crotch to left knee
    pullJoints(this.PL_joint[current_char][2] ,this.PL_joint[current_char][8] ,4.8,0.5,0.5); // crotch to right knee
    pullJoints(this.PL_joint[current_char][7] ,this.PL_joint[current_char][9] ,4.8,0.5,0.5); // left knee to left foot
    pullJoints(this.PL_joint[current_char][8] ,this.PL_joint[current_char][10],4.8,0.5,0.5); // right knee to right foot
    pullJoints(this.PL_joint[current_char][7] ,this.PL_joint[current_char][8] ,6  ,0.1,0.1); // left knee to right knee

    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][11],3.6,0  ,0.1); // neck to left wing (shoulder)
    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][12],12 ,0  ,0.1); // neck to left wing (tip)
    pullJoints(this.PL_joint[current_char][11],this.PL_joint[current_char][12],9.6,0.5,0.5); // left wing (shoulder) to left wing (tip)
    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][13],3.6,0  ,0.1); // neck to right wing (shoulder)
    pullJoints(this.PL_joint[current_char][1] ,this.PL_joint[current_char][14],12 ,0  ,0.1); // neck to right wing (tip)
    pullJoints(this.PL_joint[current_char][13],this.PL_joint[current_char][14],9.6,0.5,0.5); // right wing (shoulder) to right wing (tip)
};

// draws stickman
window.fff = SR_Player.prototype.PLrenderPlayer;
SR_Player.prototype.PLrenderPlayer = function(){ // Pg.prototype.b
    var a,b,e;
    var c = new Vector2D;
    var d = new Vector2D;
    var team_leader,weap_range;
    if (Game_Mode!=1)
         team_leader = Stickmen_Slots;
    else team_leader = (Stickmen_Slots<<1);
    for (var s=0; s<team_leader; s++){
        var weap_range = getVal(Item_Inv[Stickmen_Slots+s],Weap_Range);
        var color = getVal(Item_Inv[Stickmen_Slots+s],Item_Color);
        var head_color = 0xF2BD6B;                   // base color for head and body
        var body_color = 0xFFFFFF;

        if (checkEff(Stickmen_Slots+s,Card_Zombie)){ // color change when zombie's card is equipped
            head_color = 0xCCCCCC;
            body_color = 0x330066;
        }
        if (this.PL_frozen_ticks[s]>0){              // color of character when frozen
            head_color = 0x1E5CD0;
            body_color = 0x5A8EE1;
        } else if (this.PL_ice_ticks[s]>0){          // color of character when slowed (ice)
            head_color = 0x002670;
            body_color = 0x1E5CD0;
        } else if (this.PL_poison_ticks[s]>0){       // color when poisoned
            head_color = 0x339900;
            body_color = 0x33FF00;
        }
        if (this.PL_damaged_ticks[s]>0){             // color when taking hits
            this.PL_damaged_ticks[s]--;
            body_color = 0xFF0000;
        }

        Display_Mode2 = Display_Mode = 1;
        if (Selected_Player==s && Game_Mode==0 && Sett_PL_Symbol==2){
            for (var j=0; j<11; j++)
                dispItemCentered(Effect_Img,floor(this.PL_joint[s][j].x),floor(this.PL_joint[s][j].y),12,12,0,0,12,12,0x50FF0000); // PL symbol shadow
        } else if (Anger_Crown_Lightning>0){
            Anger_Crown_Lightning--;
            var n;
            if (Anger_Crown_Lightning<64)
                 n = Anger_Crown_Lightning;
            else n = 64;
            for (var j=0; j<11; j++)
                dispItemCentered(Effect_Img,floor(this.PL_joint[s][j].x),floor(this.PL_joint[s][j].y),24,24,0,0,12,12,n<<24|0xFFFFFF66);

            if (Anger_Crown_Lightning>120){
                b = randInt(11);
                Players.PLprojectileAttack(563,Players.PL_joint[s][b].x,Players.PL_joint[s][b].y,0);
            }
        } else {
            for (var j=0; j<11; j++)
                dispItemCentered(Effect_Img,floor(this.PL_joint[s][j].x),floor(this.PL_joint[s][j].y),12,12,0,0,12,12,0x40000000); // basic shadow
        }
        Display_Mode = Display_Mode2 = 0;

        if (Dodge_Cooldown < -45) dispItemCentered(Control_Img,Mouse_Xpos - 5,Mouse_Ypos - 5,40 + absVal(Dodge_Cooldown)/5,40 + absVal(Dodge_Cooldown)/5,0,0,12,12,0x22ffffFF);
        
        if (this.PL_class_ID[s]==8){ // if stickman is an angel draw wings
            b = (color&0xFFFFFF)>>17<<16|(color&0x00FFFF)>>9<<8|(color&0x0000FF)>>1;
            drawLine(this.PL_joint[s][1].x,this.PL_joint[s][1].y,this.PL_joint[s][11].x,this.PL_joint[s][11].y,b);
            drawLine(this.PL_joint[s][1].x,this.PL_joint[s][1].y,this.PL_joint[s][12].x,this.PL_joint[s][12].y,b);
            drawLine(this.PL_joint[s][11].x,this.PL_joint[s][11].y,this.PL_joint[s][12].x,this.PL_joint[s][12].y,b);
            drawLine(this.PL_joint[s][1].x,this.PL_joint[s][1].y,this.PL_joint[s][13].x,this.PL_joint[s][13].y,b);
            drawLine(this.PL_joint[s][1].x,this.PL_joint[s][1].y,this.PL_joint[s][14].x,this.PL_joint[s][14].y,b);
            drawLine(this.PL_joint[s][13].x,this.PL_joint[s][13].y,this.PL_joint[s][14].x,this.PL_joint[s][14].y,b);
        }
        drawLine(this.PL_joint[s][1].x,this.PL_joint[s][1].y,this.PL_joint[s][2].x,this.PL_joint[s][2].y,body_color);

        if (this.PL_class_ID[s]!=Class_Dead){ // if stickman is not dead, draw (spine?)
            drawLine(this.PL_joint[s][1].x,this.PL_joint[s][1].y,this.PL_joint[s][3].x,this.PL_joint[s][3].y,body_color),
            drawLine(this.PL_joint[s][1].x,this.PL_joint[s][1].y,this.PL_joint[s][4].x,this.PL_joint[s][4].y,body_color);
        }
        drawLine(this.PL_joint[s][3].x,this.PL_joint[s][3].y,this.PL_joint[s][5].x,this.PL_joint[s][5].y,body_color);
        drawLine(this.PL_joint[s][4].x,this.PL_joint[s][4].y,this.PL_joint[s][6].x,this.PL_joint[s][6].y,body_color);

        if (this.PL_class_ID[s]!=Class_Dead){
            drawLine(this.PL_joint[s][2].x,this.PL_joint[s][2].y,this.PL_joint[s][7].x,this.PL_joint[s][7].y,body_color);
            drawLine(this.PL_joint[s][2].x,this.PL_joint[s][2].y,this.PL_joint[s][8].x,this.PL_joint[s][8].y,body_color);
        }
        drawLine(this.PL_joint[s][7].x,this.PL_joint[s][7].y,this.PL_joint[s][9].x,this.PL_joint[s][9].y,body_color);
        drawLine(this.PL_joint[s][8].x,this.PL_joint[s][8].y,this.PL_joint[s][10].x,this.PL_joint[s][10].y,body_color);

        drawRect(floor(this.PL_joint[s][0].x)-2,floor(this.PL_joint[s][0].y)-2,5,5,head_color);

        Display_Mode2 = 2;
        if (checkEff(Stickmen_Slots+s,Crown_Imprl))
            dispItem(Drop_Img,floor(this.PL_joint[s][0].x)-6,floor(this.PL_joint[s][0].y)-6-6,12,12,228,0,12,12,0xFFFFD700);
        if (checkEff(Stickmen_Slots+s,Crown_Anger))
            dispItem(Drop_Img,floor(this.PL_joint[s][0].x)-6,floor(this.PL_joint[s][0].y)-6-6,12,12,228,0,12,12,0xFFDDDDDD);
        Display_Mode2 = 0;

        if (this.PL_class_ID[s]==1){
            var glove_hbox = 3;
            if (checkEff(Stickmen_Slots+s,Card_Big))
                glove_hbox = 5;
            drawButton(floor(this.PL_joint[s][5].x)-1,floor(this.PL_joint[s][5].y)-1,glove_hbox,glove_hbox,color);
            drawButton(floor(this.PL_joint[s][6].x)-1,floor(this.PL_joint[s][6].y)-1,glove_hbox,glove_hbox,color);
        } else if (this.PL_class_ID[s]==2){
            if (checkEff(Stickmen_Slots+s,Card_Longsw))
                weap_range += getEff(Stickmen_Slots+s,Eff1);
            if (checkEff(Stickmen_Slots+s,Card_Katana))
                weap_range += getEff(Stickmen_Slots+s,Eff2);
            c.Vdistance(this.PL_joint[s][5],this.PL_joint[s][6]);
            Normalize(c);
            scaleVector2D(c,weap_range);
            c.Vadd(this.PL_joint[s][6]);
            drawLine(this.PL_joint[s][6].x,this.PL_joint[s][6].y,c.x,c.y,color);
        } else if (this.PL_class_ID[s]==3){
            c.Vdistance(this.PL_joint[s][6],this.PL_joint[s][5]);
            Normalize(c);
            d.Vset(c);
            getPerpendicular(d);
            scaleVector2D(c,18);
            c.Vadd(this.PL_joint[s][5]);
            drawLine(this.PL_joint[s][5].x,this.PL_joint[s][5].y,c.x,c.y,color);
            scaleVector2D(d,8);
            sumVector2D(c,this.PL_joint[s][6],d);
            drawLine(this.PL_joint[s][5].x,this.PL_joint[s][5].y,c.x,c.y,0x808080);
            d.Vdistance(this.PL_joint[s][6],d);
            drawLine(this.PL_joint[s][5].x,this.PL_joint[s][5].y,d.x,d.y,0x808080);
            drawLine(c.x,c.y,d.x,d.y,0xC0C0C0);
        } else if (this.PL_class_ID[s]==4){
            sumVector2D(c,this.PL_joint[s][5],this.PL_joint[s][6]);
            scaleVector2D(c,0.5);
            drawButton(floor(c.x)-1,floor(c.y)-1,3,3,color);
        } else if (this.PL_class_ID[s]==5){
            c.x = this.PL_joint[s][0].x+randomRange(-10,10);
            c.y = this.PL_joint[s][0].y+randomRange(-10,0);
            c.Vdistance(this.PL_joint[s][6],this.PL_joint[s][4]);
            Normalize(c);
            getPerpendicular(c);
            scaleVector2D(c,8);
            drawLine(this.PL_joint[s][6].x-c.x,this.PL_joint[s][6].y-c.y,this.PL_joint[s][6].x+c.x,this.PL_joint[s][6].y+c.y,0x808080);
            drawButton(floor(this.PL_joint[s][6].x+c.x)-1,floor(this.PL_joint[s][6].y+c.y)-1,3,3,color);
        } else if (this.PL_class_ID[s]==6){
            weap_range = clamp(floor(this.PL_joint[s][6].x)-floor(this.PL_joint[s][1].x),-8,8)>>1;

            if (weap_range==-4)      drawButton(floor(this.PL_joint[s][6].x)-5,floor(this.PL_joint[s][6].y)-2,7,2,color);
            else if (weap_range==-3) drawButton(floor(this.PL_joint[s][6].x)-4,floor(this.PL_joint[s][6].y)-2,6,2,color);
            else if (weap_range==-2) drawButton(floor(this.PL_joint[s][6].x)-3,floor(this.PL_joint[s][6].y)-2,5,2,color);
            else if (weap_range==-1) drawButton(floor(this.PL_joint[s][6].x)-2,floor(this.PL_joint[s][6].y)-2,3,2,color);
            else if (weap_range==0)  drawButton(floor(this.PL_joint[s][6].x)-1,floor(this.PL_joint[s][6].y)-3,2,2,color);
            else if (weap_range==1)  drawButton(floor(this.PL_joint[s][6].x)-1,floor(this.PL_joint[s][6].y)-2,3,2,color);
            else if (weap_range==2)  drawButton(floor(this.PL_joint[s][6].x)-2,floor(this.PL_joint[s][6].y)-2,5,2,color);
            else if (weap_range==3)  drawButton(floor(this.PL_joint[s][6].x)-2,floor(this.PL_joint[s][6].y)-2,6,2,color);
            else if (weap_range==4)  drawButton(floor(this.PL_joint[s][6].x)-2,floor(this.PL_joint[s][6].y)-2,7,2,color);

            drawButton(floor(this.PL_joint[s][6].x)-1,floor(this.PL_joint[s][6].y)-2,2,4,color);
        } else if (this.PL_class_ID[s]==7){
            var tip_size = 3;
            if (checkEff(Stickmen_Slots+s,Card_Big))
                tip_size = 5;
            var shifted_color = (color&0xFF0000)>>17<<16|(color&0x00FF00)>>9<<8|(color&0x0000FF)>>1;
            drawLine(this.PL_joint[s][5].x,this.PL_joint[s][5].y,this.PL_joint[s][11].x,this.PL_joint[s][11].y,shifted_color);
            drawLine(this.PL_joint[s][11].x,this.PL_joint[s][11].y,this.PL_joint[s][12].x,this.PL_joint[s][12].y,shifted_color);
            drawLine(this.PL_joint[s][12].x,this.PL_joint[s][12].y,this.PL_joint[s][13].x,this.PL_joint[s][13].y,shifted_color);
            drawLine(this.PL_joint[s][13].x,this.PL_joint[s][13].y,this.PL_joint[s][14].x,this.PL_joint[s][14].y,shifted_color);
            drawButton(floor(this.PL_joint[s][14].x)-1,floor(this.PL_joint[s][14].y)-1,tip_size,tip_size,color);
        } else if (this.PL_class_ID[s]==8){
            var rings,rings_out;
            if (DEX[s]<10)       rings = 1;
            else if (DEX[s]<30)  rings = 2;
            else if (DEX[s]<60)  rings = 3;
            else if (DEX[s]<100) rings = 4;
            else                 rings = 5;

            if (checkEff(Stickmen_Slots+s,Card_Rings))
                rings += 1;
            for (var r=0; r<rings; r++){
                if (this.PL_ring_thrown_status[s][r]!=0)
                    rings_out = r;
            }
            if (rings_out!=rings)
                dispItemCentered(Effect_Img,floor(this.PL_joint[s][0].x),floor(this.PL_joint[s][0].y)-5,7,3,33,0,7,3,color);

            for (var r=0; r<rings; r++){
                if (this.PL_ring_thrown_status[s][r]!=0)
                    dispItemCentered(Effect_Img,floor(this.PL_joint[s][15+r].x),floor(this.PL_joint[s][15+r].y),7,3,33,0,7,3,color);
            }
        }
        if (Sequence_Step!=40){
            var primary_aura;
            if (STR_Aura[s]+DEX_Aura[s] > 0){
                Display_Mode = 2;
                Display_Mode2 = 1;
                primary_aura = STR_Aura[s];
                if (DEX_Aura[s]>primary_aura)
                    primary_aura = DEX_Aura[s];
                if (MAG_Aura[s]>primary_aura)
                    primary_aura = MAG_Aura[s];
                color = 0xFF000000|0x0000FF*STR_Aura[s]/primary_aura<<16|0x0000FF*DEX_Aura[s]/primary_aura<<8|0x0000FF*MAG_Aura[s]/primary_aura; // aura color
                dispItemCentered(Effect_Img,floor(this.PL_joint[s][9].x+this.PL_joint[s][10].x)>>1,floor(this.PL_joint[s][9].y+this.PL_joint[s][10].y)>>1,20,12,12,0,20,12,color);
                Display_Mode = Display_Mode2 = 0;
            }
            if ((Sett_LP_Bar_Disp&1)>0 && LP_Current[s]>0){
                drawButton(floor(this.PL_joint[s][0].x)-6,floor(this.PL_joint[s][0].y)-6,13,2,0x990000);
                drawButton(floor(this.PL_joint[s][0].x)-6,floor(this.PL_joint[s][0].y)-6,floor(13*LP_Current[s]/LP_Max[s]),2,0x00CC00);
            }
            //MP Bar
            if (Reloading[s]) {
                var e = maxOf(getVal(Item_Inv[Stickmen_Slots+s],Weap_MP_Price),1);
                // Special case for gunners
                if (getVal(Item_Inv[Stickmen_Slots+s],Item_Class_ID) == 6) e = 100;
                drawButton(floor(this.PL_joint[s][0].x)-6,floor(this.PL_joint[s][0].y)-18,13,2,0x444400);
                drawButton(floor(this.PL_joint[s][0].x)-6,floor(this.PL_joint[s][0].y)-18,floor(13*(MP_Bar[s]/e)),2,0x0000FF);
            }
            if (Selected_Player==s && Game_Mode==0){
                if (Sett_PL_Symbol==0){
                    drawButton(floor(this.PL_joint[s][0].x)-1,floor(this.PL_joint[s][0].y)-8,3,3,0xFFFF00);
                } else if (Sett_PL_Symbol==1){
                    drawLine(floor(this.PL_joint[s][0].x)-3,floor(this.PL_joint[s][0].y)-14,floor(this.PL_joint[s][0].x)+3,floor(this.PL_joint[s][0].y)-14,0xFFFF00);
                    drawLine(floor(this.PL_joint[s][0].x)-3,floor(this.PL_joint[s][0].y)-14,floor(this.PL_joint[s][0].x)+0.5,floor(this.PL_joint[s][0].y)-7,0xFFFF00);
                    drawLine(floor(this.PL_joint[s][0].x)+3.5,floor(this.PL_joint[s][0].y)-14,floor(this.PL_joint[s][0].x)+0.5,floor(this.PL_joint[s][0].y)-7,0xFFFF00);
                }
            }
        }
    }
};

var Book_Indexer = [0,0,5,9,14,19,23,27,31,35,39,41,45,49,53,57,61,65,70,75,80,80,85,90,94,98,102,106,110,114,116,120,124,128,130,134,138,142,146,150,154,158,162,164,168,172,176,180,180,185,190,195,199,203,207,211,215,219,223,227,231,235,239,243,245,249,253,257,260,264,268,268,270,274,278,282,286,290,290,294,298,302,306,310,315,320,324,328,332,338,339]; // original name Pe[]
var EN_Lvl = 0;     // original name Qe
var EN_Species = 1; // original name bh
var EN_Size = 3;    // original name ch
var EN_LP = 6;      // original name lg
var Ph_Resist = 35; // Physical Resistance
var Fi_Resist = 36; // Fire Resistance
var Ic_Resist = 37; // Ice Resistance
var Th_Resist = 38; // Thunder Resistance
var Po_Resist = 39; // Poison Resistance
var Fr_Resist = 40; // Freeze Resistance
var En_Is_2nd_Att = 60; // original name Re
var EN_EXP = 61;    // original name ng
var En_Gold = 62;   // original name En_Gold
var En_Drop1 = 63;  // original name og
var En_DropRate1 = 64, En_DropRate2 = 66, En_DropRate3 = 68;
var EN_Info = [     // EN_Info original name: B[]
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Opening Cave       ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  mach punch 1,stone whip 1,White Stone 1
    [1 ,2 ,15 ,1,0xCCCCBB,0x554466,10    ,3    ,1,1 ,0xFFFFFF33,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,1   ,3   ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,1   ,3  ,40 ,188,40 ,19 ,80 ], // Gray Shield Bat
  //[1 ,0 ,1 ,1,0x33CC33,0x996633,10    ,2    ,1,1 ,0xFFFFFF33,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,1   ,3   ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,1   ,89 ,1  ,112,1  ,108,1  ], // Green Smiley Walker (drops edited)
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  iron sword 1,fire ring 1,Red Stone 1
    [2 ,0 ,1 ,1,0xFFFFCC,0x993311,20    ,2    ,1,1 ,0xFFFFFF33,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,2   ,3   ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,3   ,4  ,15 ,289,15 ,20 ,40 ], // White Smiley Walker
  //[2 ,0 ,1 ,1,0x33CCFF,0x996633,20    ,2    ,1,1 ,0xFFFFFF33,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,2   ,3   ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,3   ,96 ,1  ,80 ,1  ,24 ,1  ], // Cyan Smiley Walker (drops edited)
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  ,triple shot 1,staff of wood 1,Green Stone 1
    [3 ,0 ,2 ,1,0xFFCC66,0x993311,50    ,2    ,1,1 ,0xFFFFFF33,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,3   ,5   ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,10  ,5  ,60 ,58 ,40 ,21 ,70 ], // Yellow Smiley Walker 0
  //[3 ,0 ,2 ,1,0xCC0000,0x996633,50    ,2    ,1,1 ,0xFFFFFF33,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,3   ,5   ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,10  ,561,1  ,561,1  ,561,1  ], // Red Smiley Walker 2 (edited)
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   explosion 1,handgun 1,Blue Stone 1
    [4 ,7 ,3 ,1,0xFF9999,0x993311,40    ,4    ,0,2 ,0xFF808080,1,16,16,8 ,8 ,0  ,0  ,100 ,10,5 ,100,0,0,0  ,0,4   ,5   ,1 ,100 ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,15  ,6 ,15 ,76 ,15 ,22 ,40 ], // Pink X Fish
  //[4 ,0 ,3 ,1,0x0000FF,0x996633,40    ,4    ,0,2 ,0xFF808080,1,16,16,8 ,8 ,0  ,0  ,100 ,10,5 ,100,0,0,0  ,0,4   ,5   ,1 ,100 ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,15  ,561,1  ,561,1  ,561,1  ], // Blue X Walker (edited)
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,triple shot 1,mach punch 1,Iron Medal 1
    [5 ,2 ,15 ,2,0xA0A0A0,0x554466,500   ,3    ,0,2 ,0xFF808080,1,8 ,8 ,8 ,8 ,0  ,20  ,100 ,10,0 ,100,0,0,0  ,0,1   ,3   ,10,10  ,100 ,20  ,120 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,100 ,0  ,3  ,0  ,5  ,48 ,10 ], // White Boss Shield Bat
    //[5 ,0 ,2 ,2,0x808080,0x996633,1E7   ,0    ,0,2 ,0xFF808080,1,8 ,8 ,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,1   ,3   ,10,10  ,10 ,15  ,120 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,100 ,9  ,3  ,7  ,5  ,48 ,10 ], // Dummy Boss
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Jade Tropics ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    poison arrow 1,___,Black Stone 1
    [5 ,1 ,14 ,1,0xF08020,0x993311,50    ,3    ,1,4 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,20  ,40,0 ,100,0,0,0  ,0,3   ,4   ,1 ,5   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,10  ,FireShard ,40 ,ThunderShard  ,40  ,23 ,80 ], // Green Skull Snake 5
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,  ice 1,___,Red Crystal 1
    [6 ,8 ,9 ,1,0x996633,0xFFCCCC,90    ,6    ,0,13 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,400  ,40,1 ,100,0,0,0  ,0,6   ,8   ,3 ,10  ,20 ,1000  ,120  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,30  ,PhysicalShard ,15 ,IceShard ,15 ,25 ,30 ], // Red Skull Snake (GL1) 7
    
    [7 ,1 ,4 ,2,0x338833,0x223333,200    ,3    ,1,4 ,0xFFFFFFFF,1,32,32,16 ,16 ,0  ,0  ,20  ,40,0 ,100,0,0,0  ,0,9   ,16   ,1 ,5   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,20  ,PoisonShard ,20 ,PhysicalShard  ,20  ,24 ,60 ], // Orange Vampire Snake 6
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , fire sword 1,submachine-gun 1,Yellow Crystal 1
    //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   thunder glove 1,___,Quick's Card 1
    [8 ,1 ,4 ,2,0x33CC33,0x339933,200   ,3    ,1,4 ,0xFFFFFFFF,1,24,24,12,12,0  ,0  ,20  ,40,0 ,100,0,0,0  ,0,8   ,12  ,1 ,5   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,30  ,FireShard ,15 ,ThunderShard  ,15  ,39 ,50 ], // Green Boss Skull Snake 8
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Sage Grove ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,fire glove 1,___,Silver Crystal 1
    [8 ,2 ,15,1,0x99AA00,0x996633,60    ,3    ,1,1 ,0xFF99AA00,1,16,16,8 ,8 ,0  ,0  ,50  ,30,0 ,100,0,0,0  ,0,3   ,4   ,1 ,10  ,50 ,20  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,30  ,PoisonShard ,30 ,IceShard  ,30  ,26 ,70 ], // White Skull Bat (GL2) 9
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , , double arrow 1,shotgun 1,Black Crystal 1
    [8 ,0 ,4 ,1,0xFFCC00,0x996633,110   ,4    ,1,9 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,150  ,30,3 ,100,0,0,0  ,0,2   ,6   ,2 ,100  ,50 ,20  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,50  ,PhysicalShard ,20 ,ThunderShard  ,20  ,23 ,40 ], // Orange Skull Bat (GL2) 12
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   thunder sword 1,___,Long Sword's Card 1
    [9 ,8 ,9 ,1,0x00FF90,0x884444,120   ,9006 ,0,13,0xFF00FF90,1,16,16,8 ,8 ,20  ,30 ,400,40,1 ,101,0,0,0  ,0,8  ,12  ,4 ,5  ,20 ,240   ,120  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,30  ,PoisonShard ,30 ,FreezeShard ,40 ,28 ,80 ], // Orange Smiley Walker (GL2) 10
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    , fire 1,___,White Stone 1
    [11,5 ,3 ,1,0xA066FF,0x996633,110   ,4    ,0,2 ,0xFF808080,1,16,16,8 ,8 ,0  ,0  ,150 ,10,4 ,100,0,0,0  ,0,6   ,8   ,1 ,120 ,50 ,20  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,40  ,IceShard ,20 ,PhysicalShard  ,20  ,19 ,40 ], // Purple X Walker 11
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   thunder sword 1,___,Black Stone 1
    [12,0 ,4 ,2,0x808080,0x996633,500   ,4    ,1,9 ,0xFF808080,1,16,16,8 ,8 ,0  ,50  ,150 ,30,-3 ,100,0,1,0  ,0,5   ,6   ,12,150  ,50 ,15  ,100 ,0,1   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,200 ,ThunderShard ,5  ,PhysicalShard  ,5  ,40 ,10 ], // Grey Boss Skull Bat 13
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Moss Hovel ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,long staff 1,___,Ruby 1 ,   ],
    [10,0,4,1,14736593,10040081,140,4,1,9,4292269782,1,16,16,8,8,0,0,150,50,5,100,0,0,0,0,3,5,3,100,100,30,90,0,0,0,0,0,0,0,0,0,0,0,4294967295,1,16,16,16,16,0,0,0,100,0,0,0,0,0,0,0,100,50,0,0,0,0,0,0], // White Skull Walker 14
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Sapphire 1
    [10,18,8,1,0x88FF00,10040081,120,3,0,13,4292804550,1,16,16,8,8,0,0,125,50,1,100,0,0,5,0,4,8,1,5,100,20,150,0,0,0,0,0,0,20,0,0,0,0,4294967295,1,16,16,16,16,0,0,0,100,0,0,0,0,0,0,0,100,40,0,0,0,0,0,0], // Green Gel Tree 15
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    thunder ring 1,___,Topaz 1    ],
    [11,2 ,15,1,0xFFCC00,0x993311,140   ,3    ,1,4 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,50  ,30,0 ,100,0,0,0  ,0,6   ,8   ,2 ,10  ,50 ,20  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,150  ,50  ,291,20 ,0  ,0  ,35 ,80 ], // Green Shield Bat 16
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     , fire whip 1,___,Emerald 1  ],
    [13,5,8,1,65535,10040081,260,6,0,13,4291297021,1,16,16,8,8,0,0,200,50,2,100,0,1,5,0,6,10,2,10,80,20,180,0,0,0,0,20,0,0,0,0,0,0,4294967295,1,16,16,16,16,0,0,0,100,0,0,0,0,0,0,0,100,60,0,0,0,0,0,0], //Blue Gel Tree 17
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , , Catapult's Card 1,___,Ring's Card 1
  [14,5 ,8 ,3,16720384,10027008,800,5,1,2 ,4294910464,1,16,16,8 ,8 ,0  ,25,150 ,30,1,100,0,0,0  ,0,12   ,16   ,3,20  ,10,200 ,150 ,0,0   ,0    ,20   ,0   ,0   ,0   ,80 ,0,0,0 ,4294967295,1,16,16,16,16,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], // Red Boss Gel Tree 18
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Grassland 4 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Peridot 1
    [10,1 ,5 ,1,0x3399FF,0x3366CC,180   ,3    ,1,11,0xFF99CCFF,1,16,16,8 ,8 ,0  ,0  ,20  ,40,0 ,100,0,0,0  ,0,4   ,5   ,1 ,5   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,40  ,0  ,0  ,0  ,0  ,37 ,100], // Blue Fairy Snake 19
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    , staff of thunder 1,iron whip 1,Aquamarine 1
    [10,0 ,3 ,1,0x808080,0x996633,140   ,4    ,0,12,0xFFFFFFFF,1,8 ,8 ,8 ,8 ,0  ,0  ,150 ,10,5 ,100,0,0,0  ,0,3   ,6   ,2 ,100 ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,50  ,62 ,10 ,191,10 ,34 ,40 ], // Grey X Walker (GL4) 20
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Garnet 1,
    [12,1 ,5 ,1,0xCC3333,0x990000,220   ,3    ,1,11,0xFFFF6666,1,16,16,8 ,8 ,0  ,0  ,200 ,40,0 ,100,0,0,0  ,0,3   ,4   ,1 ,5   ,20 ,100 ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,60  ,0  ,0  ,0  ,0  ,32 ,30 ], // Red Fairy Snake 21
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Pierce's Card 1
    [14,1 ,5 ,2,0x3399FF,0x3366CC,330   ,3    ,1,11,0xFF99CCFF,1,32,32,16,16,0  ,0  ,100 ,40,0 ,100,0,0,0  ,0,9   ,15  ,1 ,10  ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,200 ,0  ,0  ,0  ,0  ,42 ,50 ], // Blue Boss Fairy Snake 22
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Grassland 5 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  poison glove 1,rifle 1,___  ,   ],
    [11,5 ,2 ,1,0x33AA33,0x996633,200   ,4    ,0,13,0xFF339933,1,16,16,8 ,8 ,0  ,0  ,150 ,10,5 ,100,0,0,0  ,0,1   ,2   ,2 ,100 ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,50  ,54 ,40 ,80 ,40 ,0  ,0  ], // Green Smiley Tree 23
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     , ice sword 1,___,Purple Crystal 1
    [11,1 ,4 ,1,0xCC00CC,0x996633,180   ,3    ,1,4 ,0xFFFFCCFF,1,16,16,8 ,8 ,0  ,0  ,20  ,40,0 ,100,0,0,0  ,0,8   ,12  ,1 ,5   ,20 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,50  ,55 ,30 ,0  ,0  ,27 ,50 ], // Pink Skull Snake 24
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  fire arrow 1,___,___,   ,   ,   ],
    [13,5 ,2 ,1,0xEE9933,0x996633,250   ,3    ,1,5 ,0xFFFF6010,1,16,32,16,16,0  ,0  ,40  ,20,-1,99 ,0,0,0  ,0,1   ,2   ,1 ,15  ,20 ,200 ,80  ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,70  ,56 ,15 ,0  ,0  ,0  ,0  ], // Orange Smiley Tree 25
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,   thunder 1,___,Guide's Card 1
    [15,5 ,2 ,2,0x990000,0x996633,1000  ,4    ,0,13,0xFF993333,1,16,16,8 ,8 ,0  ,0  ,200 ,10,5 ,100,0,0,0  ,0,2   ,4   ,9 ,150 ,50 ,20  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,300 ,57 ,15 ,0  ,0  ,43 ,30 ], // Red Boss Smiley Tree 26
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Grassland 6 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    ice ring 1,___,___,   ,   ,   ],
    [12,5 ,2 ,1,0x808080,0x996633,220   ,4    ,0,12,0xFF996633,1,16,16,8 ,8 ,0  ,0  ,150 ,10,5 ,100,0,0,0  ,0,2   ,5   ,1 ,100 ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,50  ,293,30 ,0  ,0  ,0  ,0  ], // Green Smiley Tree (GL6) 27
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,thunder whip 1,___,___,   ,   ,   ],
    [12,2 ,5 ,1,0x33AA33,0x996633,160   ,3    ,1,9 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,50  ,30,0 ,100,0,0,0  ,0,6   ,8   ,3 ,10  ,50 ,20  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,50  ,192,20 ,0  ,0  ,0  ,0  ], // Green Fairy Bat 28
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,staff of ice 1,___,___,   ,   ,   ],
    [14,2 ,5 ,1,0xEE9933,0x996633,210   ,3    ,1,5 ,0xFFFF6010,1,16,32,16,16,0  ,0  ,40  ,20,-1,99 ,0,0,0  ,0,1   ,2   ,1 ,15  ,20 ,200 ,60  ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,80  ,63 ,20 ,0  ,0  ,0  ,0  ], // Orange Fairy Bat 29
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,    ___,___,Bullet's Card 1
    [16,5 ,2 ,3,0x660099,0x996633,1600  ,4    ,0,12,0xFF660099,1,16,16,8 ,8 ,0  ,0  ,200 ,10,5 ,100,0,0,0  ,0,10  ,12  ,3 ,100 ,50 ,20  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,300 ,0  ,0  ,0  ,0  ,44 ,10 ], // Purple Boss Smiley Tree 30
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Grassland 7 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,freeze glove 2,___,___,   ,   ,   ],
    [13,5 ,2 ,1,0x808080,0x996633,240   ,4    ,0,13,0xFF996633,1,16,16,8 ,8 ,0  ,0  ,150 ,10,5 ,100,0,0,0  ,0,1   ,2   ,3 ,100 ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,50  ,64 ,20 ,0  ,0  ,0  ,0  ], // Grey Smiley Tree (GL7) 31
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  long sword 2,___,___,   ,   ,   ],
    [12,6 ,1 ,1,0x33AA33,0x996633,120   ,2    ,1,1 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,10  ,20,0 ,100,0,0,0  ,0,8   ,12  ,1 ,1   ,100,200 ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,50  ,65 ,20 ,0  ,0  ,0  ,0  ], // Green Smiley Wheel 32
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  triple arrow 2,freeze 2,___ ,   ],
    [14,6 ,1 ,1,0xCCCC33,0x996633,180   ,1    ,0,14,0xFFFFFF66,1,32,32,32,32,0  ,0  ,10  ,10,0 ,100,0,0,0  ,1,8   ,12  ,1 ,0   ,100,200 ,15  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,80  ,66 ,20 ,67 ,20 ,0  ,0  ], // Yellow Smiley Wheel 33
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,   grenade 2,___,Explosion's Card 1
    [16,6 ,2 ,2,0xEE9933,0x996633,1200  ,1    ,0,5 ,0xFFFF6010,2,32,32,32,16,0  ,0  ,200 ,20,50,100,0,1,0  ,1,1   ,2   ,1 ,0   ,20 ,200 ,150 ,1,50  ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,400 ,81 ,5  ,0  ,0  ,45 ,10 ], // Orange Boss Smiley Wheel 34
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Castle Gate ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    needle glove 2,___,Diamond 1  ],
    [14,4 ,4 ,1,0xCCCCCC,0x996633,200   ,2    ,1,1 ,0xFFFF4040,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,6   ,8   ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,60  ,68 ,50 ,0  ,0  ,38 ,100], // White Skull Stickman (CG) 35
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    quad arrow 2,laser gun 2,___  ],
    [15,4 ,4 ,1,0xCC0000,0x996633,240   ,4    ,0,2 ,0xFF808080,1,8 ,8 ,8 ,8 ,0  ,0  ,300 ,10,3 ,100,0,0,0  ,0,1   ,3   ,4 ,150 ,50 ,15  ,150 ,1,0   ,0    ,0   ,0   ,0   ,0   ,0  ,1,0,5 ,0x80FF6010,1,16,48 ,12,36 ,50  ,20,0 ,100,0,0,0,1 ,2   ,1 ,0,200  ,90  ,70 ,20 ,82 ,20 ,0  ,0  ], // Red Skull Stickman (CG) 36
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  lightsaber 2,___,___,   ,   ,   ],
    [14,6 ,1 ,1,0xEE9933,0x996633,160   ,1    ,0,5 ,0xFFFF6010,2,32,32,32,16,0  ,0  ,100 ,20,50,100,0,1,0  ,1,1   ,2   ,1 ,0   ,100,200 ,150 ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,60  ,69 ,20 ,0  ,0  ,0  ,0  ], // Orange Smiley Wheel 37
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,  blizzard 2,___,Critical's Card 1
    [16,4 ,4 ,2,0xCCCCCC,0x996633,2E3   ,5    ,1,1 ,0xFFFF4040,1,40,16,40,8 ,0  ,0  ,100 ,20,5 ,99 ,0,0,0  ,0,10  ,20  ,1 ,0   ,50 ,300 ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,500 ,71 ,3  ,0  ,0  ,47 ,10 ], // White Boss Skull Stickman (CG) 38
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Castle ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  Vampire's Card 1,___,ONIGIRI's Card 1
    [20,4 ,4 ,3,0xCCCCCC,0x996633,5E3   ,5    ,1,1 ,0xFFFF4040,1,48,16,48,8 ,0  ,0  ,100 ,20,5 ,99 ,0,0,0  ,0,20  ,40  ,1 ,0   ,50 ,300 ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,1,1000 ,1000,29 ,3  ,0  ,0  ,30 ,20 ], // Castle Boss (Pellet) 39
    [0 ,0 ,0 ,0,0x000000,0x000000,0     ,4    ,0,2 ,0xFF808080,1,8 ,8 ,8 ,8 ,0  ,0  ,300 ,10,3 ,100,0,0,0  ,0,3   ,4   ,12,200 ,50 ,15  ,200 ,1,0   ,0    ,0   ,0   ,0   ,0   ,0  ,1,0,5 ,0x80FF6010,1,16,48 ,12,36 ,50  ,20,0 ,100,0,0,0,1 ,2   ,1 ,0,0    ,0   ,0  ,0  ,0  ,0  ,0  ,0  ], // Castle Boss (Two Arrow) 40
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hill Country 1       ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,  ___,onigiri,Poison Ward 1
    [10,0 ,1 ,2,0x669900,0x996633,900   ,2    ,1,1 ,0xFFFF4040,1,32,48,48,32,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,10  ,20  ,1 ,1   ,50 ,30  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,30  ,0  ,0  ,2  ,1  ,244,20 ], // Green Big Smiley Walker 41
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,___,___,___,   ,   ],
    [10,0 ,1 ,1,0x336600,0x663300,90    ,2    ,1,1 ,0xFFFFFF33,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,3   ,4   ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,30  ,0  ,0  ,0  ,0  ,0  ,0  ], // Green Smiley Walker (HC1) 42
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   long ring 1,___,___,   ,   ,   ],
    [11,0 ,3 ,1,0x996600,0x663300,120   ,4    ,0,2 ,0xFF666666,1,16,16,8 ,8 ,0  ,0  ,150 ,10,5 ,100,0,0,0  ,0,6   ,8   ,1 ,100 ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,40  ,292,20 ,0  ,0  ,0  ,0  ], // Brown X Walker 43
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  Thunder Charm 1,___,Big's Card 1,
    [13,0 ,3 ,2,0xCCCCCC,0x666666,900   ,4    ,0,2 ,0xFF999999,1,32,32,16,16,0  ,0  ,150 ,20,5 ,100,0,0,0  ,1,10  ,20  ,1 ,120 ,10 ,15  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,200 ,285,10 ,0  ,0  ,341,10 ], // White Boss X Walker (HC1) 44
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hill Country 2       ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,  ___,onigiri,Ice Ward 1
    [11,2 ,4 ,2,0x6666CC,0xCC9933,600   ,3    ,1,11,0xFF333399,1,32,32,16,16,0  ,0  ,100 ,40,0 ,100,0,0,0  ,0,8   ,16  ,1 ,10  ,50 ,30  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,40  ,0  ,0  ,2  ,1  ,243,30 ], // Blue Big Skull Bat 45
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  thron ring 2,___,___,   ,   ,   ],
    [11,2 ,4 ,1,0x6666CC,0xCC9933,90    ,3    ,1,11,0xFF333399,1,16,16,8 ,8 ,0  ,0  ,60  ,40,0 ,100,0,0,0  ,0,3   ,4   ,1 ,10  ,50 ,20  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,40  ,294,20 ,0  ,0  ,0  ,0  ], // Blue Skull Bat (HC2) 46
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  power ring 2,___,___,   ,   ,   ],
    [12,5 ,4 ,1,0x669933,0x996633,230   ,3    ,1,9 ,0xFFCCFFCC,1,16,16,8 ,8 ,0  ,0  ,60  ,30,0 ,100,0,0,0  ,0,3   ,4   ,2 ,10  ,50 ,20  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,40  ,295,20 ,0  ,0  ,0  ,0  ], // Green Skull Tree 47
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     Fire Charm 1,___,Kcockback's Card 1
    [14,2 ,4 ,2,0xFF6600,0xCC9933,900   ,3    ,1,11,0xFFCC6600,1,16,16,8 ,8 ,0  ,0  ,150 ,40,0 ,100,0,0,0  ,0,6   ,8   ,12,10  ,50 ,15  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,200 ,277,10 ,0  ,0  ,389,10 ], // Orange Boss Skull Bat 48
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hill Country 3       ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  battle staff 2,onigiri,___
    [12,1 ,1 ,2,0x33CC33,0x996633,900   ,3    ,1,1 ,0xFFFF4040,1,16,32,16,16,0  ,0  ,40  ,40,0 ,100,0,0,0  ,0,15  ,25  ,1 ,10  ,50 ,30  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,50  ,115,10 ,2  ,1  ,0  ,0  ], // Green Big Smiley Snake 49
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,  ___,onigiri,Freeze Ward 1
    [12,1 ,5 ,2,0x339933,0x663300,900   ,3    ,1,11,0xFF33CC33,1,16,16,8 ,8 ,0  ,0  ,80  ,40,0 ,100,0,0,0  ,0,5   ,9   ,3 ,10  ,50 ,30  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,50  ,0  ,0  ,2  ,1  ,245,15 ], // Green Big Fairy Snake 50
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    ice whip 2,___,___,   ,   ,   ],
    [13,5 ,4 ,1,0x990066,0x996633,240   ,4    ,0,13,0xFF990066,1,16,16,8 ,8 ,0  ,0  ,120 ,10,5 ,100,0,0,0  ,0,3   ,4   ,2 ,100 ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,40  ,193,20 ,0  ,0  ,0  ,0  ], // Pink Skull Tree (HC3) 51
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Berserk Card 1
    [15,1 ,2 ,2,0xCCCCCC,0x996633,1100  ,3    ,1,4 ,0xFFFFFFFF,1,32,32,16,16,0  ,0  ,150 ,40,0 ,100,0,0,0  ,0,5   ,15  ,1 ,30  ,10 ,15  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,200 ,0  ,0  ,0  ,0  ,46 ,10 ], // White Boss Smiley Snake 52
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Lake,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Gold Medal 1
    [15,7 ,4 ,1,0xCC9933,0x442200,150   ,3    ,1,11,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,40  ,10,0 ,100,0,0,0  ,0,6   ,8   ,1 ,10  ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,60  ,0  ,0  ,0  ,0  ,53 ,200], // Tan Skull Fish 53
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Silver Medal 1
    [16,5 ,4 ,1,0x990066,0x996633,300   ,3    ,0,12,0xFFCC3399,1,16,16,8 ,8 ,0  ,0  ,120 ,10,0 ,100,0,0,0  ,0,5   ,7   ,1 ,10  ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,60  ,0  ,0  ,0  ,0  ,52 ,100], // Pink Skull Tree (Lake) 54
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Bronze Medal 1
    [17,7 ,2 ,1,0x339933,0x003300,300   ,3    ,1,11,0xFF33FF33,1,16,16,8 ,8 ,0  ,0  ,80  ,10,0 ,100,0,0,0  ,0,8   ,12  ,1 ,10  ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,80  ,0  ,0  ,0  ,0  ,51 ,100], // Green Smiley Fish 55
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,Iron Medal 1,___,Reflection Card 1
    [18,7 ,2 ,2,0xCCCCCC,0xCCCCCC,3E3   ,3    ,1,4 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,150 ,40,0 ,100,0,0,50 ,0,3   ,5   ,5 ,20  ,80 ,100 ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,700 ,49 ,10 ,0  ,0  ,406,10 ], // White Boss Smiley Fish 56
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Forest 1  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     spark glove 2,___,White Stone 2
    [15,1 ,4 ,1,0xCC9933,0x442200,240   ,3    ,1,4 ,0xFFCC9933,1,16,16,8 ,8 ,0  ,0  ,40  ,60,0 ,100,0,0,0  ,0,8   ,9   ,1 ,10  ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,50  ,72 ,20 ,0  ,0  ,84 ,60 ], // Tan Skull Snake 57
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,   volcano 2,___,Green Stone 2
    [16,8 ,6 ,1,0x336600,0x999999,260   ,3    ,0,6 ,0xFF336600,1,16,16,8 ,8 ,0  ,0  ,50  ,20,0 ,95 ,0,0,0  ,0,1   ,1   ,1 ,5   ,10 ,1000,500 ,4,10  ,0    ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,150  ,80  ,75 ,40 ,0  ,0  ,86 ,80 ], // Green Cap Mushroom 58
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     flame sword 2,___,Red Stone 2],
    [17,1 ,4 ,1,0xCC3333,0x442200,120   ,3    ,1,4 ,0xFFCC3333,1,16,16,8 ,8 ,0  ,0  ,80  ,60,0 ,100,0,0,0  ,0,12  ,15  ,1 ,10  ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,150  ,50  ,73 ,20 ,0  ,0  ,85 ,60 ], // Red Skull Snake (F1) 59
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    oct arrow 2,bazooka 2,Quick's Card 2
    [18,8 ,6 ,2,0x669900,0x999999,1000  ,4    ,0,12,0xFF669900,1,16,16,8 ,8 ,0  ,0  ,150 ,20,5 ,100,0,0,0  ,0,3   ,5   ,3 ,100 ,10 ,1000,500 ,0,0   ,0    ,0   ,0   ,0   ,100 ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,300 ,74 ,15 ,83 ,15 ,104,30 ], // Green Boss Cap Mushroom 60
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Forest 2  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     poison whip 2,___,Black Stone 2
    [16,2 ,4 ,1,0xCC9933,0x442200,180   ,3    ,1,9 ,0xFFCC9933,1,16,16,8 ,8 ,0  ,0  ,30  ,30,0 ,100,0,0,0  ,0,4   ,5   ,2 ,10  ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,50  ,195,20 ,0  ,0  ,88 ,60 ], // Tan Skull Bat 61
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  staff of light 1,___,Blue Stone 2,
    [17,8 ,6 ,1,0x660099,0x999999,280   ,3    ,0,6 ,0xFF660099,1,16,16,8 ,8 ,0  ,0  ,50  ,20,0 ,95 ,0,0,0  ,0,1   ,1   ,1 ,5   ,10 ,1000,500 ,4,15  ,0    ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,150  ,80  ,141,20 ,0  ,0  ,87 ,60 ], // Purple Cap Mushroom 62
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , , staff of fire 2,quick ring 2,___ ],
    [18,2 ,4 ,1,0xCC3333,0x442200,220   ,3    ,1,9 ,0xFFCC3333,1,16,16,8 ,8 ,0  ,0  ,50  ,30,0 ,100,0,0,0  ,0,3   ,4   ,4 ,15  ,50 ,20  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,150  ,50  ,126,20 ,296,20 ,0  ,0  ], // Red Skull Bat 63
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,   staff of poison 2,Long Sword's Card 2,Ring's Card 2
    [19,8 ,6 ,3,0x9966CC,0x999999,3500  ,4    ,0,12,0xFF006600,1,16,16,8 ,8 ,0  ,0  ,150 ,20,5 ,100,0,0,0  ,0,1   ,1   ,1 ,120 ,25 ,1000,500 ,4,100 ,0    ,0   ,0   ,0   ,100 ,80 ,3,0,6 ,0xFF006600,1,16,16 ,8 ,8  ,50  ,20,0 ,96 ,1,1,0,1 ,1   ,5 ,0,1000 ,800 ,128,5  ,105,10 ,460,10 ], // Purple Boss Cap Mushroom 64
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Cavern 1  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   thunder storm 2,___,Black Crystal 2
    [17,0 ,2 ,1,0xCC6600,0x999999,300   ,2    ,1,1 ,0xFFCC6600,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,10  ,15  ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,40  ,119,20 ,0  ,0  ,93 ,60 ], // Orange Smiley Walker (CV1) 65
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   double poison 2,___,Peridot 2  ],
    [18,1 ,6 ,1,0x99FF33,0x999999,240   ,3    ,1,4 ,0xFF99FF33,1,16,16,8 ,8 ,0  ,0  ,40  ,40,0 ,100,0,0,0  ,0,9   ,10  ,1 ,10  ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,40  ,118,20 ,0  ,0  ,102,60 ], // Green Cap Snake 66
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    homing laser 2,___,Red Crystal 2
    [19,1 ,6 ,1,0xFF0000,0x999999,300   ,3    ,1,9 ,0xFFFF0000,1,16,16,8 ,8 ,0  ,0  ,80  ,40,0 ,100,0,0,0  ,0,4   ,5   ,1 ,15  ,50 ,30  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,90  ,120,15 ,0  ,0  ,89 ,50 ], // Red Cap Snake 67
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,___,Diamond 2,Catapult's Card 2
    [20,0 ,2 ,2,0xFFFFFF,0x999999,4400  ,3    ,0,13,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,150 ,10,0 ,100,0,1,0  ,0,4   ,5   ,10,10  ,15 ,15  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,700 ,0  ,0  ,103,10 ,106,10 ], // White Boss Smiley Walker 68
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,  ___,Topaz 2,Bronze Medal 2
    [20,7 ,4 ,1,0xFFFF00,0xCCCC00,77    ,1    ,0,14,0xFFFFFF00,1,32,32,32,32,0  ,0  ,10  ,10,0 ,100,0,0,0  ,1,1   ,9   ,1 ,0   ,100,200 ,20  ,0,0   ,1000 ,100 ,100 ,100 ,100 ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,777 ,0  ,0  ,100,10 ,112,10 ], // Yellow Skull Fish 69
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Cavern 2  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    frozen sword 2,___,Purple Crystal 2
    [18,2 ,4 ,1,0x6600FF,0x666699,240   ,3    ,1,4 ,0xFF6600FF,1,16,16,8 ,8 ,0  ,0  ,20  ,40,0 ,100,0,0,0  ,0,8   ,10  ,1 ,5   ,50 ,30  ,30  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,50  ,117,20 ,0  ,0  ,92 ,60 ], // Blue Skull Bat (CV2) 70
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     sonic punch 2,___,Sapphire 2
    [19,2 ,4 ,1,0xCC00FF,0x996699,240   ,3    ,1,9 ,0xFFCC00FF,1,16,16,8 ,8 ,0  ,0  ,40  ,10,0 ,100,0,0,0  ,0,4   ,5   ,2 ,10  ,50 ,30  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,50  ,116,20 ,0  ,0  ,98 ,60 ], // Purple Skull Bat 71
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    ___,Yellow Crystal 2,Aquamarine 2
    [20,2 ,5 ,1,0xFF0099,0xCC9999,280   ,3    ,1,11,0xFFFF0099,1,16,16,8 ,8 ,0  ,0  ,80  ,10,0 ,100,0,0,0  ,0,2   ,4   ,1 ,15  ,50 ,30  ,120 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,100 ,0  ,0  ,90 ,60 ,99 ,60 ], // Pink Fairy Bat 72
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  Thunder Charm 2,___,Pierce's Card 2
    [21,2 ,4 ,2,0xFFFFFF,0x999999,4E3   ,3    ,1,9 ,0xFFFFFFFF,1,16,16,8 ,8 ,20 ,0  ,150 ,10,0 ,100,0,0,0  ,0,4   ,5   ,10,10  ,15 ,15  ,90  ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,700 ,287,10 ,0  ,0  ,107,10 ], // White Boss Skull Bat 73
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,  ___,Topaz 2,Silver Medal 2
    [20,7 ,2 ,1,0xFFFF00,0xCCCC00,77    ,1    ,0,14,0xFFFFFF00,1,32,32,32,32,0  ,0  ,10  ,10,0 ,100,0,0,0  ,1,1   ,9   ,1 ,0   ,100,200 ,20  ,0,0   ,1000 ,100 ,100 ,100 ,100 ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,777 ,0  ,0  ,100,10 ,113,10 ], // Yellow Smiley Fish 74
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Cavern 3  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , , lightning staff 2,___,Silver Crystal 2
    [19,4 ,4 ,1,0xCC9900,0xCCCC99,300   ,2    ,1,1 ,0xFFFF4040,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,10  ,15  ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,60  ,127,20 ,0  ,0  ,91 ,60 ], // Yellow Skull Stickman 75
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,thorn whip 2,___,Garnet 2   ],
    [19,2 ,4 ,1,0xCC6600,0xCC9966,240   ,3    ,1,9 ,0xFFCC6600,1,16,16,8 ,8 ,0  ,0  ,40  ,10,0 ,100,0,0,0  ,0,3   ,4   ,3 ,10  ,50 ,30  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,60  ,194,20 ,0  ,0  ,97 ,60 ], // Orange Skull Bat (CV3) 76
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  explosion whip 2,___,Ruby 2 ,   ],
    [21,4 ,4 ,1,0xCC3300,0xCC9999,300   ,3    ,1,5 ,0xFFFF6010,1,16,32,16,16,0  ,0  ,25  ,20,-1,99 ,0,1,0  ,0,2   ,3   ,1 ,10  ,20 ,200 ,40  ,1,80  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,100 ,196,20 ,0  ,0  ,96 ,60 ], // Orange Skull Stickman 77
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,charge ring 2,Fire Charm 2,Guide's Card 2
    [22,4 ,4 ,2,0xCC3300,0xCC9999,1000  ,3    ,1,5 ,0xFFFF6010,1,16,32,16,16,0  ,0  ,40  ,20,-1,99 ,0,1,0  ,0,4   ,5   ,1 ,15  ,20 ,200 ,80  ,1,80  ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,150 ,297,20 ,279,40 ,108,40 ], // Orange Boss Skull Stickman 78
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,  ___,Topaz 2,Gold Medal 2
    [20,7 ,5 ,1,0xFFFF00,0xCCCC00,77    ,1    ,0,14,0xFFFFFF00,1,32,32,32,32,0  ,0  ,10  ,10,0 ,100,0,0,0  ,1,1   ,9   ,1 ,0   ,100,200 ,20  ,0,0   ,1000 ,100 ,100 ,100 ,100 ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,777 ,0  ,0  ,100,10 ,114,10 ], // Yellow Fairy Fish 79
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Seaside 1 , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Ememrald 2
    [21,0 ,7 ,1,0x33CC33,0x996633,300   ,2    ,1,11,0xFF33CC33,1,16,16,8 ,8 ,0  ,0  ,40  ,10,0 ,100,0,0,0  ,0,10  ,15  ,1 ,1   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,80  ,0  ,0  ,0  ,0  ,101,60 ], // Green Roundhead Walker 80
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     beretta 3,___,___,   ,   ,   ],
    [22,0 ,7 ,1,0x33CCFF,0x996633,300   ,2    ,1,11,0xFF33CCFF,1,16,16,8 ,8 ,0  ,0  ,40  ,10,0 ,100,0,0,0  ,0,10  ,20  ,1 ,1   ,50 ,20  ,40  ,0,0   ,3    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,80  ,125,20 ,0  ,0  ,0  ,0  ], // Cyan Roundhead Walker 81
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , , stone chain 3,___,___,   ,   ,   ],
    [23,0 ,7 ,1,0xCC0000,0x996633,600   ,4    ,1,12,0xFFFF6010,1,16,16,8 ,8 ,0  ,0  ,150 ,10,5 ,100,0,0,0  ,0,5   ,15  ,1 ,80  ,50 ,30  ,120 ,1,0   ,0    ,50  ,0   ,0   ,0   ,0  ,1,0,6 ,0x80FF6010,1,32,32 ,16,16 ,10  ,20,0 ,100,0,0,1,5 ,15  ,1 ,0,400  ,120 ,197,10 ,0  ,0  ,0  ,0  ], // Red Roundhead Walker 82
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  long wood staff 3,___,___,   ,   ,   ],
    [22,5 ,7 ,1,0x0000FF,0x996633,400   ,3    ,1,13,0xFF663300,1,16,16,8 ,8 ,0  ,0  ,80  ,10,0 ,100,0,0,0  ,0,8   ,12  ,1 ,10  ,50 ,30  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,90  ,129,20 ,0  ,0  ,0  ,0  ], // Blue Roundhead Tree 83
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,  Big Card 2,___,Critical's Card 2
    [24,0 ,7 ,3,0x808080,0x996633,4800  ,3    ,1,3 ,0xFF808080,1,16,32,16,16,0  ,0  ,150 ,20,5 ,100,0,0,0  ,0,8   ,15  ,3 ,100 ,30 ,200 ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,900 ,111,10 ,0  ,0  ,342,10 ], // Grey Boss Roundhead Walker 84
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Seaside 2 , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  thunder knuckle 3,___,___,   ,   ,   ],
    [22,1 ,7 ,1,0xCCCCFF,0x996633,330   ,3    ,1,4 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,20  ,20,0 ,100,0,0,0  ,0,10  ,15  ,1 ,5   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,80  ,121,20 ,0  ,0  ,0  ,0  ], // White Roundhead Snake (S2) 85
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     , sabel 3,___,___,   ,   ,   ],
    [23,1 ,7 ,1,0x990000,0x996633,660   ,3    ,1,4 ,0xFF990000,1,16,32,16,16,0  ,0  ,20  ,20,0 ,100,0,0,0  ,0,20  ,30  ,1 ,5   ,50 ,30  ,40  ,0,0   ,3    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,120 ,122,10 ,0  ,0  ,0  ,0  ], // Red Roundhead Snake 86
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  quint shot 3,___,___,   ,   ,   ],
    [22,2 ,7 ,1,0xCCCCFF,0x996633,280   ,3    ,0,12,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,60  ,20,0 ,100,0,0,0  ,0,8   ,12  ,1 ,10  ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,70  ,123,20 ,0  ,0  ,0  ,0  ], // White Roundhead Bat 87
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  delta explosion 3,___,___,   ,   ,   ],
    [23,2 ,7 ,1,0x990000,0x996633,440   ,3    ,0,12,0xFF990000,1,16,16,8 ,8 ,0  ,0  ,60  ,20,0 ,100,0,0,0  ,0,4   ,8   ,5 ,10  ,50 ,30  ,40  ,0,0   ,3    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,110 ,124,10 ,0  ,0  ,0  ,0  ], // Red Roundhead Bat 88
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , Explosions's Card 2,___,Knockback's Card 2
    [25,1 ,7 ,3,0x808080,0x996633,5200  ,3    ,1,4 ,0xFF808080,1,16,32,16,16,0  ,0  ,150 ,20,10,100,0,0,0  ,0,8   ,12  ,5 ,50  ,30 ,200 ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,900 ,110,10 ,0  ,0  ,390,10 ], // Grey Boss Roundhead Snake 89
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Seaside 3 , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , , fire circle 3,___,___,   ,   ,   ],
    [23,1 ,8 ,1,0x00FFFF,0x006666,340   ,3    ,1,4 ,0xFF00FFFF,1,16,16,8 ,8 ,0  ,0  ,20  ,20,0 ,100,0,0,0  ,0,10  ,15  ,1 ,5   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,80  ,298,20 ,0  ,0  ,0  ,0  ], // Cyan Gel Snake 90
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  fire chain 3,___,___,   ,   ,   ],
    [23,3 ,8 ,1,0x00FFFF,0xFFFFFF,220   ,5    ,0,13,0xFF00FFFF,1,16,16,8 ,8 ,50 ,0  ,150 ,10,5 ,100,0,0,0  ,0,1   ,5   ,6 ,0   ,50 ,30  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,80  ,198,20 ,0  ,0  ,0  ,0  ], // Cyan Gel Dragon 91
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,fire knuckle 3,fire sabel 3,double fire 3
    [25,5 ,8 ,1,0xFF00FF,0xCCCCCC,800   ,3    ,1,5 ,0xFFFF6010,2,16,32,16,16,0  ,0  ,150 ,40,0 ,100,1,0,0  ,1,4   ,6   ,3 ,10  ,50 ,30  ,150 ,1,80  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,150 ,131,10 ,132,10 ,133,10 ], // Pink Gel Tree (S3) 92
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     , Ice Ward 3,___,Bullet's Card 2
    [26,3 ,8 ,3,0x00FFFF,0xFFFFFF,4800  ,5    ,0,12,0xFF00FFFF,1,16,16,8 ,8 ,50 ,0  ,150 ,10,5 ,100,0,0,0  ,0,1   ,9   ,12,0   ,30 ,200 ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,900 ,246,10 ,0  ,0  ,109,10 ], // Cyan Boss Gel Dragon 93
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Seaside 4 , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,Silver Crystal 1,icicle 3,___ ,   ],
    [24,0 ,8 ,1,0xCCFF66,0x669900,300   ,4    ,0,13,0xFFCCFF66,1,16,16,8 ,8 ,0  ,0  ,150 ,10,5 ,100,0,0,0  ,0,1   ,3   ,1 ,100 ,50 ,50  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,150  ,40  ,26 ,30 ,134,50 ,0  ,0  ], // Green Gel Walker 94
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,Silver Crystal 1,staff of freeze 3,___
    [24,2 ,7 ,1,0xCCFF66,0x669900,200   ,3    ,1,9 ,0xFFCCFF66,1,16,16,8 ,8 ,0  ,0  ,80  ,10,0 ,100,0,0,0  ,0,1   ,3   ,2 ,10  ,50 ,25  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,150  ,40  ,26 ,30 ,135,50 ,0  ,0  ], // Green Roundhead Bat 95
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,Silver Crystal 2,uzi 3,___,   ,   ],
    [25,4 ,9 ,1,0xFFCC66,0xFFFFCC,400   ,5    ,1,10,0xCCFFCC33,2,16,16,8 ,8 ,50 ,0  ,100 ,10,5 ,100,0,0,0  ,0,2   ,3   ,9 ,0   ,50 ,30  ,60  ,3,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,80  ,91 ,20 ,136,30 ,0  ,0  ], // Tan Star Stickman 96
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    Berserk Card 2,___,Reflection Card 2
    [27,4 ,9 ,2,0xFFCC66,0xFFFFCC,6E3   ,5    ,1,10,0xFFFFCC33,2,32,32,16,16,0  ,0  ,100 ,10,30,100,0,0,0  ,0,30  ,50  ,1 ,0   ,20 ,200 ,40  ,3,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,900 ,130,10 ,0  ,0  ,407,10 ], // Tan Boss Star Stickman 97
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Submarine 1 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,iron chain 3,___,Blue Stone 3,
    [26,7 ,7 ,1,0xCCCCFF,0x9999CC,400   ,3    ,1,4 ,0xFFCCCCFF,1,16,16,8 ,8 ,0  ,0  ,40  ,10,0 ,100,0,0,0  ,0,10  ,18  ,1 ,5   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,90  ,199,30 ,0  ,0  ,146,90 ], // White Roundhead Fish 98
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    mach knuckle 3,___,White Stone 3
    [26,9 ,7 ,1,0xFFCCFF,0x996699,300   ,3    ,0,12,0xFFFFCCFF,1,16,16,8 ,8 ,0  ,0  ,80  ,10,0 ,100,0,0,0  ,0,10  ,15  ,1 ,10  ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,90  ,137,30 ,0  ,0  ,143,80 ], // Pink Roundhead Eel 99
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   fire rise 3,___,___,   ,   ,   ],
    [28,9 ,8 ,1,0xFF00CC,0x330033,450   ,3    ,0,15,0xFFFF00CC,1,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,98 ,0,1,0  ,0,10  ,15  ,1 ,5   ,50 ,50  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,130 ,140,10 ,0  ,0  ,0  ,0  ], // Pink Gel Eel 100
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   thunder sabel 3,___,Pierce's Card 3
    [29,9 ,7 ,2,0xFFCC66,0xFFFFCC,7E3   ,3    ,0,15,0xFF000000,1,32,32,16,16,0  ,10 ,500 ,10,0 ,90 ,0,1,0  ,0,20  ,40  ,1 ,100 ,20 ,50  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,900 ,138,5  ,0  ,0  ,172,10 ], // Tan Boss Roundhead Eel 101
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Submarine 2 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , double iron arrow 3,___,Green Stone 3
    [27,5 ,8 ,1,0x336600,0x003300,400   ,3    ,1,11,0xFF99CC00,1,16,16,4 ,4 ,0  ,0  ,300 ,10,0 ,100,0,0,0  ,0,6   ,8   ,1 ,2   ,100,15  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,150  ,90  ,139,50 ,0  ,0  ,145,200], // Green Gel Tree 102
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  thunder circle 3,___,Red Stone 3],
    [27,7 ,7 ,1,0xFFCCFF,0x996699,420   ,3    ,1,4 ,0xFFFFCCFF,1,16,16,8 ,8 ,0  ,0  ,40  ,10,0 ,100,0,0,0  ,0,12  ,18  ,1 ,5   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,100 ,299,10 ,0  ,0  ,144,50 ], // Pink Roundhead Fish 103
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     , remington 3,___,Black Stone 3
    [29,0 ,8 ,1,0xFF00CC,0x330033,480   ,3    ,1,17,0xFFFF00CC,1,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,10  ,15  ,1 ,15  ,50 ,50  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,130 ,142,10 ,0  ,0  ,147,50 ], // Pink Gel Walker 104
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   Bullet's Card 3,___,Ring's Card 3
    [30,5 ,8 ,3,0x990000,0x330000,8E3   ,3    ,1,11,0xFFCC6666,1,16,16,4 ,4 ,0  ,10 ,500 ,10,0 ,100,0,0,0  ,0,10  ,22  ,15,3   ,50 ,15  ,180 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,900 ,174,10 ,0  ,0  ,461,10 ], // Red Boss Gel Tree (SM2) 105
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Submarine 3 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,ice circle 3,___,Purple Crystal 3
    [28,7 ,7 ,1,0x00559C,0x00559C,400   ,3    ,1,13,0x60000000,1,16,16,4 ,4 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,3   ,4   ,1 ,3   ,50 ,20  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,150  ,90  ,301,30 ,0  ,0  ,151,80 ], // Blue Roundhead Fish 106
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    ___,Silver Crystal 3,Black Crystal 3
    [28,7 ,2 ,1,0x808080,0x663300,500   ,3    ,1,3 ,0xFF000000,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,12  ,18  ,1 ,15  ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,100 ,0  ,0  ,150,40 ,152,40 ], // Grey Smiley Fish 107
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     , ___,Red Crystal 3,Yellow Crystal 3
    [30,9 ,10,1,0xCC3300,0x000000,500   ,3    ,1,5 ,0xFFFF6010,2,16,32,16,16,0  ,0  ,150 ,40,0 ,100,1,0,0  ,1,6   ,9   ,1 ,10  ,50 ,30  ,150 ,1,80  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,150 ,0  ,0  ,148,30 ,149,30 ], // Orange Mask Eel 108
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    Freeze Ward 2,___,Catapult's Card 3
    [31,9 ,7 ,2,0x00559C,0x00559C,2E3   ,3    ,1,17,0x40000000,1,16,16,4 ,4 ,0  ,0  ,300 ,10,0 ,100,0,0,0  ,0,10  ,22  ,2 ,10  ,50 ,20  ,180 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,300 ,248,20 ,0  ,0  ,171,50 ], // Blue Boss Roundhead Eel 109
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Submarine 4 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    combat staff 4,___,Gold Medal 3,
    [32,7 ,7 ,1,0xEEEE00,0xCCCC00,500   ,1    ,0,14,0xFFEEEE00,1,16,16,16,16,0  ,0  ,50  ,20,0 ,100,0,0,0  ,0,1   ,9   ,1 ,0   ,25 ,100 ,20  ,3,0   ,0    ,0   ,0   ,100 ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,250  ,150 ,182,20 ,0  ,0  ,186,60 ], // Yellow Roundhead Fish 110
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  ,freeze knuckle 4,ice chain 4,Bronze Medal 3
    [32,7 ,10,1,0x808080,0x202020,600   ,3    ,1,17,0xFF000099,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,5   ,10  ,1 ,15  ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,-100,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,250  ,120 ,178,30 ,201,30 ,184,80 ], // Grey Mask Fish 111
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,long sabel 4,___,Silver Medal 3
    [33,7 ,10,2,0x808080,0x202020,800   ,3    ,1,17,0xFF009900,1,32,32,16,16,0  ,0  ,150 ,10,0 ,100,1,0,0  ,0,10  ,20  ,1 ,10  ,50 ,20  ,150 ,0,0   ,0    ,0   ,0   ,-100,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,200 ,179,10 ,0  ,0  ,185,30 ], // Grey Big Mask Fish 112
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  Thunder Charm 3,___,Explosion's Card 3
    [36,7 ,10,4,0x808080,0x202020,12E3  ,3    ,1,17,0xFF990000,1,48,48,24,24,0  ,0  ,300 ,10,0 ,100,0,0,0  ,0,20  ,40  ,1 ,15  ,50 ,20  ,180 ,0,0   ,0    ,0   ,0   ,-100,0   ,80 ,3,0,6 ,0x80400000,1,16,16 ,8 ,8  ,100 ,10,0 ,99 ,0,0,0,10,20  ,9 ,0,3E3  ,999 ,308,10 ,0  ,0  ,175,10 ], // Grey Boss Mask Fish 113
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Submarine Shrine     ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  Vampire's Card 3,___,Gold rush Card 1
    [40,9 ,7 ,4,0xCCCCCC,0x800000,4E4   ,3    ,0,7 ,0xFFCCCCFF,1,32,32,24,24,0  ,20 ,400 ,10,0 ,95 ,0,1,40 ,0,5   ,5   ,1 ,40  ,50 ,300 ,200 ,5,2500,0    ,0   ,0   ,0   ,0   ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,1,4E3  ,4E3 ,94 ,5  ,0  ,0  ,95 ,20 ], // Submarine Shrine Boss (flake) 114
    [0 ,0 ,0 ,0,0x000000,0x000000,0     ,3    ,1,5 ,0xFFFF6010,2,24,48,24,24,0  ,0  ,300 ,40,0 ,100,1,0,0  ,1,3   ,5   ,3 ,10  ,50 ,300 ,300 ,1,80  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,0    ,0   ,0  ,0  ,0  ,0  ,0  ,0  ], // Submarine Shrine Boss (fire) 115
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
// Mist Grove 1,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , triple iron arrow 3,___,Diamond 3  ],
    [29,8 ,7 ,1,0xFFFFCC,0xFFCC99,800   ,6    ,0,13,0xFFFFCC99,1,16,16,4 ,4 ,0  ,10 ,200 ,10,3 ,99 ,0,0,0  ,0,6   ,8   ,6 ,25  ,200,1000,500 ,0,0   ,10   ,-100,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,120 ,155,20 ,0  ,0  ,168,80 ], // White Roundhead Mushroom 116
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  staff of flame 3,long circle 3,Aquamarine 3
    [29,5 ,7 ,1,0xFFFFCC,0x996633,800   ,4    ,1,3 ,0xFF996633,1,16,16,8 ,8 ,50 ,0  ,200 ,10,4 ,100,0,0,0  ,0,14  ,18  ,1 ,160 ,100,20  ,80  ,0,0   ,0    ,-100,50  ,50  ,50  ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,120 ,157,30 ,300,30 ,164,80 ], // White Roundhead Tree 117
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,  poison knuckle 3,___,Peridot 3  ],
    [31,2 ,8 ,1,0x33CC00,0x339900,300   ,3    ,0,6 ,0xFF339900,1,16,16,8 ,8 ,0  ,0  ,250 ,20,0 ,100,0,0,0  ,0,1   ,1   ,1 ,2   ,300,25  ,80  ,4,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,90  ,153,10 ,0  ,0  ,167,50 ], // Green Gel Bat 118
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , Long Sword's Card 3,___,Big Card 3 ],
    [33,8 ,7 ,3,0xFFFFCC,0xFFCC99,11E3  ,706  ,0,12,0xFFFFCC99,1,16,16,8 ,8 ,30 ,0  ,300 ,10,3 ,99 ,0,0,0  ,0,33  ,33  ,23,40  ,100,1000,500 ,0,0   ,30   ,-100,50  ,50  ,100 ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2500 ,300 ,170,10 ,0  ,0  ,343,10 ], // White Boss Roundhead Mushroom 119
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
// Mist Grove 2,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    sniper rifle 3,___,Ruby 3 ,   ],
    [30,2 ,7 ,1,0xFFCC33,0xCC3300,400   ,3    ,1,9 ,0xFFFFCC33,1,16,16,8 ,8 ,0  ,0  ,100 ,20,0 ,100,0,0,0  ,0,3   ,4   ,3 ,10  ,50 ,30  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,50  ,158,30 ,0  ,0  ,161,100], // Yellow Roundhead Bat 120
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     , ice sabel 3,___,Garnet 3   ],
    [31,3 ,7 ,1,0xFFCC33,0xCC3300,400   ,3    ,1,9 ,0xFFCC3300,1,16,16,8 ,8 ,0  ,0  ,100 ,20,0 ,100,0,0,0  ,0,3   ,4   ,5 ,10  ,50 ,30  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,50  ,154,30 ,0  ,0  ,162,100], // Yellow Roundhead Dragon 121
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   big thunder 3,thunder chain 3,___
    [31,5 ,7 ,1,0xCC3300,0x333333,800   ,7    ,0,0 ,0xFF000000,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,-2  ,0   ,1 ,0   ,300,30  ,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,100 ,156,10 ,200,10 ,0  ,0  ], // Red Roundhead Tree 122
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     Fire Charm 3,___,Berserk Card 3
    [34,5 ,7 ,2,0xCC3300,0x333333,8E3   ,7    ,0,0 ,0xFF000000,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,-2  ,0   ,5 ,0   ,100,8   ,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2500 ,300 ,281,10 ,0  ,0  ,177,10 ], // Red Boss Roundhead Tree 123
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Mist Grove 3,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   triple poison 4,___,Emerald 3  ],
    [31,6 ,8 ,1,0x009900,0x003300,80    ,1    ,0,6 ,0xFF006600,1,32,32,16,16,0  ,0  ,50  ,20,0 ,100,0,0,0  ,0,1   ,1   ,1 ,0   ,100,200 ,20  ,4,50  ,0    ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,130 ,180,30 ,0  ,0  ,166,120], // Green Gel Wheel 124
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,big icicle 4,___,Sapphire 3 ],
    [32,4 ,7 ,1,0x999900,0x333333,180   ,4    ,0,12,0xFF990000,1,16,16,8 ,8 ,0  ,0  ,1000,10,4 ,100,0,0,0  ,0,10  ,10  ,1 ,150 ,50 ,30  ,60  ,0,0   ,-10  ,0   ,0   ,0   ,0   ,0  ,4,0,5 ,0xFFFF6010,2,16,32 ,16,32 ,100 ,10,4 ,98 ,0,1,0,6 ,9   ,5 ,0,200  ,140 ,181,20 ,0  ,0  ,163,80 ], // Olive Roundhead Stickman 125
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,grenade launcher 4,___,Topaz 3,   ],
    [32,8 ,9 ,1,0x999900,0x333333,300   ,8003 ,1,9 ,0xFF993300,1,16,16,8 ,8 ,0  ,20 ,200 ,10,0 ,100,1,0,20 ,0,8   ,16  ,2 ,20  ,200,1000,500 ,0,0   ,-10  ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,150 ,183,20 ,0  ,0  ,165,80 ], // Olive Star Mushroom 126
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    Poison Ward 2,___,Critical's Card 3
    [35,5 ,9 ,3,0x999900,0x333333,9E3   ,4003 ,1,9 ,0xFF993300,1,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,50  ,60  ,7 ,13  ,100,50  ,200 ,0,0   ,-10  ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2500 ,400 ,247,10 ,0  ,0  ,176,10 ], // Olive Boss Star Tree 127
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// ??? ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   Black Crystal 3,___,Iron Medal 3,
    [33,10,8 ,1,0xCC00CC,0xCCCCCC,1000  ,3    ,1,4 ,0xFFCC00CC,1,16,16,8 ,8 ,0  ,0  ,10  ,10,1 ,100,0,0,0  ,0,1   ,1   ,1 ,5   ,10 ,100 ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,10  ,152,50 ,0  ,0  ,187,200], // Pink Gel Spider 128
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , Guide's Card 3,Quick's Card 3,Knockback's Card 3
    [36,10,8 ,2,0xCC00CC,0xCCCCCC,1E4   ,1003 ,1,9 ,0xFFCC00CC,1,16,16,8 ,8 ,20 ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,1   ,7 ,20  ,10 ,100 ,200 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,3E3  ,10  ,173,10 ,169,10 ,391,10 ], // Pink Boss Gel Spider 129
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Desert 1  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  needle knuckle 4,thron chain 4,thorn circle 4
    [38,10,11,1,0xEBBC79,0x404040,600   ,3    ,1,4 ,0xFFEBBC79,1,16,16,8 ,8 ,0  ,0  ,10  ,10,1 ,100,0,0,0  ,0,1   ,3   ,1 ,5   ,10 ,100 ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,150 ,202,30 ,208,30 ,302,30 ], // Tan Box Spider 130
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    ice meteor 4,staff of poisoner 4,___
    [39,1 ,11,1,0xEBBC79,0xCF8138,600   ,4    ,1,3 ,0xFFCF8138,1,16,16,8 ,8 ,0  ,20 ,200 ,10,5 ,100,0,0,0  ,0,1   ,1   ,5 ,80  ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,160 ,205,30 ,206,30 ,0  ,80 ], // Tan Box Snake 131
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    lightsaber 4,laster beam gun 4,___
    [40,0 ,12,1,0x666666,0x333333,1000  ,3    ,1,18,0xFFFFFF00,1,16,16,4 ,4 ,0  ,0  ,500 ,10,0 ,100,1,0,0  ,0,20  ,40  ,1 ,10  ,200,30  ,200 ,3,0   ,20   ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,200 ,203,10 ,207,10 ,0  ,50 ], // Grey Box Walker 132
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     , fire shot 4,___,Quick's Card 4
    [42,0 ,12,3,0x666666,0x333333,15E3  ,3    ,1,18,0xFFFFFF00,1,16,16,16,16,0  ,0  ,300 ,10,0 ,100,0,0,0  ,0,1   ,1   ,1 ,40  ,5  ,1000,250 ,3,0   ,30   ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,3E3  ,1000,204,5  ,0  ,0  ,237,10 ], // Grey Boss Box Walker 133
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Desert 2  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  long iron staff 4,___,___,   ,   ,   ],
    [38,2 ,11,1,0xEBBC79,0xCF8138,400   ,3    ,1,4 ,0xFFEBBC79,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,1   ,3   ,1 ,5   ,10 ,100 ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,150 ,218,40 ,0  ,0  ,0  ,80 ], // Tan Box Bat (D2) 134
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Red Stone 4
    [41,3 ,12,1,0xCC3333,0xFF6666,500   ,3    ,1,18,0xFFFF0000,1,16,16,4 ,4 ,0  ,0  ,500 ,10,0 ,100,1,0,0  ,0,6   ,9   ,9 ,10  ,200,20  ,120 ,1,100 ,0    ,100 ,-50 ,0   ,0   ,-50,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,160 ,0  ,10 ,0  ,0  ,210,50 ], // Red Box Dragon 135
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,White Stone 4
    [41,6 ,12,1,0x666666,0xAAAAAA,1000  ,1    ,0,14,0xFFFFFFFF,1,32,32,32,32,0  ,0  ,10  ,10,0 ,100,0,0,0  ,1,10  ,10  ,1 ,0   ,200,20  ,20  ,0,0   ,30   ,50  ,80  ,-100,50  ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,200 ,0  ,20 ,0  ,0  ,209,80 ], // Grey Box Wheel 136
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,  Ice Ward 3,___,Bullet's Card 4
    [43,0 ,12,3,0x666666,0x333333,15E3  ,404  ,1,3 ,0x80EBBC79,1,16,16,4 ,4 ,0  ,0  ,300 ,10,8 ,100,0,0,0  ,0,1   ,7   ,30,120 ,50 ,30  ,250 ,0,0   ,30   ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,3E3  ,1100,250,10 ,0  ,0  ,238,10 ], // Grey Boxx Box Walker (D2) 137
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Desert 3  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    power circle 4,___,Green Stone 4
    [39,11,13,1,0x99CC00,0x009900,400   ,3    ,1,9 ,0xFF99CC00,1,16,16,4 ,4 ,0  ,5  ,200 ,10,0 ,100,0,0,0  ,0,1   ,3   ,9 ,20  ,50 ,1000,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,50  ,303,30 ,0  ,0  ,211,100], // Green Diamond Cactus 138
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    poison chain 4,___,Blue Stone 4,
    [39,11,13,1,0xCC66FF,0xCC9933,400   ,103  ,1,9 ,0xFFCC66FF,1,16,16,4 ,4 ,30 ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,3   ,3 ,20  ,50 ,1000,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,50  ,220,30 ,0  ,0  ,212,100], // Pink Diamond Cactus 139
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,___,___,Black Stone 4
    [42,11,11,1,0xFF6633,0x990000,600   ,3    ,1,18,0xFFFF6633,1,16,16,4 ,4 ,0  ,0  ,500 ,10,0 ,100,1,0,0  ,0,10  ,10  ,1 ,10  ,50 ,1000,500 ,1,100 ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,200 ,0  ,10 ,0  ,0  ,213,50 ], // Orange Box Cactus 140
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,   spark knuckle 4,___,Critical's Card 4
    [44,11,13,2,0xEEEE00,0x00BB00,2500  ,3    ,1,10,0xFFEEEE00,2,16,24,8 ,8 ,0  ,0  ,300 ,10,0 ,100,0,0,0  ,0,1   ,9   ,1 ,80  ,5  ,1000,500 ,3,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,800 ,214,20 ,0  ,0  ,239,50 ], // Yellow Boss Diamond Cactus 141
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Desert 4  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , super volcano 4,___,___,   ,   ,   ],
    [40,2 ,11,1,0xFF6633,0xCF8138,500   ,3    ,1,5 ,0xFFFF6010,2,16,32,16,16,0  ,0  ,100 ,40,0 ,100,1,0,0  ,0,4   ,6   ,1 ,10  ,50 ,30  ,40  ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,180 ,217,30 ,0  ,0  ,0  ,80 ], // Orange Box Bat 142
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  quad iron arrow 4,___,___,   ,   ,   ],
    [40,11,13,1,0xCCCCCC,0xCC9966,450   ,103  ,1,9 ,0xFFCCCCCC,1,16,16,4 ,4 ,30 ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,4   ,3 ,20  ,50 ,1000,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,50  ,216,30 ,0  ,0  ,0  ,80 ], // White Diamond Cactus 143
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , , flame sabel 4,___,___,   ,   ,   ],
    [43,10,13,1,0xFF6633,0x666666,1000  ,4    ,0,12,0xFF990000,1,16,16,8 ,8 ,0  ,0  ,200 ,10,5 ,100,0,0,0  ,0,1   ,3   ,1 ,100 ,50 ,30  ,150 ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,1,0,5 ,0x80FF6010,1,16,32 ,12,32 ,200 ,20,0 ,100,0,0,0,1 ,3   ,1 ,0,500  ,200 ,215,30 ,0  ,0  ,0  ,80 ], // Orange Diamond Spider 144
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    cannon 4,___,Catapult's Card 4
    [45,10,13,2,0xFF6633,0x990000,16E3  ,4    ,1,12,0xFF990000,1,16,16,8 ,8 ,0  ,0  ,300 ,10,5 ,100,0,0,0  ,0,4   ,6   ,9 ,100 ,50 ,100 ,150 ,1,50  ,0    ,0   ,0   ,0   ,0   ,80 ,1,0,5 ,0x80FF6010,1,16,32 ,12,32 ,200 ,20,0 ,100,0,0,0,1 ,3   ,1 ,0,3E3  ,1200,219,5  ,0  ,0  ,240,10 ], // Orange Boss Diamond Spider 145
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
// Desert 5  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,  ___,onigiri,Red Crystal 4
    [44,10,13,2,0xFF3300,0x663300,8E3   ,3    ,1,16,0xFFFF3300,2,16,16,8 ,8 ,0  ,0  ,500 ,10,0 ,100,1,0,0  ,0,10  ,10  ,3 ,10  ,250,30  ,200 ,1,100 ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,3E3  ,1500,0  ,30 ,2  ,1  ,221,40 ], // Red Big Diamond Spider 146
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,  ___,onigiri,Yellow Crystal 4
    [44,11,13,2,0xCCCC00,0x996600,9E3   ,3    ,1,9 ,0xFFCCCC00,1,32,32,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,20  ,40  ,1 ,20  ,100,1000,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,3E3  ,500 ,0  ,30 ,2  ,1  ,222,40 ], // Yellow Big Diamond Cactus 147
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  Purple Crystal 4,Freeze Ward 4,Black Crystal 4
    [41,9 ,11,1,0x33CCFF,0x006699,1000  ,4    ,0,12,0xFF33CCFF,1,16,16,8 ,8 ,0  ,0  ,200 ,10,5 ,100,0,0,0  ,0,1   ,9   ,1 ,80  ,50 ,30  ,80  ,0,0   ,0    ,50  ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,100 ,224,20 ,252,20 ,225,20 ], // Cyan Box Eel 148
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  Silver Crystal 4,quick circle 4,Berserk Card 4
    [46,4 ,11,1,0xFFFFCC,0xFFCC66,1000  ,4    ,0,13,0xCCFFFFCC,2,16,16,8 ,8 ,0  ,20 ,200 ,10,15,100,0,0,0  ,0,5   ,5   ,1 ,40  ,25 ,100 ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,200 ,223,99 ,304,99 ,241,450], // White Boss Box Stickman 149
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Oasis  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,    frozen sabel 4,___,Bronze Medal 4
    [42,9 ,11,1,0xCCCCFF,0x9966FF,600   ,3    ,0,7 ,0xFFCCCCFF,1,16,16,8 ,8 ,0  ,10 ,100 ,10,0 ,95 ,0,1,0  ,0,5   ,5   ,1 ,20  ,50 ,30  ,80  ,5,250 ,0    ,0   ,100 ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,150 ,227,30 ,0  ,0  ,233,80 ], // White Box Eel 150
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Silver Medal 4
    [43,9 ,13,1,0x99CC33,0x996600,700   ,3    ,0,6 ,0xFF99CC33,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,1,0  ,0,1   ,1   ,1 ,5   ,50 ,20  ,100 ,4,8   ,0    ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,180 ,0  ,30 ,0  ,0  ,234,80 ], // Green Diamond Eel 151
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,___,___,Gold Medal 4
    [45,9 ,12,1,0xCC3333,0xFF9999,800   ,3    ,1,6 ,0xFFFF6010,2,16,24,8 ,8 ,0  ,0  ,50  ,10,0 ,95 ,1,0,0  ,0,2   ,3   ,1 ,10  ,10 ,100 ,50  ,1,50  ,0    ,100 ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,200 ,0  ,30 ,0  ,0  ,235,80 ], // Red Box Eel 152
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , thunder spear 4,Iron Medal 4,Thunder Charm 4
    [47,9 ,12,2,0xFFFF66,0x333333,18E3  ,3    ,0,2 ,0xFFFFFF66,2,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,20  ,50  ,1 ,40  ,50 ,100 ,250 ,3,0   ,0    ,0   ,0   ,100 ,0   ,80 ,2,0,15,0xFFFFFF66,1,16,16 ,8 ,8  ,50  ,10,0 ,0  ,0,0,0,1 ,9   ,30,0,3E3  ,200 ,229,3  ,236,10 ,310,10 ], // Yellow Boss Box Eel (Oasis) 153
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Desert 6  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [44,12,7 ,1,0xFFFFFF,0x330066,1200  ,2    ,1,15,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,40  ,40,0 ,100,0,0,0  ,0,11  ,15  ,1 ,1   ,50 ,30  ,20  ,0,0   ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,66  ,228,30 ,0  ,0  ,0  ,80 ], // 154
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [44,2 ,4 ,1,0xFFFFFF,0x330066,1000  ,3    ,1,9 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,9   ,11  ,1 ,10  ,50 ,30  ,40  ,0,0   ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,66  ,230,30 ,0  ,0  ,0  ,80 ], // 155
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [46,12,8 ,1,0x990000,0x003300,666   ,1    ,0,6 ,0xFF660033,1,16,16,4 ,4 ,0  ,0  ,200 ,20,0 ,100,0,0,0  ,0,1   ,1   ,1 ,0   ,10 ,100 ,500 ,4,66  ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,666 ,231,10 ,305,10 ,251,20 ], // 156
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [48,12,4 ,2,0xFFFFFF,0xFFFFFF,18E3  ,4    ,1,6 ,0xFF660033,1,16,20,8 ,8 ,50 ,0  ,1000,20,0 ,100,0,0,0  ,0,6   ,6   ,6 ,1000,350,1000,500 ,4,66  ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,3E3  ,666 ,226,5  ,232,5  ,242,10 ], // 157
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Desert 7  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [44,12,11,1,0xFFFFFF,0x330066,1200  ,3    ,1,18,0xFFFFFFFF,1,8 ,12,8 ,8 ,0  ,0  ,40  ,40,0 ,100,0,0,0  ,0,11  ,15  ,1 ,10  ,50 ,30  ,40  ,0,0   ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,66  ,255,40 ,0  ,0  ,0  ,80 ], // 158
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [45,2 ,13,1,0x9999FF,0x000099,800   ,3    ,1,9 ,0xFF6666FF,1,16,16,8 ,8 ,10 ,0  ,100 ,10,0 ,100,0,0,0  ,0,1   ,1   ,3 ,10  ,50 ,30  ,40  ,5,250 ,0    ,0   ,100 ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,200 ,254,30 ,0  ,0  ,0  ,80 ], // 159
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [47,1 ,13,1,0xFF6010,0xCC0000,1200  ,1    ,0,5 ,0xFFFF6010,2,12,32,8 ,16,0  ,0  ,200 ,20,8 ,100,0,1,0  ,0,3   ,4   ,1 ,0   ,10 ,100 ,500 ,1,50  ,0    ,100 ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,300 ,256,20 ,257,20 ,0  ,20 ], // 160
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [49,1 ,13,2,0xFFC010,0xCC6600,19E3  ,1    ,0,6 ,0xFFFF9010,2,28,28,16,16,0  ,0  ,500 ,20,0 ,100,1,0,0  ,0,3   ,4   ,1 ,0   ,10 ,100 ,500 ,1,50  ,0    ,100 ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,3E3  ,666 ,283,10 ,0  ,0  ,249,10 ], // 161
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Pyramid,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [50,12,11,3,0x423A32,0x443322,8E4   ,104  ,1,6 ,0x80FF6010,2,16,20,12,12,50 ,0  ,100 ,10,-1,99 ,0,1,0  ,0,6   ,6   ,50,40  ,300,100 ,60  ,1,50  ,0    ,0   ,0   ,0   ,0   ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,1,6E3  ,3E3 ,159,5  ,0  ,0  ,160,20 ], // 162
    [0 ,0 ,0 ,0,0x000000,0x000000,0     ,4    ,1,3 ,0xFF660033,1,16,16,8 ,8 ,0  ,0  ,1000,10,8 ,100,0,0,0  ,0,1   ,1   ,1 ,80  ,150,50  ,500 ,4,66  ,0    ,0   ,0   ,0   ,0   ,0  ,2,0,6 ,0xFF660066,2,16,16 ,8 ,8  ,66  ,20,0 ,86 ,0,0,0,1 ,1   ,30,0,0    ,0   ,0  ,20 ,0  ,0  ,0  ,100], // 163
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Desert 8  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [45,10,7 ,1,0xFFCC33,0xCC3300,1000  ,3    ,1,4 ,0xFFFFCC33,1,16,16,8 ,8 ,0  ,0  ,10  ,10,1 ,100,0,0,0  ,0,2   ,3   ,1 ,5   ,10 ,100 ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,150 ,253,30 ,0  ,0  ,0  ,100], // 164
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [48,10,7 ,2,0xCC3300,0x333333,5E3   ,7    ,0,0 ,0xFF000000,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,-1  ,0   ,1 ,0   ,50 ,30  ,500 ,0,0   ,50   ,50  ,50  ,50  ,50  ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,300 ,258,20 ,306,20 ,2  ,1  ], // 165
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [47,5 ,12,1,0x666666,0xCC9966,1200  ,4    ,0,2 ,0xFF666666,1,16,16,8 ,8 ,0  ,0  ,200 ,10,8 ,100,0,0,0  ,0,40  ,50  ,1 ,100 ,50 ,20  ,200 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,300 ,259,10 ,0  ,0  ,0  ,20 ], // 166
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [50,5 ,12,2,0x660000,0xCC9966,18E3  ,4    ,0,2 ,0xFF666666,1,16,16,8 ,8 ,0  ,0  ,200 ,10,8 ,100,0,0,0  ,0,40  ,50  ,1 ,100 ,50 ,30  ,500 ,1,0   ,0    ,0   ,0   ,0   ,0   ,80 ,3,0,6 ,0x80FF6010,2,16,16 ,8 ,8  ,200 ,40,0 ,90 ,0,2,1,8 ,12  ,10,0,3E3  ,1500,268,10 ,0  ,0  ,392,10 ], // 167
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Beach 1,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [47,10,4 ,1,0xCC3300,0x442A22,800   ,3    ,1,9 ,0xFFCC3300,1,16,16,8 ,8 ,0  ,0  ,60  ,10,0 ,100,0,0,0  ,0,5   ,10  ,1 ,10  ,50 ,30  ,60  ,0,0   ,50   ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,350  ,200 ,0  ,30 ,0  ,0  ,260,150], // 168
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [48,3 ,8 ,1,0xBBBB33,0xCCCCCC,800   ,1    ,1,17,0xFFBBBB33,1,16,16,8 ,8 ,0  ,0  ,100 ,10,5 ,100,0,0,0  ,0,5   ,10  ,1 ,0   ,50 ,30  ,200 ,0,0   ,0    ,0   ,0   ,0   ,50  ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,350  ,300 ,0  ,20 ,0  ,0  ,264,80 ], // 169
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [49,7 ,14,2,0xCCCCCC,0x222288,3E3   ,1    ,0,14,0xFFCCCCCC,1,32,32,24,24,0  ,50 ,60  ,10,0 ,100,1,0,0  ,0,80  ,90  ,1 ,0   ,50 ,20  ,40  ,0,0   ,0    ,0   ,50  ,0   ,0   ,50 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,500 ,0  ,10 ,0  ,0  ,262,20 ], // 170
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [51,7 ,14,3,0xCCCCCC,0x222288,2E4   ,4    ,0,14,0xFFCC3333,1,64,64,56,56,0  ,100,110 ,10,0 ,95 ,1,0,0  ,1,150 ,200 ,1 ,20  ,50 ,30  ,300 ,0,0   ,0    ,0   ,50  ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,4E3  ,1500,269,10 ,0  ,0  ,462,10 ], // 171
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Beach 2,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [48,2 ,5 ,1,0x66CCCC,0x003333,900   ,3    ,1,17,0xFF00CC33,1,16,16,8 ,8 ,0  ,0  ,300 ,10,0 ,100,0,0,0  ,0,10  ,20  ,1 ,4   ,50 ,30  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,350  ,250 ,0  ,20 ,0  ,0  ,265,80 ], // 172
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [49,3 ,5 ,1,0x9999FF,0xCCCCCC,900   ,1    ,1,17,0xFF3333FF,1,16,16,8 ,8 ,0  ,0  ,200 ,10,3 ,100,0,0,0  ,0,10  ,20  ,1 ,0   ,50 ,30  ,200 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,350  ,250 ,0  ,20 ,0  ,0  ,263,80 ], // 173
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [50,13,14,1,0xCCCCCC,0x333333,1000  ,3    ,1,17,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,1   ,5   ,1 ,15  ,20 ,50  ,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,500 ,0  ,20 ,0  ,0  ,267,80 ], // 174
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [52,13,14,1,0xCC6600,0x663300,3E3   ,3    ,1,18,0xFFFF3300,1,16,16,8 ,8 ,0  ,0  ,500 ,10,0 ,100,0,0,0  ,0,1   ,5   ,1 ,6   ,20 ,50  ,150 ,1,100 ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1500 ,1000,261,40 ,0  ,0  ,266,40 ], // 175
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Beach 3,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [51,1 ,12,9,0xEBBC79,0xCF8138,2E3   ,0    ,0,0 ,0xFF000000,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,0   ,0   ,1 ,0   ,0  ,0   ,200 ,0,0   ,100  ,100 ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,2E3 ,0  ,10 ,0  ,0  ,322,20 ], // 176
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [49,7 ,11,1,0x78C2FF,0x008BFF,1100  ,3    ,1,16,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,10  ,20  ,1 ,15  ,50 ,30  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,350  ,250 ,0  ,20 ,0  ,0  ,0  ,80 ], // 177
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [50,5 ,14,1,0x009900,0x333333,1400  ,3    ,1,16,0xFF33CC33,1,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,1   ,1 ,15  ,50 ,20  ,200 ,4,8   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,350  ,250 ,0  ,20 ,0  ,0  ,0  ,80 ], // 178
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [53,13,14,1,0xFFCC00,0xCC9900,5E3   ,3    ,1,10,0xFFFFFF66,1,16,16,8 ,8 ,0  ,0  ,500 ,10,0 ,100,0,0,0  ,0,1   ,99  ,1 ,30  ,50 ,30  ,300 ,3,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,4E3  ,1500,344,10 ,0  ,0  ,408,10 ], // 179
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Cavern 4  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [51,2 ,15,1,0x666666,0x333333,1200  ,3    ,1,11,0xFF999999,1,8 ,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,5   ,10  ,1 ,10  ,50 ,30  ,50  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,300 ,312,90 ,0  ,0  ,0  ,100], // 180
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [53,2 ,15,1,0xCC3333,0x660000,1400  ,3    ,1,18,0xFFCC3333,1,8 ,16,8 ,8 ,0  ,0  ,500 ,10,0 ,100,0,2,0  ,0,10  ,20  ,1 ,10  ,100,100 ,80  ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,300 ,313,10 ,0  ,0  ,0  ,30 ], // 181
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [53,3 ,15,1,0x669933,0x333333,1400  ,3    ,1,11,0xFF669933,1,8 ,16,8 ,8 ,0  ,0  ,500 ,10,0 ,100,0,0,0  ,0,1   ,1   ,1 ,2   ,300,100 ,200 ,4,100 ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,300 ,314,10 ,0  ,0  ,0  ,30 ], // 182
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [55,2 ,15,2,0xCC0000,0x666666,22E3  ,3    ,1,18,0xFFCC0000,1,8 ,16,8 ,8 ,0  ,0  ,1500,10,0 ,100,0,2,0  ,0,10  ,20  ,3 ,10  ,100,50  ,80  ,1,50  ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,5E3  ,1500,315,3  ,0  ,0  ,358,10 ], // 183
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [52,9 ,15,1,0x6699CC,0x336699,1000  ,7203 ,0,15,0xFF333333,1,16,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,2,0  ,0,1   ,9   ,4 ,15  ,50 ,30  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,300 ,0  ,10 ,0  ,0  ,320,20 ], // 184
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Cavern 5  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [52,2 ,15,1,0xCCCCCC,0x666666,1400  ,3    ,1,11,0xFF999999,1,8 ,16,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,5   ,10  ,1 ,10  ,50 ,30  ,50  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,300 ,316,90 ,0  ,0  ,0  ,100], // 185
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [53,12,15,1,0xCC99FF,0x330066,3600  ,2    ,1,15,0xFFCC99FF,1,16,16,8 ,8 ,0  ,0  ,40  ,40,0 ,100,0,0,0  ,0,10  ,40  ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,66  ,317,30 ,0  ,0  ,0  ,50 ], // 186
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [54,12,15,1,0x669900,0x003300,3666  ,3    ,0,6 ,0xFF669900,1,16,16,4 ,4 ,0  ,0  ,1000,20,0 ,100,0,2,0  ,0,1   ,1   ,1 ,1   ,10 ,100 ,500 ,4,6   ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,666 ,318,10 ,0  ,0  ,0  ,30 ], // 187
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [56,12,15,2,0x990000,0x663333,26E3  ,3    ,1,18,0xFFCC0000,1,8 ,16,8 ,8 ,0  ,0  ,1500,10,0 ,100,0,2,0  ,0,10  ,20  ,5 ,10  ,100,50  ,300 ,1,50  ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,5E3  ,1500,319,5  ,0  ,0  ,356,10 ], // 188
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [56,9 ,15,3,0x6699CC,0x336699,55E3  ,7203 ,0,15,0xFF333333,1,24,24,16,16,0  ,0  ,200 ,10,0 ,100,0,2,0  ,0,15  ,45  ,4 ,15  ,50 ,50  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,5500 ,5500,321,1  ,0  ,0  ,0  ,10 ], // 189
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Cavern 6  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [54,2 ,15,1,0x669900,0x003300,1600  ,3    ,0,6 ,0xFF006600,1,16,16,4 ,4 ,0  ,0  ,200 ,20,0 ,100,0,0,0  ,0,1   ,1   ,1 ,2   ,50 ,30  ,80  ,4,10  ,0    ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,300 ,0  ,50 ,0  ,0  ,325,150], // 190
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [54,2 ,15,1,0xFF6600,0x993300,1600  ,3    ,0,13,0xFFFF6600,1,16,16,4 ,4 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,1   ,1 ,15  ,50 ,20  ,80  ,1,50  ,0    ,100 ,0   ,0   ,0   ,0  ,1,0,5 ,0x80FF6010,1,16,32 ,12,24 ,100 ,20,5 ,100,0,1,0,3 ,4   ,1 ,0,400  ,300 ,0  ,50 ,0  ,0  ,324,150], // 191
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [54,2 ,15,1,0xFFFF66,0x666600,1600  ,3    ,1,10,0xFFFFFF99,1,16,16,4 ,4 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,9   ,1 ,20  ,50 ,20  ,40  ,3,0   ,0    ,0   ,0   ,100 ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,300 ,0  ,50 ,0  ,0  ,326,150], // 192
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [57,5 ,15,2,0x990000,0x663333,28E3  ,3    ,1,18,0xFFCC0000,1,8 ,16,8 ,8 ,0  ,0  ,1500,10,0 ,100,0,2,0  ,0,10  ,20  ,7 ,10  ,100,50  ,300 ,1,50  ,0    ,0   ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,5E3  ,1500,0  ,5  ,0  ,0  ,357,10 ], // 193
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [53,9 ,15,1,0xFFFF66,0x333333,1000  ,0    ,0,15,0xFF000000,1,16,16,16,16,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,0   ,0   ,0 ,10  ,50 ,50  ,80  ,0,0   ,1E4  ,100 ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,400  ,9999,0  ,5  ,0  ,0  ,0  ,10 ], // 194
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Snowfield 1 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [55,1 ,7 ,1,0xFFFFFF,0xA8C0C8,2E3   ,3    ,1,4 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,20  ,40,0 ,100,0,0,0  ,0,5   ,5   ,1 ,5   ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,300 ,328,90 ,0  ,0  ,0  ,100], // 195
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [56,0 ,3 ,1,0x666666,0x333333,1600  ,4    ,0,2 ,0xFF333333,1,16,16,12,12,0  ,10 ,1000,10,8 ,100,0,0,0  ,0,10  ,50  ,1 ,80  ,50 ,20  ,150 ,0,0   ,50   ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,500 ,330,15 ,0  ,0  ,327,30 ], // 196
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [57,0 ,3 ,1,0xA8C0C8,0x4B3E21,1600  ,4    ,1,16,0xFFA8C0C8,1,16,16,8 ,8 ,0  ,10 ,1000,10,5 ,100,0,0,0  ,0,5   ,5   ,1 ,100 ,50 ,20  ,150 ,2,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,400 ,332,20 ,0  ,0  ,323,40 ], // 197
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [59,0 ,3 ,2,0xFFFFFF,0x333333,3E4   ,4    ,0,2 ,0xFFFFFFFF,1,32,32,24,24,0  ,10 ,300 ,10,5 ,100,0,1,0  ,1,100 ,500 ,1 ,120 ,250,50  ,300 ,0,0   ,0    ,0   ,0   ,0   ,0   ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,6E3  ,2E3 ,329,3  ,0  ,0  ,354,10 ], // 198
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Snowfield 2 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [56,4 ,16,1,0xFFFFFF,0xFFFFFF,1100  ,4    ,0,13,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,1000,10,5 ,100,0,0,0  ,0,5   ,5   ,1 ,40  ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,100 ,333,90 ,0  ,0  ,0  ,100], // 199
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [57,4 ,16,2,0x999999,0xFFFFFF,2200  ,4    ,0,2 ,0xFF999999,1,16,16,12,12,0  ,0  ,1000,10,2 ,100,0,0,0  ,0,15  ,15  ,1 ,160 ,50 ,20  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,200 ,334,30 ,0  ,0  ,0  ,60 ], // 200
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [58,4 ,16,3,0xDDAAFF,0xFFFFFF,3300  ,4    ,0,2 ,0xFFDDAAFF,1,16,16,12,12,0  ,0  ,500 ,40,2 ,100,0,2,0  ,0,30  ,30  ,1 ,160 ,150,20  ,160 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,300 ,335,20 ,0  ,0  ,0  ,40 ], // 201
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [60,4 ,16,4,0xFFFFFF,0xFFFFFF,33E3  ,4    ,0,2 ,0xFFFFFFFF,1,32,32,24,24,0  ,0  ,1200,10,1 ,100,0,2,0  ,1,300 ,300 ,1 ,320 ,250,50  ,320 ,0,0   ,0    ,0   ,0   ,0   ,0   ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,6E3  ,500 ,331,5  ,0  ,0  ,355,10 ], // 202
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Mountain 1, ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [57,5 ,13,1,0x992222,0x333333,2E3   ,4    ,0,12,0xFF999999,1,16,16,8 ,8 ,0  ,0  ,1000,10,2 ,100,0,0,0  ,0,1   ,3   ,1 ,200 ,10 ,50  ,80  ,0,0   ,1E4  ,0   ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,300 ,0  ,50 ,0  ,0  ,336,150], // 203
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [57,5 ,13,1,0x999900,0x333333,2E3   ,6    ,0,13,0xFF666666,1,16,16,8 ,8 ,0  ,0  ,1000,10,1 ,100,0,0,0  ,0,1   ,3   ,5 ,15  ,50 ,50  ,80  ,0,0   ,1E4  ,100 ,100 ,0   ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,300 ,0  ,50 ,0  ,0  ,337,150], // 204
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [59,6 ,13,1,0x333399,0x333333,1000  ,1    ,0,6 ,0x80FF6010,1,16,16,12,12,0  ,0  ,20  ,20,0 ,100,0,0,0  ,0,2   ,3   ,1 ,0   ,5  ,500 ,200 ,1,50  ,1E4  ,100 ,0   ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,1000,0  ,20 ,0  ,0  ,339,10 ], // 205
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [61,6 ,16,2,0x999999,0x999999,35E3  ,6    ,0,15,0xFF999999,1,16,16,16,16,0  ,90 ,100 ,10,5 ,95 ,0,1,0  ,0,50  ,100 ,10,20  ,250,20  ,80  ,0,0   ,0    ,100 ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,6E3  ,500 ,338,10 ,0  ,0  ,340,10 ], // 206
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Mountain 2, ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [61,14,7 ,1,0x992222,0x666666,1500  ,1    ,0,12,0xFF999999,1,16,16,8 ,8 ,0  ,0  ,1000,10,5 ,100,0,0,0  ,0,1   ,1   ,1 ,0   ,10 ,50  ,60  ,1,50  ,0    ,100 ,100 ,100 ,100 ,100,1,0,5 ,0x80FF6010,2,16,32 ,16,32 ,300 ,20,0 ,0  ,0,0,0,1 ,1   ,1 ,0,500  ,500 ,0  ,50 ,0  ,0  ,373,200], // 207
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [61,4 ,16,1,0x666666,0x992222,2500  ,1    ,0,5 ,0x80FF6010,2,16,32,16,32,0  ,0  ,200 ,20,10,100,0,1,0  ,0,1   ,1   ,1 ,0   ,10 ,200 ,80  ,1,50  ,0    ,100 ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,500 ,0  ,50 ,0  ,0  ,370,200], // 208
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [63,0 ,3 ,2,0x666666,0x992222,35E3  ,4    ,0,2 ,0xFF999999,1,16,16,16,16,0  ,0  ,1000,10,5 ,100,0,0,0  ,0,33  ,33  ,1 ,120 ,200,20  ,200 ,1,50  ,0    ,100 ,100 ,100 ,100 ,100,6,0,5 ,0x80FF6010,2,16,32 ,16,32 ,50  ,20,20,95 ,0,1,0,3 ,6   ,30,0,5E3  ,5E3 ,0  ,20 ,2  ,1  ,369,20 ], // 209
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [65,14,7 ,2,0x992222,0x666666,3E4   ,1    ,0,2 ,0xFF999999,1,16,16,16,16,0  ,0  ,1000,10,5 ,100,0,0,0  ,0,66  ,66  ,1 ,0   ,50 ,20  ,80  ,1,50  ,0    ,100 ,100 ,100 ,100 ,100,6,0,5 ,0x80FF6010,2,16,32 ,16,32 ,500 ,20,20,95 ,0,1,0,3 ,6   ,30,0,6500 ,5E3 ,0  ,5  ,0  ,0  ,375,5  ], // 210
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Mountaintop ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [70,13,2 ,2,0x993333,0x333333,2E4   ,104  ,1,6 ,0x80FF6010,2,16,20,12,12,30 ,0  ,100 ,10,-1,99 ,0,1,0  ,0,3   ,4   ,30,40  ,300,100 ,60  ,1,50  ,0    ,100 ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,8E3  ,9999,403,4  ,0  ,0  ,0  ,5  ], // 211
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [70,13,5 ,2,0x333399,0x333333,2E4   ,3    ,0,7 ,0xFFCCCCFF,1,32,32,24,24,0  ,20 ,200 ,10,0 ,95 ,0,1,40 ,0,5   ,5   ,1 ,40  ,50 ,100 ,200 ,5,500 ,0    ,0   ,100 ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,8E3  ,9999,383,4  ,0  ,0  ,0  ,5  ], // 212
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [70,13,9 ,2,0x999933,0x333333,2E4   ,3    ,0,2 ,0xFFFFFF66,2,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,50  ,1 ,40  ,100,100 ,250 ,3,0   ,0    ,0   ,0   ,100 ,0   ,100,2,0,15,0xFFFFFF66,1,16,16 ,8 ,8  ,50  ,10,0 ,0  ,0,0,0,1 ,9   ,30,0,8E3  ,9999,402,4  ,0  ,0  ,0  ,5  ], // 213
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [70,13,6 ,2,0x339933,0x333333,2E4   ,4    ,1,3 ,0xFF660033,1,16,16,8 ,8 ,0  ,0  ,1000,10,8 ,100,0,0,0  ,0,1   ,1   ,1 ,80  ,200,50  ,500 ,4,66  ,0    ,0   ,0   ,0   ,100 ,100,2,0,6 ,0xFF660066,2,16,16 ,8 ,8  ,66  ,20,0 ,86 ,0,0,0,1 ,1   ,30,0,8E3  ,9999,404,4  ,0  ,0  ,0  ,5  ], // 214
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Snowfield 3 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [58,2 ,15,1,0x999966,0xFFFFCC,800   ,3    ,1,9 ,0xFFFFFFCC,1,16,16,8 ,8 ,0  ,0  ,50  ,10,0 ,100,0,0,0  ,0,5   ,15  ,1 ,10  ,50 ,20  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,250  ,100 ,0  ,50 ,0  ,0  ,0  ,100], // 215
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [58,10,15,1,0x669999,0xCCFFFF,800   ,3    ,1,4 ,0xFFCCFFFF,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,5   ,15  ,1 ,5   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,250  ,100 ,0  ,50 ,0  ,0  ,0  ,100], // 216
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [60,5 ,8 ,1,0xCC00FF,0x9999CC,2400  ,3    ,1,4 ,0xFF6666FF,1,16,16,8 ,8 ,0  ,0  ,300 ,40,0 ,100,0,0,0  ,0,10  ,30  ,3 ,10  ,50 ,30  ,180 ,2,50  ,0    ,0   ,100 ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,1000,346,10 ,0  ,0  ,352,10 ], // 217
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [62,3 ,16,2,0xFFFFFF,0x990000,38E3  ,4    ,0,2 ,0xFF808080,1,16,16,16,16,0  ,0  ,300 ,10,3 ,100,0,0,0  ,0,10  ,10  ,1 ,200 ,50 ,15  ,350 ,1,50  ,0    ,50  ,0   ,0   ,0   ,90 ,1,0,5 ,0xCCFF6010,1,16,48 ,16,48 ,1000,20,0 ,100,0,0,0,6 ,9   ,1 ,0,6E3  ,1000,359,10 ,0  ,0  ,463,10 ], // 218
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Snowfield 4 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [59,5 ,13,2,0xFFFF33,0x333300,25E3  ,5    ,1,10,0xFFFFFF33,2,16,32,8 ,32,0  ,0  ,500 ,10,2 ,100,0,0,0  ,0,1   ,29  ,1 ,0   ,5  ,100 ,180 ,3,0   ,0    ,0   ,0   ,100 ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,5E3  ,999 ,348,20 ,2  ,1  ,349,20 ], // 219
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [60,8 ,14,2,0x004400,0xDDFFDD,25E3  ,3    ,0,13,0xFF00FF00,1,16,16,4 ,4 ,0  ,0  ,500 ,10,0 ,100,0,2,0  ,0,1   ,1   ,32,5   ,50 ,1000,500 ,4,3   ,0    ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,5E3  ,2500,345,20 ,2  ,1  ,0  ,40 ], // 220
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [61,10,11,2,0x666666,0xCCCCCC,25E3  ,104  ,1,6 ,0x80FF6010,2,16,20,12,12,50 ,0  ,100 ,10,-1,99 ,0,1,0  ,0,2   ,3   ,50,40  ,250,1   ,60  ,1,50  ,0    ,100 ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,5E3  ,5E3 ,351,20 ,2  ,1  ,0  ,40 ], // 221
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [63,4 ,16,1,0xFFFFFF,0x990000,38E3  ,3    ,1,1 ,0xFF990000,1,8 ,8 ,8 ,8 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,5   ,5   ,1 ,10  ,5  ,1000,150 ,0,0   ,0    ,0   ,0   ,0   ,0   ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,6500 ,2E3 ,347,3  ,350,3  ,353,10 ], // 222
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Snowfield 5 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [60,3 ,7 ,1,0xFFCCCC,0x996666,900   ,3    ,0,12,0xFFFFCCCC,1,16,16,8 ,8 ,0  ,0  ,1000,10,0 ,100,0,0,0  ,0,5   ,15  ,1 ,2   ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,150 ,361,50 ,0  ,0  ,0  ,100], // 223
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [61,3 ,13,1,0xFF0066,0x660033,900   ,1    ,1,17,0xFFFF0066,1,16,16,8 ,8 ,0  ,0  ,1000,10,5 ,100,0,0,0  ,0,10  ,10  ,1 ,0   ,30 ,200 ,120 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,400 ,365,50 ,0  ,0  ,0  ,100], // 224
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [62,0 ,3 ,2,0xCCCCFF,0x666666,25E3  ,4    ,0,7 ,0xFFCCCCFF,2,16,16,12,12,0  ,0  ,1000,10,5 ,100,0,0,0  ,0,5   ,5   ,9 ,150 ,250,20  ,300 ,5,1500,0    ,100 ,0   ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,5E3  ,5E3 ,360,20 ,2  ,1  ,363,20 ], // 225
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [64,5 ,14,2,0xCCCCFF,0xFF0066,3E4   ,3    ,0,2 ,0xFFCCCCFF,2,16,16,8 ,8 ,0  ,300,300 ,10,0 ,100,0,2,0  ,0,0   ,0   ,1 ,10  ,50 ,50  ,300 ,2,20  ,0    ,0   ,0   ,0   ,0   ,90 ,2,1,4 ,0xFFCCCCFF,2,8 ,16 ,8 ,8  ,80  ,10,0 ,100,0,0,0,5 ,10  ,30,0,6500 ,3E3 ,0  ,5  ,0  ,0  ,368,10 ], // 226
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Snowfield 6 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [63,0 ,3 ,1,0xFF9999,0x663333,2500  ,4    ,0,12,0xFFFF3333,1,16,16,8 ,8 ,0  ,10 ,1000,10,3 ,100,0,0,0  ,0,10  ,30  ,1 ,200 ,200,1000,1000,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,150 ,362,90 ,0  ,0  ,0  ,100], // 227
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [63,0 ,3 ,1,0xCC6633,0x663300,2500  ,4    ,0,13,0xFF996633,1,16,16,8 ,8 ,0  ,10 ,1000,10,3 ,100,0,0,0  ,0,1   ,5   ,7 ,200 ,200,1000,1000,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,150 ,367,60 ,0  ,0  ,0  ,100], // 228
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [63,5 ,10,1,0xFFCC00,0x996600,2500  ,3    ,1,17,0xFFFFCC00,1,16,16,8 ,8 ,0  ,0  ,1000,10,0 ,100,0,0,0  ,0,5   ,15  ,1 ,5   ,400,1000,1000,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,500  ,150 ,366,40 ,0  ,0  ,0  ,80 ], // 229
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [66,4 ,16,1,0xCC6633,0xFFCC00,6E3   ,2    ,1,17,0xFFFF3333,1,16,16,8 ,8 ,0  ,0  ,1000,10,0 ,100,0,0,0  ,0,5   ,15  ,1 ,15  ,300,1000,1000,0,0   ,0    ,0   ,0   ,0   ,0   ,90 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,650  ,1000,364,30 ,0  ,0  ,393,100], // 230
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Snowfield 7 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [64,8 ,13,1,0x3333FF,0x9999CC,1000  ,3    ,1,16,0xFFCCCCFF,1,16,16,8 ,8 ,0  ,0  ,1000,10,0 ,100,0,0,0  ,0,5   ,5   ,1 ,5   ,200,1000,500 ,5,1000,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,100 ,0  ,50 ,0  ,0  ,371,100], // 231
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [65,1 ,14,9,0xFFFFFF,0x333366,4E4   ,4    ,1,17,0xFF991111,1,32,48,32,32,0  ,50 ,500 ,10,3 ,100,0,0,0  ,0,10  ,50  ,1 ,200 ,150,20  ,300 ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,3,0,6 ,0xCCFF6010,2,16,16 ,16,16 ,80  ,20,0 ,90 ,0,2,0,6 ,9   ,50,0,5500 ,550 ,0  ,20 ,2  ,1  ,372,20 ], // 232
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [63,1 ,16,1,0xFF9900,0x996600,3E3   ,3    ,1,4 ,0xFF33CC33,1,16,16,8 ,8 ,0  ,0  ,20  ,20,0 ,100,0,0,0  ,0,5   ,20  ,1 ,5   ,50 ,50  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,200 ,0  ,50 ,0  ,0  ,374,200], // 233
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [67,1 ,16,9,0xFFFFCC,0xCC9900,6E4   ,4    ,1,17,0xFF666699,1,32,48,32,32,0  ,50 ,1000,10,3 ,100,0,0,0  ,0,10  ,50  ,1 ,200 ,150,20  ,300 ,5,1800,0    ,0   ,0   ,0   ,0   ,90 ,3,1,9 ,0xFFCCFFFF,2,16,16 ,16,16 ,50  ,20,0 ,90 ,0,2,0,5 ,15  ,50,0,7E3  ,1000,0  ,5  ,0  ,0  ,376,10 ], // 234
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Snowfield 8 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [65,1 ,15,1,0xFFFFFF,0x9999CC,2E3   ,2    ,0,13,0xFF666666,1,16,16,8 ,8 ,0  ,0  ,500 ,10,0 ,100,0,0,0  ,0,2   ,3   ,1 ,5   ,50 ,30  ,200 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,150 ,394,90 ,0  ,0  ,400,90 ], // 235
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [66,1 ,15,1,0xFFFF77,0x777777,2E3   ,5    ,1,10,0xFFFFFF33,2,16,16,8 ,16,0  ,0  ,500 ,10,1 ,98 ,0,0,0  ,0,1   ,29  ,1 ,0   ,50 ,20  ,200 ,3,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,150 ,395,90 ,0  ,0  ,401,90 ], // 236
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [67,5 ,8 ,2,0xFF9900,0x993300,15E3  ,203  ,0,2 ,0xCCFF6010,2,16,16,8 ,8 ,0  ,0  ,1000,10,0 ,100,0,0,0  ,0,5   ,10  ,30,5   ,150,30  ,500 ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,3E3 ,396,15 ,397,15 ,399,15 ], // 237
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [69,5 ,8 ,3,0xFFCC33,0xFF9900,3E4   ,3    ,1,16,0xFFFF6010,2,32,32,24,24,0  ,0  ,1000,10,0 ,99 ,1,0,200,0,5   ,20  ,1 ,5   ,300,20  ,500 ,1,50  ,0    ,0   ,0   ,0   ,0   ,95 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,3E3  ,3E3 ,398,10 ,0  ,0  ,409,20 ], // 238
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Frozen Lake ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [64,14,15,1,0x0066CC,0x9999CC,3E3   ,1    ,1,9 ,0xFFCCCCFF,1,16,20,4 ,20,0  ,0  ,200 ,10,5 ,100,0,1,0  ,0,5   ,5   ,1 ,0   ,50 ,50  ,500 ,2,25  ,0    ,0   ,50  ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,500 ,0  ,30 ,0  ,0  ,385,50 ], // 239
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [65,1 ,5 ,2,0xFFFFFF,0x333366,15E3  ,104  ,0,12,0xFFFFFFFF,1,16,16,8 ,8 ,30 ,50 ,300 ,10,3 ,100,0,0,0  ,0,10  ,30  ,5 ,200 ,150,20  ,500 ,0,0   ,0    ,0   ,50  ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,1500,0  ,20 ,0  ,0  ,386,30 ], // 240
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [66,5 ,8 ,2,0xFFFF00,0x666666,15E3  ,1    ,1,18,0xFFFFFF11,2,7 ,32,8 ,32,0  ,0  ,40  ,10,50,100,0,1,0  ,0,1   ,99  ,1 ,0   ,5  ,250 ,80  ,3,0   ,0    ,0   ,50  ,0   ,0   ,80 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,550  ,2E3 ,0  ,20 ,2  ,1  ,387,50 ], // 241
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [68,8 ,14,3,0xFFFFFF,0x0066CC,65E3  ,104  ,1,9 ,0xFF0066CC,1,16,20,8 ,8 ,200,0  ,500 ,10,3 ,100,0,0,0  ,0,25  ,50  ,30,200 ,150,1000,500 ,0,0   ,0    ,0   ,50  ,0   ,0   ,100,1,1,9 ,0xFF0066CC,2,16,20 ,4 ,20 ,500 ,10,5 ,100,0,1,0,25,50  ,1 ,0,7E3  ,3E3 ,0  ,5  ,0  ,0  ,388,10 ], // 242
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Ice Castle, ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [70,10,13,4,0x242428,0x4B3E21,25E4  ,4    ,1,17,0xFFCCBB96,1,32,32,8 ,8 ,0  ,25 ,200 ,10,8 ,100,0,0,0  ,0,100 ,200 ,1 ,80  ,50 ,100 ,100 ,0,0   ,0    ,0   ,100 ,0   ,0   ,100,3,1,6 ,0xFF4B3E21,1,16,16 ,8 ,8  ,50  ,40,0 ,94 ,0,2,0,8 ,8   ,15,1,8E3  ,8E3 ,377,10 ,379,10 ,381,10 ], // 243
    [0 ,0 ,0 ,0,0x000000,0x000000,0     ,6406 ,1,3 ,0xFFCCCCFF,2,16,16,8 ,8 ,0  ,25 ,2E3 ,10,0 ,100,0,2,0  ,0,25  ,50  ,2 ,10  ,100,100 ,500 ,5,500 ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,0    ,0   ,0  ,20 ,0  ,0  ,0  ,100], // 244
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Snowfield 9 ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [66,5 ,17,1,0x666666,0x333333,9E3   ,0    ,0,1 ,0xFFFFFFFF,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,1   ,1   ,1 ,0   ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,300 ,413,60 ,0  ,0  ,0  ,80 ], // 245
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [68,14,17,1,0xCCCCCC,0x666666,2E3   ,1    ,1,17,0xFF4B3E21,1,16,16,4 ,4 ,0  ,0  ,500 ,10,2 ,100,0,0,0  ,0,20  ,30  ,1 ,0   ,50 ,30  ,200 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,200 ,412,50 ,0  ,0  ,0  ,80 ], // 246
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [68,0 ,17,1,0xCCCCCC,0x666666,3E3   ,2    ,1,17,0xFFCC3300,1,16,16,4 ,4 ,0  ,0  ,1000,10,0 ,100,0,0,0  ,0,10  ,20  ,1 ,5   ,50 ,30  ,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,200 ,415,60 ,0  ,0  ,0  ,80 ], // 247
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [71,5 ,17,2,0xFF33FF,0x9900CC,7E4   ,4    ,0,12,0xFFFF33FF,1,16,16,8 ,8 ,0  ,0  ,1000,10,2 ,100,0,2,0  ,0,50  ,60  ,1 ,150 ,10 ,50  ,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,95 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,6E3  ,3E3 ,414,3  ,0  ,0  ,0  ,20 ], // 248
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Beach 4,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [67,7 ,19,1,0xFF99FF,0xCCFF66,3E3   ,3    ,1,4 ,0xFF000066,1,16,16,8 ,8 ,0  ,0  ,40  ,20,0 ,100,0,0,0  ,0,20  ,30  ,1 ,5   ,50 ,30  ,40  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,300  ,300 ,416,90 ,0  ,0  ,0  ,80 ], // 249
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [68,10,18,1,0xCC6666,0x663333,5E3   ,3    ,0,13,0xFF333333,1,16,16,4 ,4 ,0  ,0  ,80  ,20,0 ,100,0,0,0  ,0,7   ,13  ,1 ,10  ,20 ,200 ,80  ,0,0   ,0    ,100 ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,450  ,300 ,411,60 ,0  ,0  ,0  ,80 ], // 250
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [69,9 ,19,1,0xCCCC33,0x669900,6E3   ,4    ,1,14,0xFFFFFF66,1,16,16,8 ,8 ,20 ,60 ,120 ,10,2 ,100,0,0,0  ,0,1   ,45  ,10,50  ,50 ,30  ,250 ,3,0   ,0    ,100 ,100 ,0   ,0   ,95 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,300 ,410,20 ,0  ,0  ,0  ,40 ], // 251
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [72,9 ,19,2,0xFFFFCC,0xCC99FF,75E3  ,1    ,0,15,0xFF222222,1,24,24,16,16,0  ,80 ,1000,20,1 ,92 ,0,0,0  ,0,1   ,90  ,1 ,0   ,10 ,200 ,500 ,0,0   ,0    ,100 ,100 ,0   ,0   ,95 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,6E3  ,3E3 ,417,3  ,0  ,0  ,0  ,20 ], // 252
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Forest 3  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [69,5 ,17,1,0xFF6633,0x666600,9E3   ,104  ,0,13,0xFFFF9966,1,16,16,4 ,4 ,40 ,0  ,200 ,10,3 ,100,0,0,0  ,0,10  ,20  ,10,150 ,200,30  ,80  ,0,0   ,0    ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,400 ,0  ,50 ,0  ,0  ,419,100], // 253
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [69,8 ,7 ,1,0xFF9999,0xFFFFCC,9E3   ,6    ,0,13,0xFFFFFFCC,1,16,16,4 ,4 ,0  ,10 ,200 ,10,3 ,99 ,0,0,0  ,0,20  ,30  ,6 ,25  ,200,1000,500 ,0,0   ,0    ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,400 ,0  ,50 ,0  ,0  ,418,100], // 254
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [70,14,18,1,0xCC33CC,0x663300,9E3   ,1    ,0,12,0xFF660099,1,16,16,8 ,8 ,0  ,0  ,500 ,40,1 ,98 ,0,0,0  ,0,8   ,8   ,1 ,0   ,15 ,200 ,500 ,4,50  ,0    ,0   ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,800 ,0  ,10 ,0  ,0  ,421,20 ], // 255
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [73,6 ,18,2,0xCCCC33,0x996600,12E4  ,104  ,0,13,0xFF669900,1,16,16,4 ,4 ,50 ,0  ,300 ,10,3 ,100,0,0,0  ,0,8   ,8   ,10,200 ,150,30  ,500 ,4,50  ,0    ,0   ,0   ,0   ,100 ,95 ,3,1,6 ,0xFFCCCC00,1,16,16 ,8 ,8  ,1000,40,0 ,99 ,0,2,0,8 ,8   ,3 ,0,6E3  ,4E3 ,0  ,5  ,0  ,0  ,464,10 ], // 256
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Forest 4  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [70,15,8 ,1,0x66FF33,0x336600,1E4   ,3    ,0,13,0xFF663300,1,16,16,4 ,4 ,0  ,0  ,100 ,10,0 ,100,0,0,0  ,0,8   ,9   ,1 ,5   ,50 ,20  ,60  ,0,0   ,0    ,-50 ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,100 ,0  ,80 ,0  ,0  ,420,100], // 257
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [70,15,8 ,2,0x66FF33,0x336600,3E4   ,4    ,0,12,0xFF66CC00,1,16,16,8 ,8 ,0  ,0  ,300 ,10,3 ,100,0,0,0  ,0,1   ,1   ,1 ,150 ,100,20  ,180 ,4,40  ,0    ,-50 ,0   ,0   ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,500 ,0  ,50 ,0  ,0  ,422,80 ], // 258
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [74,15,8 ,3,0x66FF33,0x336600,15E4  ,4    ,0,2 ,0xFF9900CC,1,16,16,8 ,8 ,0  ,0  ,500 ,10,3 ,100,0,0,0  ,0,8   ,8   ,1 ,200 ,150,30  ,500 ,4,50  ,0    ,0   ,0   ,0   ,100 ,95 ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,6E3  ,5E3 ,0  ,5  ,0  ,0  ,423,10 ], // 259
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Forest 5  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [71,4 ,17,1,0xFF6600,0xFF9933,9E3   ,4    ,0,12,0xFFFF6010,2,16,16,4 ,4 ,0  ,20 ,100 ,10,20,100,0,0,0  ,0,6   ,8   ,1 ,40  ,50 ,50  ,80  ,1,50  ,1E4  ,-600,100 ,100 ,100 ,100,1,0,5 ,0x80FF6010,2,16,32 ,16,32 ,100 ,20,0 ,0  ,0,0,0,6 ,8   ,1 ,0,600  ,500 ,0  ,50 ,0  ,0  ,424,100], // 260
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [71,4 ,17,1,0xCCCC00,0xFFFFCC,9E3   ,4    ,1,10,0xFFFFFF33,2,16,16,4 ,4 ,0  ,20 ,100 ,10,20,100,0,0,0  ,0,1   ,15  ,1 ,40  ,50 ,50  ,80  ,3,0   ,1E4  ,100 ,100 ,-600,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,500 ,0  ,50 ,0  ,0  ,425,100], // 261
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [71,4 ,17,1,0x6699FF,0x003399,9E3   ,4    ,1,9 ,0xFF6699FF,2,16,16,4 ,4 ,0  ,20 ,100 ,10,20,100,0,0,0  ,0,4   ,5   ,1 ,40  ,50 ,50  ,80  ,2,50  ,1E4  ,100 ,-600,100 ,100 ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,500 ,0  ,50 ,0  ,0  ,427,80 ], // 262
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [75,4 ,19,2,0x666666,0xFFFFFF,12E4  ,806  ,1,17,0xFF666666,1,16,16,4 ,4 ,40 ,20 ,300 ,10,10,99 ,0,0,0  ,0,20  ,30  ,16,50  ,50 ,100 ,500 ,0,0   ,-100 ,100 ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,6E3  ,5E3 ,426,5  ,0  ,0  ,428,5  ], // 263
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Forest 6  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [73,1 ,12,9,0x404040,0xCCCC00,8E3   ,4    ,1,18,0xFFFFFF10,2,16,16,8 ,8 ,0  ,500,500 ,10,3 ,100,0,0,0  ,0,0   ,0   ,1 ,150 ,150,50  ,500 ,3,0   ,99999,100 ,100 ,100 ,100 ,100,1,0,18,0xFFFFFF11,2,64,500,40,500,10  ,10,0 ,0  ,1,0,1,1 ,9999,1 ,0,1200 ,7E3 ,430,10 ,432,10 ,434,10 ], // 264
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [72,2 ,12,1,0xFFCC66,0xFFFFCC,5E3   ,3    ,1,9 ,0xFF996600,1,16,16,4 ,4 ,0  ,0  ,500 ,10,0 ,100,0,0,0  ,0,6   ,9   ,1 ,2   ,50 ,50  ,80  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,500 ,431,80 ,0  ,0  ,0  ,80 ], // 265
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [72,15,12,1,0x66CC33,0xFFFFCC,1E4   ,1    ,0,9 ,0xFF996600,1,16,16,4 ,16,0  ,0  ,200 ,10,5 ,100,0,1,0  ,0,6   ,9   ,1 ,0   ,50 ,50  ,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,600  ,500 ,429,80 ,0  ,0  ,0  ,80 ], // 266
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [76,1 ,12,9,0x404040,0x990000,12E3  ,2    ,1,18,0xFFFF2210,2,32,64,64,4 ,0  ,0  ,1000,10,0 ,100,1,0,0  ,1,10  ,10  ,1 ,5   ,250,50  ,500 ,1,50  ,99999,100 ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,6E3  ,7E3 ,433,6  ,435,6  ,436,6  ], // 267
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// !!! ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [74,16,18,1,0x9900CC,0xCCCCFF,1E4   ,3    ,0,13,0xFF660099,1,16,16,4 ,4 ,0  ,0  ,250 ,10,0 ,100,0,0,0  ,0,1   ,1   ,1 ,5   ,10 ,100 ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,700  ,70  ,0  ,50 ,437,99 ,438,100], // 268
    [77,16,18,2,0xCC00CC,0xCCCCFF,15E4  ,4803 ,0,12,0xFF990099,1,16,16,4 ,4 ,0  ,0  ,500 ,10,0 ,100,0,2,0  ,0,1   ,1   ,3 ,10  ,5  ,1000,400 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,7E3  ,77  ,0  ,10 ,439,10 ,440,10 ], // 269
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell 1 ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [74,4 ,20,1,0xCCCCCC,0x666666,15E3  ,2    ,1,19,0xFFFFFFFF,1,8 ,16,16,16,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,10  ,15  ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,100 ,0  ,80 ,0  ,0  ,445,300], // 270
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [75,4 ,20,1,0xCC3300,0x444444,1E4   ,104  ,1,6 ,0xFFFF6010,2,8 ,8 ,8 ,8 ,6  ,0  ,50  ,10,-1,99 ,0,1,0  ,0,5   ,8   ,3 ,40  ,10 ,500 ,40  ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,200 ,0  ,10 ,0  ,0  ,443,20 ], // 271
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [75,0 ,20,1,0x333333,0x882200,25E3  ,4    ,1,17,0xFFFF6010,1,24,16,8 ,8 ,0  ,500,500 ,10,3 ,100,0,0,0  ,0,0   ,0   ,1 ,150 ,250,50  ,500 ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,6,0,5 ,0x80FF6010,2,16,32 ,16,32 ,100 ,20,5 ,99 ,0,1,0,3 ,5   ,9 ,0,800  ,200 ,0  ,10 ,0  ,0  ,444,20 ], // 272
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [78,0 ,20,3,0x333333,0x882200,15E4  ,1604 ,1,17,0xFFFF6010,1,24,16,8 ,8 ,0  ,0  ,500 ,10,3 ,100,0,0,0  ,0,10  ,15  ,3 ,150 ,50 ,10  ,500 ,1,50  ,0    ,0   ,0   ,0   ,0   ,100,6,0,5 ,0x80FF6010,2,16,32 ,16,32 ,100 ,20,5 ,99 ,0,1,0,3 ,5   ,9 ,0,8E3  ,500 ,441,5  ,0  ,0  ,442,10 ], // 273
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell 2 ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [75,16,20,1,0xCCCCCC,0x666666,1E4   ,3    ,1,19,0xFFFFFFFF,1,6 ,6 ,8 ,8 ,0  ,0  ,80  ,10,0 ,100,0,0,0  ,0,1   ,9   ,1 ,5   ,50 ,20  ,60  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,300 ,2  ,2  ,446,300,447,300], // 274
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [77,1 ,18,2,0xFFFF00,0x663300,9E4   ,6    ,1,19,0xCCFFFF11,2,16,16,16,16,0  ,20 ,200 ,10,0 ,96 ,0,0,500,0,1   ,33  ,9 ,50  ,50 ,50  ,40  ,3,0   ,0    ,0   ,0   ,100 ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,5E3 ,451,5  ,0  ,0  ,448,20 ], // 275
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [77,5 ,13,2,0xCCFF00,0x333300,9E4   ,3    ,1,18,0xFFCCFF33,2,8 ,8 ,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,33  ,1 ,30  ,9  ,250 ,300 ,3,0   ,0    ,0   ,0   ,100 ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,5E3 ,449,20 ,0  ,0  ,450,20 ], // 276
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [79,5 ,20,3,0x333333,0xFFEE00,18E4  ,3    ,1,19,0xFFFFEE00,2,8 ,8 ,8 ,8 ,0  ,0  ,300 ,10,0 ,100,0,0,500,0,1   ,33  ,1 ,30  ,4  ,250 ,500 ,3,0   ,0    ,0   ,0   ,100 ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,8E3  ,5E3 ,0  ,5  ,0  ,0  ,465,10 ], // 277
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell 3 ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [76,11,20,1,0xCCCCCC,0x667373,15E3  ,4    ,1,19,0xFF999999,1,8 ,8 ,4 ,4 ,0  ,0  ,200 ,10,5 ,100,0,0,0  ,0,9   ,12  ,1 ,120 ,50 ,1000,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,300 ,453,80 ,0  ,0  ,0  ,100], // 278
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [78,11,20,3,0x99CCFF,0x667373,9E4   ,4503 ,1,19,0xCC99CCFF,2,12,12,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,2,0  ,0,1   ,1   ,5 ,20  ,5  ,1000,500 ,5,500 ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,4E3  ,4E3 ,452,10 ,0  ,0  ,0  ,20 ], // 279
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [76,1 ,17,1,0xCC3300,0x667373,15E3  ,3    ,1,6 ,0xFFFF6010,2,16,16,8 ,8 ,0  ,0  ,50  ,10,-1,99 ,1,0,0  ,0,3   ,6   ,1 ,5   ,20 ,40  ,40  ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,300 ,454,80 ,0  ,0  ,0  ,100], // 280
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [80,0 ,17,3,0xCC3300,0x667373,18E4  ,1    ,0,2 ,0xFFFF6020,2,32,32,24,24,0  ,0  ,2E3 ,10,0 ,100,1,0,500,0,3   ,6   ,1 ,0   ,500,1000,500 ,1,100 ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,8E3  ,6E3 ,0  ,5  ,0  ,0  ,467,10 ], // 281
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell 4 ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [77,17,17,1,0x00AA00,0x443322,15E3  ,3    ,1,12,0xFF00AA00,2,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,1,0,0  ,0,6   ,9   ,1 ,10  ,50 ,20  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,500 ,455,60 ,0  ,0  ,0  ,100], // 282
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [77,17,20,1,0x0099BB,0x224444,15E3  ,4    ,1,19,0xFF0099BB,2,8 ,8 ,8 ,8 ,0  ,0  ,200 ,10,5 ,100,1,0,0  ,0,9   ,12  ,1 ,120 ,50 ,20  ,200 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,500 ,457,60 ,0  ,0  ,0  ,100], // 283
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [79,17,11,1,0xCC3300,0x333333,15E3  ,3    ,0,6 ,0xFFFF6010,2,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,98 ,1,0,0  ,0,2   ,3   ,1 ,20  ,10 ,200 ,120 ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,1500,458,40 ,0  ,0  ,0  ,20 ], // 284
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [81,5 ,13,3,0xCC9933,0x443322,2E5   ,4    ,1,17,0xFFCC9933,2,16,16,8 ,8 ,10 ,0  ,1000,10,1 ,100,0,0,0  ,0,9   ,12  ,30,200 ,100,50  ,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,8E3  ,7E3 ,456,5  ,0  ,0  ,468,10 ], // 285
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell 5 ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [79,4 ,12,2,0x444444,0x555555,9E4   ,4    ,1,17,0xFF666666,1,80,64,16,16,0  ,0  ,200 ,10,4 ,100,0,0,0  ,0,100 ,200 ,1 ,100 ,200,20  ,100 ,0,0   ,0    ,100 ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,9999,2  ,2  ,471,20 ,0  ,100], // 286
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [79,4 ,12,2,0x444444,0x444444,9E4   ,6    ,1,3 ,0xFF996633,1,16,16,8 ,8 ,0  ,0  ,200 ,10,4 ,100,0,0,0  ,0,60  ,90  ,10,30  ,200,20  ,200 ,0,0   ,0    ,100 ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,9999,2  ,2  ,472,20 ,0  ,100], // 287
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [79,4 ,12,2,0x444444,0x333333,9E4   ,1    ,1,1 ,0xFFCC0066,2,24,24,12,12,0  ,170,200 ,20,0 ,100,1,0,200,0,100 ,200 ,1 ,0   ,200,20  ,200 ,0,0   ,0    ,100 ,100 ,100 ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,800  ,9999,2  ,2  ,477,20 ,0  ,20 ], // 288
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [82,4 ,11,1,0x999999,0x999999,5E4   ,1604 ,1,17,0xFF99CCFF,2,16,16,8 ,8 ,10 ,100,1000,10,1 ,100,0,0,0  ,0,10  ,20  ,6 ,250 ,200,20  ,100 ,5,250 ,0    ,0   ,100 ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,2E3  ,9999,476,10 ,0  ,0  ,466,25 ], // 289
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell 6 ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [80,2 ,20,1,0xFFFF33,0x996633,12E3  ,6403 ,1,20,0xFFFFFF33,2,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,9   ,2 ,30  ,50 ,50  ,80  ,3,0   ,0    ,0   ,0   ,75  ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,500 ,478,100,0  ,0  ,0  ,100], // 290
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [80,16,18,1,0x009900,0x996633,12E3  ,5603 ,0,13,0xFF009900,1,16,16,4 ,4 ,0  ,0  ,500 ,10,0 ,100,0,0,0  ,0,1   ,1   ,9 ,5   ,300,1   ,300 ,4,66  ,0    ,0   ,0   ,0   ,75  ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,500 ,475,90 ,0  ,0  ,0  ,100], // 291
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [81,3 ,19,1,0xFF6010,0x996633,15E3  ,3    ,1,22,0xFFFF6010,2,16,16,12,12,0  ,0  ,200 ,20,0 ,98 ,1,0,0  ,0,8   ,8   ,1 ,20  ,10 ,50  ,200 ,1,50  ,0    ,75  ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,1500,473,20 ,0  ,0  ,0  ,20 ], // 292
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [83,8 ,8 ,2,0x0066CC,0x0066CC,2E5   ,403  ,1,22,0xFF3399FF,2,16,16,8 ,8 ,25 ,0  ,1000,10,0 ,100,0,0,0  ,0,2   ,4   ,8 ,10  ,25 ,1000,1000,5,500 ,0    ,0   ,100 ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,9E3  ,3E3 ,474,2  ,0  ,0  ,469,10 ], // 293
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Inferno 1 , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [81,4 ,19,1,0xFFCCCC,0x993366,2E4   ,2    ,1,1 ,0xFF993366,1,16,16,8 ,8 ,0  ,0  ,10  ,20,0 ,100,0,0,0  ,0,15  ,30  ,1 ,20  ,50 ,50  ,30  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,400 ,483,100,0  ,0  ,0  ,100], // 294
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [81,4 ,19,1,0xCCCCFF,0x663399,2E4   ,3    ,1,9 ,0xFF663399,1,16,16,8 ,8 ,0  ,0  ,150 ,10,0 ,100,0,0,0  ,0,4   ,6   ,1 ,8   ,50 ,50  ,120 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,400 ,486,100,0  ,0  ,0  ,100], // 295
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [82,0 ,20,3,0xFFCCCC,0x993366,1E5   ,104  ,1,3 ,0xFFFF6666,1,16,16,8 ,8 ,100,10 ,1000,10,5 ,100,0,0,50 ,0,10  ,20  ,50,150 ,300,50  ,300 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,4E3 ,481,5  ,0  ,0  ,0  ,20 ], // 296
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [84,0 ,20,5,0xCCCCFF,0x663399,2E5   ,104  ,1,3 ,0xFFCC66FF,1,16,16,8 ,8 ,100,10 ,160 ,10,5 ,100,0,2,100,0,10  ,20  ,50,150 ,300,50  ,1000,0,0   , 0   ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,9E3  ,4E3 ,484,3  ,0  ,0  ,470,10 ], // 297
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Inferno 2 , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [82,5 ,20,1,0xCC9933,0x996633,2E4   ,4    ,1,20,0xFFCC9933,1,16,16,8 ,8 ,0  ,10 ,1000,10,3 ,100,0,0,0  ,0,10  ,30  ,1 ,200 ,150,1000,1000,0,0   ,0    ,100 ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,900 ,480,100,0  ,0  ,0  ,100], // 298
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [82,5 ,20,1,0x33CCCC,0x996633,2E4   ,4    ,1,19,0xFF33CCCC,1,8 ,8 ,8 ,8 ,0  ,10 ,1000,10,3 ,100,0,0,0  ,0,10  ,30  ,1 ,200 ,150,50  ,1000,0,0   ,0    ,100 ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,900 ,479,100,0  ,0  ,0  ,100], // 299
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [82,11,20,1,0xCC66CC,0x666666,2E4   ,4    ,1,9 ,0xFFCC66CC,1,16,16,8 ,8 ,0  ,10 ,1000,10,3 ,100,0,0,0  ,0,10  ,30  ,1 ,200 ,50 ,1000,1000,0,0   ,0    ,100 ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,900 ,482,100,0  ,0  ,0  ,100], // 300
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [85,0 ,18,2,0xFFCC00,0xCC9933,2E5   ,2    ,1,18,0xFFFF3311,2,16,16,8 ,8 ,0  ,0  ,500 ,10,0 ,100,1,0,0  ,0,20  ,30  ,1 ,10  ,10 ,20  ,300 ,1,50  ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,9E3  ,9E3 ,485,3  ,541,10 ,543,10 ], // 301
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Inferno 3 , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [83,10,18,1,0xCC3300,0x333333,2E4   ,2    ,1,20,0xFFFF6010,2,16,16,8 ,8 ,0  ,0  ,200 ,20,0 ,99 ,0,0,20 ,0,2   ,3   ,1 ,1   ,10 ,100 ,500 ,1,50  ,0    ,100 ,0   ,0   ,-200,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,1500,0  ,100,0  ,0  ,492,160], // 302
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [83,10,18,1,0xCC9900,0x333333,2E4   ,2    ,1,20,0xFFFFFF33,2,16,16,8 ,8 ,0  ,0  ,200 ,20,0 ,100,0,0,0  ,0,1   ,30  ,1 ,1   ,10 ,100 ,500 ,3,0   ,0    ,0   ,0   ,100 ,-200,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,1500,0  ,100,0  ,0  ,491,160], // 303
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [83,10,18,1,0x0066CC,0x333333,2E4   ,2    ,1,20,0xFF3366CC,2,16,16,8 ,8 ,0  ,0  ,200 ,20,0 ,100,0,0,0  ,0,5   ,5   ,1 ,1   ,10 ,100 ,500 ,5,50  ,0    ,0   ,100 ,0   ,-200,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,1500,0  ,100,0  ,0  ,494,160], // 304
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [86,10,18,2,0x00CC00,0x333333,2E5   ,603  ,1,20,0xFF33CC33,2,16,16,8 ,8 ,20 ,0  ,250 ,10,0 ,100,0,0,0  ,0,1   ,1   ,40,10  ,300,20  ,200 ,4,666 ,0    ,0   ,0   ,0   ,100 ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,9E3  ,9999,493,3  ,495,6  ,544,10 ], // 305
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Blood Lake, ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [84,7 ,21,1,0xCC3300,0xCC6633,22E3  ,3    ,1,9 ,0xFFFF9966,1,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,5   ,15  ,1 ,10  ,50 ,50  ,100 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,3333,487,50 ,0  ,0  ,0  ,100], // 306
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [84,5 ,21,1,0x226622,0x448844,22E3  ,6406 ,0,13,0xFF779977,1,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,5   ,5   ,5 ,5   ,50 ,50  ,200 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,3333,488,25 ,0  ,0  ,0  ,100], // 307
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [84,14,21,1,0x3366CC,0x9999CC,22E3  ,1    ,1,17,0xFFCCCCFF,1,16,16,8 ,8 ,0  ,0  ,200 ,10,3 ,100,0,0,0  ,0,5   ,5   ,1 ,0   ,50 ,50  ,200 ,5,150 ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,100  ,3333,490,200,0  ,0  ,0  ,100], // 308
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [87,16,21,3,0x996600,0xFFCC00,25E4  ,6403 ,0,13,0xFFFFCC00,1,16,16,8 ,8 ,0  ,0  ,250 ,10,0 ,100,0,0,0  ,0,5   ,15  ,7 ,10  ,10 ,1000,400 ,0,0   ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,9999,489,3  ,547,10 ,548,10 ], // 309
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Cavern 7  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [85,5 ,8 ,1,0x33CCFF,0x003366,24E3  ,3    ,0,12,0xFF33CCFF,2,16,16,8 ,8 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,6   ,8   ,1 ,6   ,50 ,50  ,200 ,0,0   ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,300 ,497,80 ,0  ,0  ,0  ,100], // 310
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [85,18,8 ,1,0xCC33FF,0x330066,24E3  ,4    ,0,12,0xFFCC33FF,2,16,16,8 ,8 ,0  ,0  ,200 ,10,2 ,100,0,0,0  ,0,6   ,8   ,1 ,100 ,50 ,50  ,200 ,0,0   ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,300 ,503,80 ,0  ,0  ,0  ,100], // 311
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [86,2 ,13,1,0xCC3300,0x996633,3E4   ,104  ,1,22,0x80FF6010,2,12,12,6 ,6 ,30 ,0  ,100 ,10,-1,99 ,1,0,0  ,0,4   ,6   ,30,80  ,200,100 ,30  ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,900 ,498,10 ,0  ,0  ,528,30 ], // 312
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [88,5 ,6 ,3,0xCCFF33,0x999933,24E4  ,104  ,0,12,0xFFFFFF33,2,16,16,8 ,8 ,90 ,0  ,300 ,10,3 ,100,0,2,0  ,0,8   ,9   ,30,150 ,100,50  ,500 ,3,0   ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,9E3  ,5E3 ,499,3  ,502,3  ,529,5  ], // 313
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [86,16,21,1,0xEEEE00,0x333333,15E4  ,6403 ,1,20,0xFFFFFF33,2,12,12,6 ,6 ,0  ,0  ,150 ,10,0 ,100,0,2,0  ,0,3   ,3   ,3 ,10  ,10 ,250 ,200 ,3,0   ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,5E3 ,496,10 ,500,10 ,501,10 ], // 314
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Cavern 8  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [86,5 ,6 ,1,0xCC9900,0x996600,24E3  ,4    ,0,12,0xFFFFCC33,2,16,16,8 ,8 ,0  ,0  ,200 ,10,3 ,100,0,0,0  ,0,6   ,8   ,1 ,100 ,50 ,50  ,200 ,0,0   ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,400 ,505,100,0  ,0  ,0  ,100], // 315
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [86,18,6 ,1,0x9999CC,0x666699,24E3  ,1    ,0,7 ,0xFF99CCFF,2,12,12,8 ,8 ,0  ,0  ,200 ,10,2 ,100,0,0,0  ,0,1   ,5   ,1 ,0   ,100,50  ,200 ,5,500 ,0    ,-100,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,400 ,504,100,507,100,510,100], // 316
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [87,1 ,13,1,0xFF3300,0xFF9900,3E4   ,3    ,1,18,0xFFFF6010,2,16,16,8 ,8 ,0  ,0  ,1000,10,0 ,100,1,0,0  ,0,10  ,20  ,1 ,5   ,50 ,50  ,500 ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,1000,509,10 ,0  ,0  ,530,20 ], // 317
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [89,5 ,8 ,3,0xFF3300,0xFF9900,24E4  ,2406 ,1,20,0xFFFF6010,2,16,16,8 ,8 ,0  ,0  ,1500,10,0 ,100,0,2,0  ,0,30  ,50  ,7 ,5   ,100,50  ,500 ,1,50  ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,9E3  ,6E3 ,508,3  ,511,3  ,531,5  ], // 318
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [87,16,21,1,0xFFCC00,0x333333,15E4  ,12806,1,20,0xFFFFFF33,2,12,12,6 ,6 ,0  ,0  ,150 ,10,0 ,100,0,2,0  ,0,4   ,4   ,4 ,10  ,10 ,250 ,200 ,3,0   ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,900  ,6E3 ,506,10 ,532,20 ,545,40 ], // 319
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell 7 ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [87,6 ,21,1,0x009900,0xCC6600,2E4   ,1    ,0,21,0xFFCCFFCC,1,16,16,8 ,8 ,0  ,0  ,30  ,30,0 ,100,0,0,0  ,0,4   ,6   ,1 ,0   ,50 ,50  ,50  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,300 ,519,150,515,150,538,400], // 320
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [87,6 ,21,2,0x884400,0xCC6600,26E3  ,104  ,1,3 ,0xFF663300,1,16,16,8 ,8 ,20 ,0  ,500 ,10,3 ,100,0,0,0  ,0,5   ,5   ,2 ,150 ,5  ,250 ,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,400 ,512,15 ,518,15 ,539,30 ], // 321
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [88,6 ,21,3,0xCCCC33,0xCC6600,32E3  ,1    ,1,18,0xFFFFFF33,2,8 ,32,8 ,32,0  ,0  ,40  ,10,50,100,0,1,0  ,0,1   ,55  ,1 ,0   ,5  ,250 ,250 ,3,0   ,0    ,0   ,0   ,100 ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,500 ,513,15 ,514,15 ,537,30 ], // 322
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [90,6 ,21,4,0xFF3300,0xFF9900,25E4  ,104  ,1,21,0xFFFF6010,2,32,32,24,24,60 ,0  ,900 ,10,3 ,99 ,0,2,0  ,0,12  ,16  ,15,100 ,100,50  ,500 ,1,50  ,0    ,100 ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1E4  ,600 ,516,3  ,517,3  ,540,5  ], // 323
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell 8 ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [88,1 ,20,1,0xCCFFFF,0xFFCC66,5E3   ,3    ,1,4 ,0xFFCCFFFF,1,32,32,16,16,0  ,0  ,30  ,30,0 ,100,0,0,0  ,0,10  ,20  ,1 ,20  ,100,50  ,50  ,0,0   ,1000 ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,500 ,522,200,526,200,535,500], // 324
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [89,16,13,5,0x444433,0xEEEE00,7E4   ,3    ,1,20,0xFFFFFF33,2,32,16,4 ,4 ,0  ,0  ,200 ,10,0 ,100,0,0,0  ,0,1   ,30  ,1 ,30  ,5  ,1000,300 ,3,0   ,0    ,0   ,0   ,100 ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,700 ,520,5  ,533,10 ,534,10 ], // 325
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [89,13,10,3,0x443333,0xFF4010,8E4   ,3    ,1,6 ,0xFFFF6010,2,32,40,32,32,0  ,0  ,100 ,10,-1,98 ,0,1,0  ,0,12  ,15  ,2 ,20  ,5  ,250 ,300 ,1,50  ,0    ,100 ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,600 ,521,5  ,523,5  ,524,5  ], // 326
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [91,1 ,20,1,0xFF66CC,0xFFCC66,25E4  ,2    ,1,19,0xCCFF66CC,2,32,32,32,32,0  ,0  ,1000,10,0 ,100,1,0,0  ,0,500 ,600 ,1 ,5   ,600,50  ,500 ,0,0   ,1000 ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1E4  ,1000,525,3  ,527,3  ,536,5  ], // 327
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell Gate , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [89,4 ,4 ,1,0xCCCCCC,0x333366,3E4   ,2    ,1,1 ,0xFFFF3333,1,16,16,8 ,8 ,0  ,0  ,10  ,10,0 ,100,0,0,0  ,0,60  ,80  ,1 ,1   ,50 ,20  ,20  ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,1000,549,200,0  ,0  ,550,200], // 328
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [90,4 ,4 ,1,0xCC0000,0x333366,5E4   ,4    ,0,2 ,0xFF666666,1,8 ,8 ,8 ,8 ,0  ,0  ,300 ,10,3 ,100,0,0,0  ,0,10  ,30  ,4 ,150 ,50 ,15  ,150 ,1,0   ,0    ,0   ,0   ,0   ,0   ,0  ,1,0,24,0xFFFF6010,1,16,48 ,12,36 ,100 ,20,0 ,100,0,0,0,10,20  ,1 ,0,1000 ,3E3 ,553,40 ,555,40 ,556,40 ], // 329
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [90,0 ,3 ,1,0xCC0000,0xCCCCCC,5E4   ,104  ,1,17,0xFF6666CC,1,16,16,8 ,8 ,50 ,20 ,300 ,10,5 ,100,0,0,50 ,0,5   ,5   ,10,100 ,50 ,15  ,300 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1000 ,3E3 ,551,25 ,552,25 ,554,25 ], // 330
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [92,4 ,4 ,2,0xCCCCCC,0x333366,3E5   ,5    ,1,1 ,0xFFFF3333,1,32,16,32,8 ,0  ,0  ,200 ,20,5 ,99 ,0,0,0  ,0,300 ,500 ,5 ,0   ,150,100 ,250 ,0,0   ,0    ,0   ,0   ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1E4  ,9999,542,10 ,0  ,0  ,546,10 ], // 331
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Hell Castle ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [99,4 ,4 ,3,0xBBBBBB,0x885522,999999,3    ,0,2 ,0xFFFF6010,2,16,16,16,16,0  ,0  ,100 ,20,0 ,98 ,1,0,0  ,0,6   ,7   ,24,15  ,60 ,300 ,100 ,1,100 ,0    ,0   ,100 ,0   ,0   ,100,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,5,99999,9999,557,2  ,0  ,0  ,0  ,10 ], // 332
    [0 ,0 ,0 ,0,0x000000,0x000000,0     ,5    ,1,20,0xFF6699FF,2,8 ,8 ,4 ,4 ,0  ,0  ,300 ,10,3 ,100,0,0,0  ,0,5   ,5   ,10,0   ,60 ,300 ,300 ,2,20  ,0    ,0   ,0   ,0   ,0   ,0  ,2,0,15,0xFF99CCFF,2,8 ,8  ,4 ,4  ,50  ,20,0 ,98 ,0,0,0,5 ,5   ,20,0,0    ,0   ,0  ,0  ,0  ,0  ,0  ,0  ], // 333
    [0 ,0 ,0 ,0,0x000000,0x000000,0     ,9    ,1,18,0xFFFFFF33,2,8 ,16,16,16,30 ,0  ,100 ,10,0 ,100,0,0,0  ,0,1   ,33  ,6 ,50  ,60 ,300 ,500 ,3,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,0    ,0   ,0  ,0  ,0  ,0  ,0  ,0  ], // 334
    [0 ,0 ,0 ,0,0x000000,0x000000,0     ,4    ,1,3 ,0xFF663300,1,16,16,16,16,50 ,50 ,400 ,10,2 ,100,0,0,0  ,0,1   ,1   ,20,300 ,60 ,300 ,500 ,4,66  ,0    ,0   ,0   ,0   ,0   ,0  ,1,0,6 ,0xFF669900,1,32,32 ,24,24 ,50  ,50,0 ,100,0,0,0,1 ,1   ,1 ,0,0    ,0   ,0  ,0  ,0  ,0  ,0  ,0  ], // 335
    [0 ,0 ,0 ,0,0x000000,0x000000,0     ,3    ,1,17,0xFF99CCFF,2,16,16,4 ,4 ,0  ,0  ,100 ,10,0 ,100,0,2,0  ,0,8   ,8   ,1 ,75  ,60 ,300 ,500 ,5,1800,0    ,0   ,0   ,0   ,0   ,0  ,1,0,7 ,0xFF99CCFF,2,48,48 ,16,16 ,10  ,6 ,0 ,100,0,0,0,5 ,5   ,1 ,0,0    ,0   ,0  ,0  ,0  ,0  ,0  ,0  ], // 336
    [0 ,0 ,0 ,0,0x000000,0x000000,0     ,8    ,0,25,0xFF990000,1,64,64,40,48,0  ,90 ,100 ,20,0 ,100,0,0,0  ,1,9999,9999,1 ,0   ,60 ,300 ,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,0    ,0   ,0  ,0  ,0  ,0  ,0  ,0  ], // 337
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Volcano,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
  //[  ,  ,  , ,        ,        ,      ,     , ,  ,          , ,  ,  ,  ,  ,   ,   ,    ,  ,  ,   , , ,   , ,    ,    ,  ,    ,   ,    ,    , ,    ,     ,    ,    ,    ,    ,   , , ,  ,          , ,  ,   ,  ,   ,    ,  ,  ,   , , , ,  ,    ,  , ,     ,    ,   ,   ,   ,   ,   ,   ],
    [95,13,21,1,0xFFD700,0x993300,99999 ,1    ,1,17,0xFFFF3300,2,8 ,8 ,4 ,4 ,0  ,0  ,300 ,10,3 ,99 ,0,0,0  ,0,10  ,20  ,1 ,0   ,60 ,50  ,500 ,0,0   ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,1E4  ,9999,561,100,0  ,0  ,0  ,5  ], // 338
  //[0 ,1 ,2 ,3,4       ,5       ,6     ,7    ,8,9 ,10        ,1,12,13,14,15,16 ,17 ,18  ,19,20,21 ,2,3,24 ,5,26  ,27  ,28,29  ,30 ,31  ,32  ,3,34  ,35   ,36  ,37  ,38  ,39  ,40 ,1,2,43,44        ,5,46,47 ,48,49 ,50  ,51,52,53 ,4,5,6,57,58  ,59,0,61   ,62  ,63 ,64 ,65 ,66 ,67 ,68 ],
// Other
    [13,5 ,2 ,1,0xEE9933,0x996633,250   ,1    ,0,5 ,0xFFFF6010,2,16,16,16,8,0  ,0  ,120  ,20,1,100 ,0,1,0  ,0,1   ,2   ,1 ,15  ,50 ,200 ,30  ,1,50  ,0    ,0   ,0   ,0   ,0   ,0  ,0,0,0 ,0xFF000000,1,0 ,0  ,0 ,0  ,0   ,0 ,0 ,0  ,0,0,0,0 ,0   ,0 ,0,200  ,70  ,56 ,15 ,0  ,0  ,0  ,0  ], // Elite fire attack 339

    []
];
var Hitboxvar1 = [20,20,20,20,18,8 ,20,20,8 ,20,16,16,20,20,16,16,16,14,8];  // original name: fh
var Hitboxvar2 = [20,20,20,20,24,40,20,20,20,20,16,24,20,20,16,16,16,14,40]; // original name: gh
var Text_Spacing = [1,0.2,1,0.2,2,0.5,1,0.1,1,0.1,1,1,0.1,0.1,1,1,0.2,1,0.5];          // original name: Text_Spacing


// enemy variable type (prototype)
Enemies = new SR_Enemy; // G = new hh
function SR_Enemy(){ // original name: hh()
    var EN_arr_size = 300*DIRE_Enemy_Lim_Mult*DIRE_Enemy_Lim_Mult; // required to prevent game from crashing by trying to load too many enemies
    this.EN_index_current = 0;                           // current count      original name: .index
    this.EN_joint = Array(EN_arr_size);                  // all the joints in the enemy's body       original name: .a
    this.EN_joint_destination = Array(EN_arr_size);      // position of the joint for the next frame      original name: .c
    this.EN_species_ID = new Int32Array(EN_arr_size);    // species ID number     original name: .step
    this.EN_array_ID = new Int32Array(EN_arr_size);      // position in enemy array  original name: .id
    this.EN_state = new Int32Array(EN_arr_size);         // activity status       original name: .d      (0): not spawned (1): player is to the left (2): player is to the right (3): dead
    this.EN_piece_size = new Int32Array(EN_arr_size);    // dead enemy remains original name: .count
    this.EN_is_grounded = new Int32Array(EN_arr_size);   // ground collision   original name: .state
    this.EN_health = new Int32Array(EN_arr_size);        // health of enemy    original name: .r
    this.EN_reload = new Int32Array(EN_arr_size);        // duration of reload original name: .l
    this.EN_is_found = new Int32Array(EN_arr_size);      // found status       original name: .search
    this.EN_is_provoked = new Int32Array(EN_arr_size);   // when enemy is hit  original name: .S
    this.EN_ice_ticks = new Int32Array(EN_arr_size);     // duration of slow   original name: .C
    this.EN_slowness = new Int32Array(EN_arr_size);      // percent of slow    original name: .X
    this.EN_poison_ticks = new Int32Array(EN_arr_size);  // duration of poison original name: .D
    this.EN_poison_dmg = new Int32Array(EN_arr_size);    // damage of poison   original name: .H
    this.EN_frozen_ticks = new Int32Array(EN_arr_size);  // duration of freeze original name: .B
    this.EN_elite_type = new Int32Array(EN_arr_size);    // elite type  
    this.healthMult = new Int32Array(EN_arr_size);       // enemy health multiplier
    this.sizeMult = new Int32Array(EN_arr_size);         // enemy size
    this.EN_index_total = 0;                             // cumulative count   original name: .bb
    this.EN_center = 20;                                 // center of body     original name: .n
    for (var i=0; i<EN_arr_size; i++){
        this.EN_joint[i] = Array(21);
        this.EN_joint_destination[i] = Array(21);
        for (var j=0; j<21; j++){
            this.EN_joint[i][j] = new Vector2D;
            this.EN_joint_destination[i][j] = new Vector2D;
        }
    }
}

//aa = hh.prototype;
SR_Enemy.prototype.ENreset = function(){ // aa.j
    this.EN_index_total = 0;
    this.EN_index_current = 0;
};

SR_Enemy.prototype.ENspawn = function(x_pos,y_pos,ID){ // aa.add
    var EN_limit = floor(100*Enemy_Spawn_Scale*DIRE_Enemy_Lim_Mult/100);
    if (this.EN_index_current!=EN_limit && this.EN_index_total!=EN_limit){
        x_pos *= 8;
        y_pos *= 8;

        for (var i=0; i<21; i++){
            assignVector2D(this.EN_joint[this.EN_index_current][i],x_pos+random(1),y_pos+random(1)); // makes enemies move slightly when spawned in
            this.EN_joint_destination[this.EN_index_current][i].Vset(this.EN_joint[this.EN_index_current][i]);
        }
        this.EN_array_ID[this.EN_index_current] = ID;
        this.EN_species_ID[this.EN_index_current] = EN_Info[ID][EN_Species];
        this.EN_state[this.EN_index_current] = 0;
        this.EN_piece_size[this.EN_index_current] = 0;
        this.EN_is_grounded[this.EN_index_current] = 0;
        this.EN_reload[this.EN_index_current] = 0;
        this.EN_is_found[this.EN_index_current] = 0;
        this.EN_is_provoked[this.EN_index_current] = 0;
        this.EN_ice_ticks[this.EN_index_current] = 0;
        this.EN_slowness[this.EN_index_current] = 0;
        this.EN_poison_ticks[this.EN_index_current] = 0;
        this.EN_poison_dmg[this.EN_index_current] = 0;
        this.EN_frozen_ticks[this.EN_index_current] = 0;
        this.EN_elite_type[this.EN_index_current] = -1;
        if (random(100) < 8) {
            //this.EN_elite_type[this.EN_index_current] = randomRange(0, 2);
            //this.EN_elite_type[this.EN_index_current] = 1;
        }
        //Health
        this.healthMult[this.EN_index_current] = 1;
        this.EN_elite_type[this.EN_index_current] == 0 ? this.healthMult[this.EN_index_current] = 5 : 
            this.EN_elite_type[this.EN_index_current] == 1 ? this.healthMult[this.EN_index_current] = 1.2 : 
            this.EN_elite_type[this.EN_index_current] == 2 ? this.healthMult[this.EN_index_current] = 1.2 : 
            this.EN_elite_type[this.EN_index_current] == 3 ? this.healthMult[this.EN_index_current] = 1.2 : 
            this.EN_elite_type[this.EN_index_current] == 4 ? this.healthMult[this.EN_index_current] = 1.2 : 
            this.EN_elite_type[this.EN_index_current] == 5 ? this.healthMult[this.EN_index_current] = 1.2 :
            this.healthMult[this.EN_index_current] = 1; 
        this.EN_health[this.EN_index_current] = EN_Info[ID][EN_LP]*this.healthMult[this.EN_index_current];
        //Size
        this.sizeMult[this.EN_index_current] = 1;
            if (this.EN_elite_type[this.EN_index_current] == 0) this.sizeMult[this.EN_index_current] = 2;
        this.EN_index_current++;
        this.EN_index_total++;
    }
};

SR_Enemy.prototype.ENkill = function(a){ // aa.sub
    for (var i=0; i<21; i++){
        this.EN_joint[a][i].Vset(this.EN_joint[this.EN_index_current-1][i]);
        this.EN_joint_destination[a][i].Vset(this.EN_joint_destination[this.EN_index_current-1][i]);
    }
    this.EN_array_ID[a] = this.EN_array_ID[this.EN_index_current-1];
    this.EN_species_ID[a] = this.EN_species_ID[this.EN_index_current-1];
    this.EN_state[a] = this.EN_state[this.EN_index_current-1];
    this.EN_piece_size[a] = this.EN_piece_size[this.EN_index_current-1];
    this.EN_is_grounded[a] = this.EN_is_grounded[this.EN_index_current-1];
    this.EN_health[a] = this.EN_health[this.EN_index_current-1];
    this.EN_reload[a] = this.EN_reload[this.EN_index_current-1];
    this.EN_is_found[a] = this.EN_is_found[this.EN_index_current-1];
    this.EN_is_provoked[a] = this.EN_is_provoked[this.EN_index_current-1];
    this.EN_ice_ticks[a] = this.EN_ice_ticks[this.EN_index_current-1];
    this.EN_slowness[a] = this.EN_slowness[this.EN_index_current-1];
    this.EN_poison_ticks[a] = this.EN_poison_ticks[this.EN_index_current-1];
    this.EN_poison_dmg[a] = this.EN_poison_dmg[this.EN_index_current-1];
    this.EN_frozen_ticks[a] = this.EN_frozen_ticks[this.EN_index_current-1];
    this.EN_elite_type[a] = this.EN_elite_type[this.EN_index_current-1];
    this.sizeMult[a] = this.sizeMult[this.EN_index_current-1];
    this.EN_index_current--;
};

// if grounded function original name: aa.h
SR_Enemy.prototype.ENgroundCollision = function(monster,limb,speed){
    var vec_d = new Vector2D;

    vec_d.Vdistance(this.EN_joint[monster][limb],this.EN_joint_destination[monster][limb]);
    this.EN_joint[monster][limb].Vset(this.EN_joint_destination[monster][limb]);

    var vec_d_mag = (magnitudeOf(vec_d)>>2)+1;
    scaleVector2D(vec_d,1/vec_d_mag);

    var head_y;
    for (var i=0; i<vec_d_mag; i++){
        head_y = this.EN_joint[monster][limb].y+vec_d.y;
        var head_x_tile = clamp(this.EN_joint[monster][limb].x,0,Win_Width-1)>>3;
        var head_y_tile = clamp(head_y,0,DIRE_Inv_Top-1)>>3;
        var head_pos_tile = Terrain.TR_tile_data[head_y_tile][head_x_tile];

        if (0<=head_y && head_y<DIRE_Inv_Top){
            if (0<=head_pos_tile && head_pos_tile<=8){
                if (vec_d.y>0)
                    this.EN_is_grounded[monster] |= 2;
                vec_d.x *= speed;
                vec_d.y =- vec_d.y;
            } else {
                this.EN_joint[monster][limb].y = head_y;
            }
        }

        var head_x = this.EN_joint[monster][limb].x+vec_d.x;
        head_x_tile = clamp(head_x,0,Win_Width-1)>>3;
        head_y_tile = clamp(this.EN_joint[monster][limb].y,0,DIRE_Inv_Top-1)>>3;
        head_pos_tile = Terrain.TR_tile_data[head_y_tile][head_x_tile];

        if ((0<=head_x && head_x<Win_Width)){
            if (0<=head_pos_tile && head_pos_tile<=8){
                vec_d.y *= speed;
                vec_d.x =- vec_d.x;
                this.EN_is_grounded[monster] |= 1;
            } else {
                this.EN_joint[monster][limb].x = head_x;
            }
        }
    }
};

SR_Enemy.prototype.ENfindEnemy = function(left_bound,bottom_bound,right_bound,top_bound){ // aa.m
    var en_size,species,hitbox,enemy_pos;
    var Range = (left_bound+right_bound)>>1;
    var Depth = (top_bound+bottom_bound)>>1;
    var distance = 1000;
    var closest_target_ID = -1;

    for (var i=0; i<this.EN_index_current; i++){
        en_size = EN_Info[this.EN_array_ID[i]][EN_Size]*this.sizeMult[i];
        species = EN_Info[this.EN_array_ID[i]][EN_Species];
        hitbox = (Hitboxvar1[species]>>1)*((en_size>>1)+1);

        en_size *= Hitboxvar2[species]>>1;
        this.EN_is_found[i] = 0;
        enemy_pos = this.EN_joint[i][this.EN_center];

        if (this.EN_health[i]!=0 && right_bound>=enemy_pos.x-hitbox && left_bound<=enemy_pos.x+hitbox && top_bound>=enemy_pos.y-en_size && bottom_bound<=enemy_pos.y+en_size){
            this.EN_is_found[i] = 1;
            if (absVal(enemy_pos.x-Range) + absVal(enemy_pos.y-Depth) < distance) {
                distance = absVal(enemy_pos.x-Range) + absVal(enemy_pos.y-Depth);
                closest_target_ID = i;
            }
        }
    }
    return closest_target_ID;
};

SR_Enemy.prototype.ENtakeDamage = function(splash,type,type_parameter,ATmin,ATmax,x_pos,y_pos,hitbox_width,hitbox_height){ // original name: aa.K
    var hurtbox_height,hurtbox_width,en_damage;
    var target_ID = -1;
    Players.PL_dmg_dealt = 0;
    hitbox_width *= 0.5;
    hitbox_height *= 0.5;

    for (var e=0; e<this.EN_index_current; e++){
        hurtbox_height = EN_Info[this.EN_array_ID[e]][EN_Size]*this.sizeMult[e];
        species = EN_Info[this.EN_array_ID[e]][EN_Species];
        hurtbox_width = (Hitboxvar1[species]>>1)*((hurtbox_height>>1)+1);
        hurtbox_height *= Hitboxvar2[species]>>1;

        if (this.EN_health[e]>0 &&
            this.EN_joint[e][this.EN_center].x-hurtbox_width <= x_pos+hitbox_width &&
            this.EN_joint[e][this.EN_center].x+hurtbox_width >= x_pos-hitbox_width &&
            this.EN_joint[e][this.EN_center].y-hurtbox_height <= y_pos+hitbox_height &&
            this.EN_joint[e][this.EN_center].y+hurtbox_height >= y_pos-hitbox_height)
        {
            en_damage = ATmin + floor(random(ATmax - ATmin + 1));
            if (type==4){ // poison attack
                PlaySoundSFX(snd_poison, false);
                this.EN_poison_ticks[e] = type_parameter-floor(type_parameter*EN_Info[this.EN_array_ID[e]][Po_Resist]/100);
                this.EN_poison_dmg[e] = en_damage;
                if (EN_Info[this.EN_array_ID[e]][Po_Resist]<0)
                    this.EN_poison_dmg[e] = maxOf(1,en_damage-floor(en_damage*EN_Info[this.EN_array_ID[e]][Po_Resist]/100));
            } else {
                var dmgColor = 0xC0c0c0,
                    fire = 0xFF3333,       // red
                    ice = 0x6C6CCB,        // blue
                    thunder = 0xEDED00;    // yellow
                if (type==0) // physical damage
                    { 
                        en_damage = maxOf(1,en_damage-floor(en_damage*EN_Info[this.EN_array_ID[e]][Ph_Resist]/100));
                        PlaySoundSFX(snd_physical, false);
                        if (this.EN_elite_type[e] == 0) { en_damage = Math.ceil(en_damage/2); }
                    }
                if (type==1) // fire damage
                    {en_damage = maxOf(1,en_damage-floor(en_damage*EN_Info[this.EN_array_ID[e]][Fi_Resist]/100));
                    PlaySoundSFX(snd_fire, false);
                    dmgColor = fire;}
                if (type==2) // ice damage
                    {en_damage = maxOf(1,en_damage-floor(en_damage*EN_Info[this.EN_array_ID[e]][Ic_Resist]/100));
                    PlaySoundSFX(snd_ice, false);
                    dmgColor = ice;}
                if (type==3) // thunder damage
                    {en_damage = maxOf(1,en_damage-floor(en_damage*EN_Info[this.EN_array_ID[e]][Th_Resist]/100));
                    PlaySoundSFX(snd_thunder, false);
                    dmgColor = thunder;}

                if ((Sett_Dmg_Indicators&1)==0) {
                    if (DIRE_crit_highlight) {
                        PlaySoundSFX(snd_crit, false);
                        dmgColor = 0xF0F000;
                        Indicators.INadd(this.EN_joint[e][this.EN_center].x,this.EN_joint[e][this.EN_center].y-hurtbox_height-24,1,"CRIT!",dmgColor);
                        DIRE_crit_highlight = 0;
                    }
                    Indicators.INadd(this.EN_joint[e][this.EN_center].x,this.EN_joint[e][this.EN_center].y-hurtbox_height,1,en_damage,dmgColor);
                }

                this.EN_health[e] = maxOf(this.EN_health[e]-en_damage,0);
                this.EN_is_provoked[e] = en_damage;
            }
            if (type==2) // ice slow
                {PlaySoundSFX(snd_ice, false);
                this.EN_ice_ticks[e] = 500-floor(500*EN_Info[this.EN_array_ID[e]][Ic_Resist]/100);
                this.EN_slowness[e] = type_parameter;}
            if (type==5)  // freeze stop
                {PlaySoundSFX(snd_freeze, false);
                this.EN_frozen_ticks[e] = type_parameter-floor(type_parameter*EN_Info[this.EN_array_ID[e]][Fr_Resist]/100);}

            target_ID = e;
            Players.PL_dmg_dealt += en_damage;
            Target_HP_Current = this.EN_health[e];
            Target_HP_Max = EN_Info[this.EN_array_ID[e]][EN_LP]*this.healthMult[e];
            En_Count_From_Max = 100;
            Target_Array_ID = this.EN_array_ID[e];

            if (splash==0)
                break;
        }
    }
    return target_ID;
};
// residue attack modes
// enemy attack code original name: aa.p
SR_Enemy.prototype.ENattack = function(monster,type){
    var vector_c = new Vector2D;
    var ID_type = this.EN_array_ID[monster]+type;
    var monster_info = EN_Info[ID_type];
    var mon_ATmode1 = monster_info[7]%100;        // mon_ATmode1          original name: g
    var mon_ATmode2 = floor(monster_info[7]/100); // mon_ATmode2          original name: k
    var mon_pj_orient = monster_info[8];          // mon_pj_orient        original name: r
    var mon_pj_img = monster_info[9];             // mon_pj_img           original name: m
    var mon_pj_color = monster_info[10];          // mon_pj_color         original name: n
    var mon_pj_transp = monster_info[11];         // mon_pj_transp        original name: F
    var mon_pj_width = monster_info[12];          // mon_pj_width         original name: H
    var mon_pj_height = monster_info[13];         // mon_pj_height        original name: M
    var mon_pj_box_width = monster_info[14];      // mon_pj_box_width     original name: E
    var mon_pj_boxheight = monster_info[15];      // mon_pj_boxheight     original name: ka
    var mon_pj_APdelay = monster_info[16];        // mon_pj_APdelay       original name: Ja
    var mon_pj_EFdelay = monster_info[17];        // mon_pj_EFdelay       original name: Ea
    var mon_pj_life = monster_info[18];           // mon_pj_life          original name: Ca
    var mon_pj_disap_eff = monster_info[19];      // mon_pj_disap_eff     original name: Z
    var mon_pj_grav = monster_info[20];           // mon_pj_grav          original name: X
    var mon_pj_accel = monster_info[21];          // mon_pj_accel         original name: $
    var mon_pj_pierce = monster_info[22];         // mon_pj_pierce        original name: ob
    var mon_pj_bounce = monster_info[23];         // mon_pj_bounce        original name: pb
    var mon_pj_home = monster_info[24];           // mon_pj_home          original name: Xa
    var mon_pj_splash = monster_info[25];         // mon_pj_splash        original name: ta
    var mon_AT_min = monster_info[26];            // mon_AT_min           original name: ya
    var mon_AT_max = monster_info[27];            // mon_AT_max           original name: rb
    var mon_pj_count = monster_info[28];          // mon_pj_count         original name: ia
    var mon_pj_speed = monster_info[29];          // mon_pj_speed         original name: ja
    var mon_min_agi = monster_info[30];           // mon_min_agi          original name: za
    var mon_agi_cons = monster_info[31];          // mon_agi_cons         original name: bb
    var mon_range = monster_info[32];             // mon_range            original name: ab
    var mon_ele_type = monster_info[33];          // mon_ele_type         original name: pa
    var mon_ele_type_param = monster_info[34];    // mon_ele_type_param   original name: Ya
    var mon_res_mode = monster_info[41];          // mon_res_mode         original name: Bb
    var mon_bonus_type_param = monster_info[42];  // mon_bonus_type_param original name: Cb
    var mon_res_img = monster_info[43];           // mon_res_img          original name: Sa
    var mon_res_color = monster_info[44];         // mon_res_color        original name: Oa
    var mon_res_transp = monster_info[45];        // mon_res_transp       original name: Ob
    var mon_res_width = monster_info[46];         // mon_res_width        original name: Pb
    var mon_res_height = monster_info[47];        // mon_res_height       original name: Qb
    var mon_res_box_width = monster_info[48];     // mon_res_box_width    original name: Rb
    var mon_res_boxheight = monster_info[49];     // mon_res_boxheight    original name: Sb
    var mon_res_life = monster_info[50];          // mon_res_life         original name: Tb
    var mon_res_fade_time = monster_info[51];     // mon_res_fade_time    original name: qb
    var mon_res_grav = monster_info[52];          // mon_res_grav         original name: Ub
    var mon_res_accel = monster_info[53];         // mon_res_accel        original name: Vb
    var mon_res_pierce = monster_info[54];        // mon_res_pierce       original name: Wb
    var mon_res_bounce = monster_info[55];        // mon_res_bounce       original name: Xb
    var mon_res_splash = monster_info[56];        // mon_res_splash       original name: Yb
    var mon_res_ATmin = monster_info[57];         // mon_res_ATmin        original name: Zb
    var mon_res_ATmax = monster_info[58];         // mon_res_ATmax        original name: ba
    var mon_res_bullet = monster_info[59];        // mon_res_bullet       original name: e
    var mon_target,x_pos,y_pos,Xspd,Yspd,rand_var1,rand_var2;

    if (this.EN_reload[monster]>0){
		this.EN_reload[monster]--;
	} else if (mon_agi_cons>=random(1E3)){
		mon_target = Players.PLfindPlayer(this.EN_joint[monster][0].x-mon_range,this.EN_joint[monster][0].y-mon_range,this.EN_joint[monster][0].x+mon_range,this.EN_joint[monster][0].y+mon_range,0);
		if (mon_target!=-1){
			this.EN_reload[monster] = mon_min_agi;
			switch (mon_ATmode1){
			    case 0: break;

				case 1: // no movement
					x_pos = this.EN_joint[monster][0].x+10*vector_c.x;
                    y_pos = this.EN_joint[monster][0].y+10*vector_c.y;
                    Xspd = 0;
                    Yspd = 0;
                    Projectiles.PJadd(1,x_pos,y_pos,Xspd,Yspd,mon_pj_orient,mon_pj_img,mon_pj_color,mon_pj_transp,mon_pj_width,mon_pj_height,mon_pj_box_width,mon_pj_boxheight,mon_pj_APdelay,mon_pj_EFdelay,mon_pj_life,mon_pj_disap_eff,mon_pj_grav,mon_pj_accel,mon_pj_pierce,mon_pj_bounce,mon_pj_home,0,mon_pj_splash,mon_AT_min,mon_AT_max,mon_ele_type,mon_ele_type_param,mon_res_mode,mon_bonus_type_param,mon_res_img,mon_res_color,mon_res_transp,mon_res_width,mon_res_height,mon_res_box_width,mon_res_boxheight,0,0,mon_res_life,mon_res_fade_time,mon_res_grav,mon_res_accel,mon_res_pierce,mon_res_bounce,mon_res_splash,mon_res_ATmin,mon_res_ATmax,mon_res_bullet,mon_ele_type,mon_ele_type_param);
                    break;

				case 2: // horizontal movement
					vector_c = Players.PL_joint[mon_target][2].x-this.EN_joint[monster][0].x;
					vector_c /= absVal(vector_c);
					x_pos = this.EN_joint[monster][0].x+10*vector_c;
					y_pos = this.EN_joint[monster][0].y;
                    Xspd = vector_c*mon_pj_speed*0.1;
                    Yspd = 0;
                    Projectiles.PJadd(1,x_pos,y_pos,Xspd,Yspd,mon_pj_orient,mon_pj_img,mon_pj_color,mon_pj_transp,mon_pj_width,mon_pj_height,mon_pj_box_width,mon_pj_boxheight,mon_pj_APdelay,mon_pj_EFdelay,mon_pj_life,mon_pj_disap_eff,mon_pj_grav,mon_pj_accel,mon_pj_pierce,mon_pj_bounce,mon_pj_home,0,mon_pj_splash,mon_AT_min,mon_AT_max,mon_ele_type,mon_ele_type_param,mon_res_mode,mon_bonus_type_param,mon_res_img,mon_res_color,mon_res_transp,mon_res_width,mon_res_height,mon_res_box_width,mon_res_boxheight,0,0,mon_res_life,mon_res_fade_time,mon_res_grav,mon_res_accel,mon_res_pierce,mon_res_bounce,mon_res_splash,mon_res_ATmin,mon_res_ATmax,mon_res_bullet,mon_ele_type,mon_ele_type_param);
				    break;

				case 3:
                    assignVector2D(vector_c,Players.PL_joint[mon_target][2].x-this.EN_joint[monster][0].x,Players.PL_joint[mon_target][2].y-this.EN_joint[monster][0].y);
				case 6:
                    if (mon_ATmode1==6)
                        assignVector2D(vector_c,0,-1);

                    if (mon_ATmode2>0)
                         ID_type = mon_ATmode2;
                    else ID_type = 16;

                    mon_ATmode2 = floor(512*angleToXAxis(vector_c)/TwoPi);
                    mon_ATmode2 -= (mon_pj_count-1)*ID_type>>1;

					for (var p=0; p<mon_pj_count; p++){
						vector_c.x = Xe[mon_ATmode2&511][0];
						vector_c.y =- Xe[mon_ATmode2&511][1];
						x_pos = this.EN_joint[monster][0].x+10*vector_c.x;
                        y_pos = this.EN_joint[monster][0].y+10*vector_c.y;
                        Xspd = vector_c.x*mon_pj_speed*0.1;
                        Yspd = vector_c.y*mon_pj_speed*0.1;
						Projectiles.PJadd(1,x_pos,y_pos,Xspd,Yspd,mon_pj_orient,mon_pj_img,mon_pj_color,mon_pj_transp,mon_pj_width,mon_pj_height,mon_pj_box_width,mon_pj_boxheight,mon_pj_APdelay,mon_pj_EFdelay,mon_pj_life,mon_pj_disap_eff,mon_pj_grav,mon_pj_accel,mon_pj_pierce,mon_pj_bounce,mon_pj_home,0,mon_pj_splash,mon_AT_min,mon_AT_max,mon_ele_type,mon_ele_type_param,mon_res_mode,mon_bonus_type_param,mon_res_img,mon_res_color,mon_res_transp,mon_res_width,mon_res_height,mon_res_box_width,mon_res_boxheight,0,0,mon_res_life,mon_res_fade_time,mon_res_grav,mon_res_accel,mon_res_pierce,mon_res_bounce,mon_res_splash,mon_res_ATmin,mon_res_ATmax,mon_res_bullet,mon_ele_type,mon_ele_type_param);
						mon_ATmode2 += ID_type;
					}
					break;

				case 4: // Arc. -0x4- modifies spread
					for (var p=0; p<mon_pj_count; p++){
						assignVector2D(vector_c,Players.PL_joint[mon_target][2].x-this.EN_joint[monster][0].x,Players.PL_joint[mon_target][2].y-this.EN_joint[monster][0].y);
						if (mon_ATmode2>0)
                             ID_type = mon_ATmode2;
						else ID_type = mon_pj_count;

						if (mon_pj_count>0){
							rand_var1 = floor(random(512));
							rand_var2 = random(10)*ID_type;
							vector_c.x += Xe[rand_var1][0]*rand_var2;
							vector_c.y += Xe[rand_var1][1]*rand_var2;
						}
						x_pos = this.EN_joint[monster][0].x;
						y_pos = this.EN_joint[monster][0].y;
						Xspd = vector_c.x/mon_pj_speed;
						Yspd = (vector_c.y-0.5*mon_pj_speed*mon_pj_speed*mon_pj_grav*0.01)/mon_pj_speed;
						Projectiles.PJadd(1,x_pos,y_pos,Xspd,Yspd,mon_pj_orient,mon_pj_img,mon_pj_color,mon_pj_transp,mon_pj_width,mon_pj_height,mon_pj_box_width,mon_pj_boxheight,mon_pj_APdelay,mon_pj_EFdelay,mon_pj_life,mon_pj_disap_eff,mon_pj_grav,mon_pj_accel,mon_pj_pierce,mon_pj_bounce,mon_pj_home,0,mon_pj_splash,mon_AT_min,mon_AT_max,mon_ele_type,mon_ele_type_param,mon_res_mode,mon_bonus_type_param,mon_res_img,mon_res_color,mon_res_transp,mon_res_width,mon_res_height,mon_res_box_width,mon_res_boxheight,0,0,mon_res_life,mon_res_fade_time,mon_res_grav,mon_res_accel,mon_res_pierce,mon_res_bounce,mon_res_splash,mon_res_ATmin,mon_res_ATmax,mon_res_bullet,mon_ele_type,mon_ele_type_param);
					}
					break;

				case 5: // Spawn around range (like blizzard)
					for (var p=0; p<mon_pj_count; p++){
						x_pos = this.EN_joint[monster][0].x+randomRange(-mon_range,mon_range);
						y_pos = this.EN_joint[monster][0].y+randomRange(-mon_range,0);
                        Xspd = 0;
                        Yspd = 0;
                        Projectiles.PJadd(1,x_pos,y_pos,Xspd,Yspd,mon_pj_orient,mon_pj_img,mon_pj_color,mon_pj_transp,mon_pj_width,mon_pj_height,mon_pj_box_width,mon_pj_boxheight,mon_pj_APdelay,mon_pj_EFdelay,mon_pj_life,mon_pj_disap_eff,mon_pj_grav,mon_pj_accel,mon_pj_pierce,mon_pj_bounce,mon_pj_home,0,mon_pj_splash,mon_AT_min,mon_AT_max,mon_ele_type,mon_ele_type_param,mon_res_mode,mon_bonus_type_param,mon_res_img,mon_res_color,mon_res_transp,mon_res_width,mon_res_height,mon_res_box_width,mon_res_boxheight,0,0,mon_res_life,mon_res_fade_time,mon_res_grav,mon_res_accel,mon_res_pierce,mon_res_bounce,mon_res_splash,mon_res_ATmin,mon_res_ATmax,mon_res_bullet,mon_ele_type,mon_ele_type_param);
                    }
                    break;

				case 7: // Spawn another enemy
				    for (var p=0; p<mon_pj_count; p++){
						x_pos = this.EN_joint[monster][0].x>>3;
						y_pos = this.EN_joint[monster][0].y>>3;
						this.ENspawn(x_pos,y_pos,ID_type+mon_AT_min);
					}
					break;

				case 8: // Spawn on stickman: random
					for (var p=0; p<mon_pj_count; p++){
						y_pos = randInt(4);
						x_pos = Players.PL_joint[y_pos][2].x;
						y_pos = Players.PL_joint[y_pos][2].y;
                        Xspd = 0;
                        Yspd = 0;
                        Projectiles.PJadd(1,x_pos,y_pos,Xspd,Yspd,mon_pj_orient,mon_pj_img,mon_pj_color,mon_pj_transp,mon_pj_width,mon_pj_height,mon_pj_box_width,mon_pj_boxheight,mon_pj_APdelay,mon_pj_EFdelay,mon_pj_life,mon_pj_disap_eff,mon_pj_grav,mon_pj_accel,mon_pj_pierce,mon_pj_bounce,mon_pj_home,0,mon_pj_splash,mon_AT_min,mon_AT_max,mon_ele_type,mon_ele_type_param,mon_res_mode,mon_bonus_type_param,mon_res_img,mon_res_color,mon_res_transp,mon_res_width,mon_res_height,mon_res_box_width,mon_res_boxheight,0,0,mon_res_life,mon_res_fade_time,mon_res_grav,mon_res_accel,mon_res_pierce,mon_res_bounce,mon_res_splash,mon_res_ATmin,mon_res_ATmax,mon_res_bullet,mon_ele_type,mon_ele_type_param);
					}
					break;

				case 9:
					for (var p=0; p<mon_pj_count; p++){
						y_pos = randInt(4);
						assignVector2D(vector_c,Players.PL_joint[y_pos][0].x-this.EN_joint[monster][0].x,Players.PL_joint[y_pos][0].y-this.EN_joint[monster][0].y),
						Normalize(vector_c);
						x_pos = this.EN_joint[monster][0].x+10*vector_c.x;
						y_pos = this.EN_joint[monster][0].y+10*vector_c.y;
						Xspd = vector_c.x*mon_pj_speed*0.1;
						Yspd = vector_c.y*mon_pj_speed*0.1;
						Projectiles.PJadd(1,x_pos,y_pos,Xspd,Yspd,mon_pj_orient,mon_pj_img,mon_pj_color,mon_pj_transp,mon_pj_width,mon_pj_height,mon_pj_box_width,mon_pj_boxheight,mon_pj_APdelay,mon_pj_EFdelay,mon_pj_life,mon_pj_disap_eff,mon_pj_grav,mon_pj_accel,mon_pj_pierce,mon_pj_bounce,mon_pj_home,0,mon_pj_splash,mon_AT_min,mon_AT_max,mon_ele_type,mon_ele_type_param,mon_res_mode,mon_bonus_type_param,mon_res_img,mon_res_color,mon_res_transp,mon_res_width,mon_res_height,mon_res_box_width,mon_res_boxheight,0,0,mon_res_life,mon_res_fade_time,mon_res_grav,mon_res_accel,mon_res_pierce,mon_res_bounce,mon_res_splash,mon_res_ATmin,mon_res_ATmax,mon_res_bullet,mon_ele_type,mon_ele_type_param)
					}
					break;
			}
        }
    }
};

function enemyDeath(enemy,en_ID,xp_is_given){ // original name: Jg()
    var en_ID2;
    var en_lv = 0;
    for (var s=0; s<Stage_Count; s++){
        if ((Stage_Status[s]&Unlocked)!=0){
            var next_stage_enemy = Book_Indexer[s+1]-Book_Indexer[s];
            for (var e=0; e<next_stage_enemy; e++){
                if (EN_Info[Book_Indexer[s]+e][EN_Lvl]>en_lv)
                    en_lv = EN_Info[Book_Indexer[s]+e][EN_Lvl];
                e += EN_Info[Book_Indexer[s]+e][En_Is_2nd_Att]; // skip over arrays that are just 2nd attacks (e.g. for megabosses)
            }
        }
    }
    if (xp_is_given==1)
         en_ID2 = en_ID;
    else en_ID2 = enemy.EN_array_ID[en_ID];

    var lvl_diff = absVal(LV[0]-EN_Info[en_ID2][EN_Lvl]);
    var xp_earned = 0;

    if (lvl_diff<10)            // if player LV is +/- 9 of enemy LV
        xp_earned = floor(EN_Info[en_ID2][EN_EXP]*(10-lvl_diff)/10);
    else if (LV[0] >= en_lv+10) // if enemy is 10+ levels above
        xp_earned = 0;
    else                        // if enemy is 10+ levels below
        xp_earned = 1;

    var exp_mult = 100;
    for (var s=0; s<Stickmen_Slots; s++){
        if (checkEff(Stickmen_Slots+s,Medal_Iron))
            exp_mult += getEff(Stickmen_Slots+s,Eff1);
    }
    xp_earned = floor(2*xp_earned*exp_mult/100);

    if (xp_is_given==1)
        return xp_earned;

    // leveling up
    antiCheatCheck();
    Team_EXP = clamp(Team_EXP+xp_earned,0,9999999);
    xp_for_prev_LV = 4753000;
    xp_for_next_LV = 9999999;

    if (LV[0]<98){
        xp_for_prev_LV = 0;
        for (var l=1; l<LV[0]; l++)
            xp_for_prev_LV += 1000*l;
        xp_for_next_LV = xp_for_prev_LV+1000*l;
    }
    if (xp_for_next_LV<=Team_EXP && LV[0]<99){
        LV[0]++;
        for (var s=0; s<Stickmen_Slots; s++)
            SP[s] += 2;

        // anger crown effect
        var anger_crown = false;
        for (var i=Stickmen_Slots; i<Inv_Last; i++){
            if (getVal(Item_Inv[i],Eff_ID)==Crown_Anger || getVal(Comp1_Inv[i],Eff_ID)==Crown_Anger || getVal(Comp2_Inv[i],Eff_ID)==Crown_Anger)
                anger_crown = true;
        }
        if (anger_crown==true){
            Anger_Crown_Lightning = 480;
            for (var s=0; s<Stickmen_Slots; s++){
                Players.PLprojectileAttack(562,Players.PL_joint[s][0].x,Players.PL_joint[s][0].y,0);
                if (LP_Current[s]!=LP_Max[s]){
                    Indicators.INadd(Players.PL_joint[s][0].x,Players.PL_joint[s][0].y,0,LP_Max[s]-LP_Current[s],0x00FF00); // output LP restore
                    LP_Current[s] = LP_Max[s]; // restore LP
                }
            }
        }
    }
    antiCheatSet();
    //*
    for (var s=0; s<Stickmen_Slots; s++){
        if (checkEff(Stickmen_Slots+s,Charm_Eff) && random(100)<getEff(Stickmen_Slots+s,Eff1)){
            var charm_target = Enemies.ENfindEnemy(enemy.EN_joint[en_ID][0].x-600,enemy.EN_joint[en_ID][0].y-300,enemy.EN_joint[en_ID][0].x+600,enemy.EN_joint[en_ID][0].y+300);
            if (charm_target!=-1)
                Players.PLprojectileAttack(getEff(Stickmen_Slots+s,Eff2),enemy.EN_joint[en_ID][0].x,enemy.EN_joint[en_ID][0].y,charm_target);
        }
    }
    //*/
    /* charming mod
    for (var i=0; i<Inv_Last; i++){
        if (getVal(Item_Inv[i],Eff_ID)==Charm_Eff && random(100)<getVal(Item_Inv[i],Eff1)){
            var charm_target = Enemies.ENfindEnemy(enemy.EN_joint[en_ID][0].x-600,enemy.EN_joint[en_ID][0].y-300,enemy.EN_joint[en_ID][0].x+600,enemy.EN_joint[en_ID][0].y+300);
            if (charm_target!=-1)
                Players.PLprojectileAttack(getVal(Item_Inv[i],Eff2),enemy.EN_joint[en_ID][0].x,enemy.EN_joint[en_ID][0].y,charm_target);
        }
    }
    //*/
    var gold_value = EN_Info[enemy.EN_array_ID[en_ID]][En_Gold];
    var gold_value_mult = 100;
    var onigiri_rate_mult = 100;
    var drop_rate_mult = 100;
    var enemy_size = EN_Info[enemy.EN_array_ID[en_ID]][EN_Size];
    for (var s=0; s<Stickmen_Slots; s++){
        if (checkEff(Stickmen_Slots+s,Medal_Bronze))
            drop_rate_mult += getEff(Stickmen_Slots+s,Eff1);
        if (checkEff(Stickmen_Slots+s,Medal_Silver))
            onigiri_rate_mult += getEff(Stickmen_Slots+s,Eff1);
        if (checkEff(Stickmen_Slots+s,Medal_Gold))
            gold_value_mult += getEff(Stickmen_Slots+s,Eff1);
    }
    var direction = 0;
    if (enemy.EN_species_ID[en_ID]==17)
        direction = enemy.EN_state[en_ID]-1;

    for (var d=En_Drop1; d<En_Drop1+6; d+=2){
        var eliteDrop = En_Drop1 + 2*randInt(3);
            // if enemy has a drop in this slot    &&  random*drop rate*100 < 100  **aka**  random < 1/drop rate
        if ((EN_Info[enemy.EN_array_ID[en_ID]][d]!=0 && Math.random()*EN_Info[enemy.EN_array_ID[en_ID]][d+1]*100 < drop_rate_mult) || (enemy.EN_elite_type[en_ID] >= 0 && eliteDrop == d)) // item drop
            Drops.DPadd(enemy.EN_joint[en_ID][direction].x,enemy.EN_joint[en_ID][direction].y,EN_Info[enemy.EN_array_ID[en_ID]][d],0,0);
    }
    if (3*Math.random() < 1) // 33% chance of dropping gold
        Drops.DPadd(enemy.EN_joint[en_ID][direction].x,enemy.EN_joint[en_ID][direction].y,1,floor(gold_value*gold_value_mult/100),0); // gold drop
    if (500*Math.random() < onigiri_rate_mult) // 20% chance of dropping onigiri
        Drops.DPadd(enemy.EN_joint[en_ID][direction].x,enemy.EN_joint[en_ID][direction].y,2,0,0); // onigiri drop
    if (enemy_size > 1) {
        PlaySoundSFX(snd_deathboss1, false);
    } else {
        PlaySoundSFX(snd_deathplayer, false);
    }
    return 0;
}

window.fff = SR_Enemy.prototype.ENmain;
SR_Enemy.prototype.ENmain = function(){ // hh.prototype.move
    //Team_EXP = clamp(Team_EXP+1,0,9999999); // passive level up for testing
    for (var current_en=0; current_en<this.EN_index_current; current_en++){
        var type = this.EN_species_ID[current_en];

        if (this.EN_poison_ticks[current_en]>0 && this.EN_health[current_en]>0){
            this.EN_poison_ticks[current_en]--;
            this.EN_health[current_en] = maxOf(this.EN_health[current_en]-this.EN_poison_dmg[current_en],0);
            Target_HP_Current = this.EN_health[current_en];
            Target_HP_Max = EN_Info[this.EN_array_ID[current_en]][EN_LP]*this.healthMult[current_en];
            En_Count_From_Max = 100;
            Target_Array_ID = this.EN_array_ID[current_en];
        }

        if (this.EN_frozen_ticks[current_en]>0 && this.EN_health[current_en]>0){
            this.EN_frozen_ticks[current_en]--;
        } else {
            if (this.EN_ice_ticks[current_en]>0 && this.EN_health[current_en]>0 && (this.EN_ice_ticks[current_en]--,this.EN_slowness[current_en]>random(100)))
                continue;

            switch (type){
                case 0:  current_en = this.ENwlk(current_en); break;      // Walker
                case 1:  current_en = this.ENsnk(current_en); break;      // Snake
                case 2:  current_en = this.ENbat(current_en); break;      // Bat
                case 3:  current_en = this.ENdgn(current_en); break;      // Dragon
                case 4:  current_en = this.ENstk(current_en,type); break; // Stickman
                case 5:  current_en = this.ENtre(current_en,type); break; // Tree
                case 6:  current_en = this.ENwhe(current_en); break;      // Wheel
                case 7:  current_en = this.ENfsh(current_en); break;      // Fish
                case 8:  current_en = this.ENmsh(current_en); break;      // Mushroom
                case 9:  current_en = this.ENeel(current_en,type); break; // Eel (swimming)
                case 10: current_en = this.ENspr(current_en); break;      // Spider
                case 11: current_en = this.ENcts(current_en); break;      // Cactus
                case 12: current_en = this.ENstk(current_en,type); break; // Zombie
                case 13: current_en = this.ENeel(current_en,type); break; // Eel (flying)
                case 14: current_en = this.ENcop(current_en); break;      // Copter
                case 15: current_en = this.ENbun(current_en); break;      // Bouncer
                case 16: current_en = this.ENgrm(current_en); break;      // Germ
                case 17: current_en = this.ENdig(current_en); break;      // Digger
                case 18: current_en = this.ENtre(current_en,type); break; // Tree (hanging)
            }
        }
    }
};

// Walker species original name: lb
window.fff = SR_Enemy.prototype.ENwlk; // da.fff = hh.prototype.lb
SR_Enemy.prototype.ENwlk = function(current_en){
    var wlk_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_joint[current_en][0].x += 1;
        this.EN_joint[current_en][0].y += 0-4*(wlk_size-1);
        this.EN_joint[current_en][1].x += 0;
        this.EN_joint[current_en][1].y += 2-4*(wlk_size-1);
        this.EN_joint[current_en][2].x += 2;
        this.EN_joint[current_en][2].y += 2-4*(wlk_size-1);
        for (var i=0; i<3; i++)
            this.EN_joint_destination[current_en][i].Vset(this.EN_joint[current_en][i]);

        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],-0.05,0.99);
        moveJoint(this.EN_joint[current_en][1],this.EN_joint_destination[current_en][1],0.05 ,0.99);
        moveJoint(this.EN_joint[current_en][2],this.EN_joint_destination[current_en][2],0.05 ,0.99);

        // movement
        var isUnderwater = Terrain.TR_tile_data[clamp(this.EN_joint[current_en][0].y,0,DIRE_Inv_Top-1)>>3][clamp(this.EN_joint[current_en][0].x,0,Win_Width-1)>>3] == 9;
        if ((this.EN_is_grounded[current_en]&3)>0 || isUnderwater){
            if (this.EN_is_grounded[current_en] || random(100) < 3) {
                var wlk_var1 = -0.1;
                if (this.EN_state[current_en]==2)
                    wlk_var1 *= -1;
                this.EN_joint[current_en][1].x += random(wlk_var1);
                this.EN_joint[current_en][2].x += random(wlk_var1);
                if (random(100)<1)
                    this.EN_state[current_en] = cycle(this.EN_state[current_en]+1,1,2);
            }
        }
        //var tilex = clamp(this.EN_joint[current_en][0].x,0,Win_Width-1)>>3;
        //var tiley = clamp(this.EN_joint[current_en][0].y,0,DIRE_Inv_Top-1)>>3;
        if (isUnderwater && random(100) < 75) {
            this.EN_joint[current_en][1].y -= 0.04;
            this.EN_joint[current_en][2].y -= 0.04;
        }

        // sew limbs
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],9*wlk_size ,0.2,0.2);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][2],9*wlk_size ,0.2,0.2);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],11*wlk_size,0.2,0.2);

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<3; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            // number of parts of the body used in the death animation
            for (var i=0; i<3; i++){
                this.EN_joint[current_en][i].x += randomRange(-0.5,0.5);
                this.EN_joint[current_en][i].y -= randomRange(2,3);
            }
            enemyDeath(this,current_en,0);
        }

    }
    // die
    else {
        // number of parts of the body used in the death animation
        for (var i=0; i<3; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<3; i++)
            this.ENgroundCollision(current_en,i,0.5);
        // how long dead body parts exist. Larger numbers make parts grow back and get larger.
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Snake species original name: sa
window.fff = SR_Enemy.prototype.ENsnk;
SR_Enemy.prototype.ENsnk = function(current_en){

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_joint[current_en][0].x += 0;
        this.EN_joint[current_en][1].x += 1;
        this.EN_joint[current_en][2].x += 2;
        for (var i=0; i<3; i++)
            this.EN_joint_destination[current_en][i].Vset(this.EN_joint[current_en][i]);

        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],0.05,0.99); // gravity
        moveJoint(this.EN_joint[current_en][1],this.EN_joint_destination[current_en][1],0.05,0.9);
        moveJoint(this.EN_joint[current_en][2],this.EN_joint_destination[current_en][2],0.05,0.9);

        // movement
        var snk_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-200,this.EN_joint[current_en][0].y-50,this.EN_joint[current_en][0].x+200,this.EN_joint[current_en][0].y+50,0);
        if (snk_target!=-1){
            if (Players.PL_joint[snk_target][2].x < this.EN_joint[current_en][0].x)
                 this.EN_joint[current_en][0].x += -0.001;
            else this.EN_joint[current_en][0].x += 0.001; // set to -1.001:1.001 to have enemies home on you. Players tracking code??
        }
        if ((this.EN_is_grounded[current_en]&2)>0){
            var snk_var1 = 0;
            if (snk_target!=-1){
                if (Players.PL_joint[snk_target][2].x<this.EN_joint[current_en][0].x)
                     snk_var1 = -1;
                else snk_var1 = 1; // set to -1.001:1.001 to have enemies home on you. Players tracking code??
            } else   snk_var1 = fiftyfifty(-1,1);

            if (random(100)<10){
                this.EN_joint[current_en][0].x += randomRange(0.4,0.8)*snk_var1;
                this.EN_joint[current_en][0].y += randomRange(-1.5,-3);
            }
        }

        // sew limbs
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],0,0,0.01); // tail thing
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],0,0,0.01);

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        this.ENgroundCollision(current_en,0,0.5);
        var aux = this.EN_is_grounded[current_en];
        this.ENgroundCollision(current_en,1,0.5);
        this.ENgroundCollision(current_en,2,0.5);
        this.EN_is_grounded[current_en] = aux;
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            for (var i=0; i<3; i++){
                this.EN_joint[current_en][i].x += randomRange(-0.5,0.5);
                this.EN_joint[current_en][i].y -= randomRange(2,3);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<3; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<3; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Bat species original name: ta
window.fff = SR_Enemy.prototype.ENbat;
SR_Enemy.prototype.ENbat = function(current_en){
    var bat_vec_c = new Vector2D;
    var bat_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_joint[current_en][0].x += 1;
        this.EN_joint[current_en][0].y += 1;
        this.EN_joint[current_en][1].x += 1;
        this.EN_joint[current_en][1].y += 1;
        this.EN_joint[current_en][2].x += 0;
        this.EN_joint[current_en][2].y += 0;
        this.EN_joint[current_en][3].x += 0;
        this.EN_joint[current_en][3].y += 2;
        this.EN_joint[current_en][4].x += 1;
        this.EN_joint[current_en][4].y += 1;
        this.EN_joint[current_en][5].x += 2;
        this.EN_joint[current_en][5].y += 0;
        this.EN_joint[current_en][6].x += 2;
        this.EN_joint[current_en][6].y += 2;
        for (var i=0; i<7; i++)
            this.EN_joint_destination[current_en][i].Vset(this.EN_joint[current_en][i]);

        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],0,0.99);
        moveJoint(this.EN_joint[current_en][1],this.EN_joint_destination[current_en][1],0,0.99);
        moveJoint(this.EN_joint[current_en][2],this.EN_joint_destination[current_en][2],0,0.99);
        moveJoint(this.EN_joint[current_en][3],this.EN_joint_destination[current_en][3],0,0.99);
        moveJoint(this.EN_joint[current_en][4],this.EN_joint_destination[current_en][4],0,0.99);
        moveJoint(this.EN_joint[current_en][5],this.EN_joint_destination[current_en][5],0,0.99);
        moveJoint(this.EN_joint[current_en][6],this.EN_joint_destination[current_en][6],0,0.99);

        assignVector2D(bat_vec_c,0,0);

        // movement
        var bat_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-150,this.EN_joint[current_en][0].y-150,this.EN_joint[current_en][0].x+150,this.EN_joint[current_en][0].y+150,0);
        if (bat_target!=-1){
            bat_vec_c.Vdistance(Players.PL_joint[bat_target][2],this.EN_joint[current_en][0]);
            bat_target = Normalize(bat_vec_c);
            bat_target -= EN_Info[this.EN_array_ID[current_en]][32]-10;
            if (bat_target<0)
                 scaleVector2D(bat_vec_c,-0.05);
            else scaleVector2D(bat_vec_c,0.05);
        }
        this.EN_joint[current_en][0].Vadd(bat_vec_c);
        if (random(100)<10){
            this.EN_joint[current_en][0].x += randomRange(-1,1);
            this.EN_joint[current_en][0].y += randomRange(-1,1);
        }
        this.EN_joint[current_en][2].x += randomRange(0,-0.1);
        this.EN_joint[current_en][3].x += randomRange(0,-0.1);
        this.EN_joint[current_en][5].x += randomRange(0,0.1);
        this.EN_joint[current_en][6].x += randomRange(0,0.1);

        // sew limbs
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],3*bat_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][4],3*bat_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],6*bat_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][3],6*bat_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][3],6*bat_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][4],this.EN_joint[current_en][5],6*bat_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][4],this.EN_joint[current_en][6],6*bat_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][5],this.EN_joint[current_en][6],6*bat_size,0.5,0.5);

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<7; i++)
            this.ENgroundCollision(current_en,i,1);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            for (var i=0; i<7; i++){
                this.EN_joint[current_en][i].x += randomRange(-1,1);
                this.EN_joint[current_en][i].y -= randomRange(1,2);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<8; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        var bat_size2 = 6*(150-this.EN_piece_size[current_en])/150;
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],bat_size2,0.5,0.5);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][3],bat_size2,0.5,0.5);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][3],bat_size2,0.5,0.5);
        pullJoints(this.EN_joint[current_en][4],this.EN_joint[current_en][5],bat_size2,0.5,0.5);
        pullJoints(this.EN_joint[current_en][4],this.EN_joint[current_en][6],bat_size2,0.5,0.5);
        pullJoints(this.EN_joint[current_en][5],this.EN_joint[current_en][6],bat_size2,0.5,0.5);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<7; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Dragon species original name: ua
window.fff = SR_Enemy.prototype.ENdgn;
SR_Enemy.prototype.ENdgn = function(current_en){
    var dgn_vec_c = new Vector2D;
    var dgn_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],0,0.99);
        for (var i=1; i<6; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0,0.9);

        assignVector2D(dgn_vec_c,0,0);

        // movement
        var dgn_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-200,this.EN_joint[current_en][0].y-200,this.EN_joint[current_en][0].x+200,this.EN_joint[current_en][0].y+200,0);
        if (dgn_target!=-1){
            dgn_vec_c.Vdistance(Players.PL_joint[dgn_target][2],this.EN_joint[current_en][0]);
            dgn_target = Normalize(dgn_vec_c);
            dgn_target -= EN_Info[this.EN_array_ID[current_en]][32]/2-10;
            if (dgn_target<0)
                 scaleVector2D(dgn_vec_c,-0.01);
            else scaleVector2D(dgn_vec_c,0.01);
        }
        var tiles_under_dgn = Terrain.TR_tile_data[clamp(this.EN_joint[current_en][0].y+24,0,DIRE_Inv_Top-1)>>3][clamp(this.EN_joint[current_en][0].x,0,Win_Width-1)>>3];
        if (0<=tiles_under_dgn && tiles_under_dgn<=8) // if dragon is <= 3 tiles away from solid land, fly up
            dgn_vec_c.y -= 0.02;
        if (random(100)<2){
            dgn_vec_c.x += randomRange(-0.5,0.5);
            dgn_vec_c.y += randomRange(-0.5,0.5);
        }

        // sew limbs
        this.EN_joint[current_en][0].Vadd(dgn_vec_c);
        var dgn_size2 = 5*dgn_size;
        for (var i=0; i<5; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+1],dgn_size2,0,0.02);

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<6; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            this.EN_piece_size[current_en] = 0;
            for (var i=0; i<6; i++){
                this.EN_joint[current_en][i].x += randomRange(-1,1);
                this.EN_joint[current_en][i].y -= randomRange(1,2);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<6; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        var dead_dgn_size = 10*(150-this.EN_piece_size[current_en])/150;
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],dead_dgn_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][3],dead_dgn_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][3],this.EN_joint[current_en][4],dead_dgn_size,0.5,0.5);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<6; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Stickman species original name: ma
window.fff = SR_Enemy.prototype.ENstk;
SR_Enemy.prototype.ENstk = function(current_en,type){
    var stk_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        if (type==4){
            moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],-0.2,0.99);
            moveJoint(this.EN_joint[current_en][1],this.EN_joint_destination[current_en][1],0,0.99);
            moveJoint(this.EN_joint[current_en][2],this.EN_joint_destination[current_en][2],-0.1,0.99);
            moveJoint(this.EN_joint[current_en][3],this.EN_joint_destination[current_en][3],0,0.99);
            moveJoint(this.EN_joint[current_en][4],this.EN_joint_destination[current_en][4],0,0.99);
            moveJoint(this.EN_joint[current_en][5],this.EN_joint_destination[current_en][5],0,0.99);
            moveJoint(this.EN_joint[current_en][6],this.EN_joint_destination[current_en][6],0,0.99);
            moveJoint(this.EN_joint[current_en][7],this.EN_joint_destination[current_en][7],0,0.99);
            moveJoint(this.EN_joint[current_en][8],this.EN_joint_destination[current_en][8],0,0.99);
            moveJoint(this.EN_joint[current_en][9],this.EN_joint_destination[current_en][9],0.3,0.99);
            moveJoint(this.EN_joint[current_en][10],this.EN_joint_destination[current_en][10],0.3,0.99);
        }
        if (type==12){
            moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],-0.02,0.99);
            moveJoint(this.EN_joint[current_en][1],this.EN_joint_destination[current_en][1],0,0.99);
            moveJoint(this.EN_joint[current_en][2],this.EN_joint_destination[current_en][2],-0.01,0.99);
            moveJoint(this.EN_joint[current_en][3],this.EN_joint_destination[current_en][3],0,0.99);
            moveJoint(this.EN_joint[current_en][4],this.EN_joint_destination[current_en][4],0,0.99);
            moveJoint(this.EN_joint[current_en][5],this.EN_joint_destination[current_en][5],0,0.99);
            moveJoint(this.EN_joint[current_en][6],this.EN_joint_destination[current_en][6],0,0.99);
            moveJoint(this.EN_joint[current_en][7],this.EN_joint_destination[current_en][7],0,0.99);
            moveJoint(this.EN_joint[current_en][8],this.EN_joint_destination[current_en][8],0,0.99);
            moveJoint(this.EN_joint[current_en][9],this.EN_joint_destination[current_en][9],0.1,0.99);
            moveJoint(this.EN_joint[current_en][10],this.EN_joint_destination[current_en][10],0.1,0.99);
        }

        // movement
        if (random(100)<50 && (this.EN_is_grounded[current_en]&3)>0){
            var stk_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-200,this.EN_joint[current_en][0].y-50,this.EN_joint[current_en][0].x+200,this.EN_joint[current_en][0].y+50,0);
            if (stk_target!=-1){
                if (Players.PL_joint[stk_target][2].x<this.EN_joint[current_en][0].x)
                     this.EN_state[current_en] = 1;
                else this.EN_state[current_en] = 2;
            } else if (random(100)<10){
                     this.EN_state[current_en] = fiftyfifty(1,2);
            }
            var stk_var1 = 1;
            var stk_var2 = 1;
            var stk_var3 = 0;
            if (type==12){
                stk_var2 = 0.25;
                stk_var1 = 0.3;
                stk_var3 = 0.25;
            }
            if (this.EN_state[current_en]==1){
                if (this.EN_joint[current_en][9].x<this.EN_joint[current_en][10].x){
                    this.EN_joint[current_en][10].x -= random(stk_var2);
                    this.EN_joint[current_en][10].y -= stk_var1;
                } else {
                    this.EN_joint[current_en][9].x -= random(stk_var2);
                    this.EN_joint[current_en][9].y -= stk_var1;
                }
                this.EN_joint[current_en][5].x -= random(stk_var3);
                this.EN_joint[current_en][6].x -= random(stk_var3);
            } else {
                if (this.EN_joint[current_en][9].x<this.EN_joint[current_en][10].x){
                    this.EN_joint[current_en][9].x += random(stk_var2);
                    this.EN_joint[current_en][9].y -= stk_var1;
                } else {
                    this.EN_joint[current_en][10].x += random(stk_var2);
                    this.EN_joint[current_en][10].y -= stk_var1;
                }
                this.EN_joint[current_en][5].x += random(stk_var3);
                this.EN_joint[current_en][6].x += random(stk_var3);
            }
        }

        // sew limbs
        var stk_body_force = 0.5;
        var stk_size2 = 1.2*stk_size;
        if (type==12){
            stk_body_force = 0.02;
            stk_size2 = 1*stk_size;
        }
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],3*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],3*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][3],4*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][4],4*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][3],this.EN_joint[current_en][5],4*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][4],this.EN_joint[current_en][6],4*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][7],4*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][8],4*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][7],this.EN_joint[current_en][9],4*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][8],this.EN_joint[current_en][10],4*stk_size2,stk_body_force,stk_body_force);
        pullJoints(this.EN_joint[current_en][7],this.EN_joint[current_en][8],5*stk_size2,stk_body_force,stk_body_force);

        // attack
        if (this.EN_array_ID[current_en]==332){
            this.ENattack(current_en,randInt(6));
        } else {
            this.ENattack(current_en,0);
            if (EN_Info[this.EN_array_ID[current_en]][En_Is_2nd_Att]!=0)
                this.ENattack(current_en,1);
        }

        // death
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<11; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][1]);
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            this.EN_piece_size[current_en] = 0;
            for (var i=0; i<11; i++){
                this.EN_joint[current_en][i].x += randomRange(-1,1);
                this.EN_joint[current_en][i].y -= randomRange(1,2);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<11; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        var dead_stk_size = 1.2*(150-this.EN_piece_size[current_en])/150;
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],3*dead_stk_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][3],this.EN_joint[current_en][5],4*dead_stk_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][4],this.EN_joint[current_en][6],4*dead_stk_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][7],this.EN_joint[current_en][9],4*dead_stk_size,0.5,0.5);
        pullJoints(this.EN_joint[current_en][8],this.EN_joint[current_en][10],4*dead_stk_size,0.5,0.5);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<11; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Tree species original name: na
window.fff = SR_Enemy.prototype.ENtre;
SR_Enemy.prototype.ENtre = function(current_en,type){
    var tre_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_state[current_en] = floor(randomRange(4,8));
    }
    // perform
    else if (this.EN_state[current_en]<10){

        // sew body
        if (type==5){
            for (var i=0; i<this.EN_state[current_en]-1; i++)
                moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],-0.04,0.99);
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],1,0.99);
        } else if (type==18){
            for (var i=0; i<this.EN_state[current_en]-1; i++)
                moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.04,0.99);
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],-1,0.99);
        }

        // movement
        if (random(100)<10){
            var tree_sway = floor(random(4));
            this.EN_joint[current_en][tree_sway].x += randomRange(-0.5,0.5);
        }

        // sew limbs
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],8*tre_size,0.2,0.2);
        for (var i=1; i<this.EN_state[current_en]-2; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+1],6*tre_size,0.2,0.2);
        pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+1],6*tre_size,0.2,0);

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<this.EN_state[current_en]; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].x = (this.EN_joint[current_en][0].x+this.EN_joint[current_en][this.EN_state[current_en]-1].x)>>1;
        this.EN_joint[current_en][this.EN_center].y = (this.EN_joint[current_en][0].y+this.EN_joint[current_en][this.EN_state[current_en]-1].y)>>1;

        // death
        if (this.EN_health[current_en]<=0){
            for (var i=0; i<this.EN_state[current_en]; i++){
                this.EN_joint[current_en][i].x += randomRange(-0.5,0.5);
                this.EN_joint[current_en][i].y -= randomRange(2,3);
            }
            this.EN_state[current_en] += 10;
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<this.EN_state[current_en]-10; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<this.EN_state[current_en]-10; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Wheel species original name: va
window.fff = SR_Enemy.prototype.ENwhe;
SR_Enemy.prototype.ENwhe = function(current_en){
    var whe_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_joint[current_en][0].x += 1;
        this.EN_joint[current_en][0].y += 1;
        this.EN_joint[current_en][1].x += 1;
        this.EN_joint[current_en][1].y += 0;
        this.EN_joint[current_en][2].x += 1.85;
        this.EN_joint[current_en][2].y += 0.5;
        this.EN_joint[current_en][3].x += 1.85;
        this.EN_joint[current_en][3].y += 1.5;
        this.EN_joint[current_en][4].x += 1;
        this.EN_joint[current_en][4].y += 2;
        this.EN_joint[current_en][5].x += 1-0.85;
        this.EN_joint[current_en][5].y += 1.5;
        this.EN_joint[current_en][6].x += 1-0.85;
        this.EN_joint[current_en][6].y += 0.5;
        for (var i=0; i<7; i++)
            this.EN_joint_destination[current_en][i].Vset(this.EN_joint[current_en][i]);

        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],0.5,0.99);
        for (var i=1; i<7; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0,0.99);

        // movement
        var whe_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-200,this.EN_joint[current_en][0].y-50,this.EN_joint[current_en][0].x+200,this.EN_joint[current_en][0].y+50,0);
        if (whe_target!=-1 && random(100)<40 && (this.EN_is_grounded[current_en]&2)>0){
            if (Players.PL_joint[whe_target][2].x<this.EN_joint[current_en][0].x)
                 this.EN_joint[current_en][0].x += -2;
            else this.EN_joint[current_en][0].x += 2;
        }

        // sew limbs
        var whe_size = 1.2*whe_size;
        for (var i=1; i<4; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+3],20*whe_size,0.1,0.1);
        for (var i=1; i<5; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+2],17*whe_size,0.1,0.1);
        pullJoints(this.EN_joint[current_en][i+0],this.EN_joint[current_en][1],17*whe_size,0.1,0.1);
        pullJoints(this.EN_joint[current_en][i+1],this.EN_joint[current_en][2],17*whe_size,0.1,0.1);
        for (var i=1; i<6; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+1],10*whe_size,0.1,0.1);
        pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][1],10*whe_size,0.1,0.1);
        for (var i=1; i<7; i++)
            pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][i],10*whe_size,0.2,0.2);

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<7; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            this.EN_piece_size[current_en] = 0;
            for (var i=0; i<7; i++){
                this.EN_joint[current_en][i].x += randomRange(-0.5,0.5);
                this.EN_joint[current_en][i].y -= randomRange(2,3);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<7; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        whe_size2 = 1.2*whe_size*(150-this.EN_piece_size[current_en])/150;
        for (var i=1; i<6; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+1],10*whe_size2,0.5,0.5);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<7; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Fish species original name: wa
window.fff = SR_Enemy.prototype.ENfsh;
SR_Enemy.prototype.ENfsh = function(current_en){
    var fsh_vec_c = new Vector2D;
    var fsh_size = EN_Info[this.EN_array_ID[current_en]][EN_Size];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],0,0.99);
        for (var i=1; i<5; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0,0.9);

        assignVector2D(fsh_vec_c,0,0);

        // movement
        var fsh_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-150,this.EN_joint[current_en][0].y-50,this.EN_joint[current_en][0].x+150,this.EN_joint[current_en][0].y+50,0);
        if (fsh_target!=-1){
            fsh_vec_c.Vdistance(Players.PL_joint[fsh_target][2],this.EN_joint[current_en][0]);
            fsh_target = Normalize(fsh_vec_c);
            fsh_target -= EN_Info[this.EN_array_ID[current_en]][32]/2-10;
            if (fsh_target<0)
                 scaleVector2D(fsh_vec_c,-0.01);
            else scaleVector2D(fsh_vec_c,0.01);
        }
        if (Terrain.TR_tile_data[clamp(this.EN_joint[current_en][0].y-7,0,DIRE_Inv_Top-1)>>3][clamp(this.EN_joint[current_en][0].x,0,Win_Width-1)>>3] < 0)
            fsh_vec_c.y += 0.03;
        if (random(100)<2){
            fsh_vec_c.x += randomRange(-0.5,0.5);
            fsh_vec_c.y += randomRange(-0.5,0.5);
        }

        // sew limbs
        this.EN_joint[current_en][0].Vadd(fsh_vec_c);
        var fsh_size2 = 6*fsh_size;
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],9*fsh_size,0,0.1);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],5*fsh_size,0,0.1);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][3],6*fsh_size,0,0.1);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][4],6*fsh_size,0,0.1);
        pullJoints(this.EN_joint[current_en][3],this.EN_joint[current_en][4],8*fsh_size,0.1,0.1);

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<5; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][1]);

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            this.EN_piece_size[current_en] = 0;
            for (var i=0; i<5; i++){
                this.EN_joint[current_en][i].x += randomRange(-2,2);
                this.EN_joint[current_en][i].y -= randomRange(2,4);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<5; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        var fsh_size3 = 7*fsh_size*(150-this.EN_piece_size[current_en])/150;
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][3],fsh_size3,0.5,0.5);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][4],fsh_size3,0.5,0.5);
        pullJoints(this.EN_joint[current_en][3],this.EN_joint[current_en][4],fsh_size3,0.5,0.5);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<5; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Mushroom species original name: xa
window.fff = SR_Enemy.prototype.ENmsh;
SR_Enemy.prototype.ENmsh = function(current_en){
    var msh_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_joint[current_en][0].x += 0;
        this.EN_joint[current_en][0].y += 0;
        this.EN_joint[current_en][1].x += 0;
        this.EN_joint[current_en][1].y += 1;
        this.EN_joint[current_en][2].x += 0;
        this.EN_joint[current_en][2].y += 3;

        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1){

        // sew body
        for (var i=0; i<2; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],-0.04,0.99);
        moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],1,0.99);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],7*msh_size,0.2,0.2);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],5*msh_size,0.2,0);
        this.EN_joint[current_en][0].x = this.EN_joint[current_en][1].x = this.EN_joint[current_en][2].x;

        // attack
        if (this.EN_reload[current_en]>0){
            this.EN_reload[current_en]--;
        } else if (this.EN_is_provoked[current_en]>0){
            this.EN_joint[current_en][0].y += randomRange(0,1);
            this.ENattack(current_en,0);
        }
        this.EN_is_provoked[current_en] = 0;
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<3; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].x = this.EN_joint[current_en][0].x;
        this.EN_joint[current_en][this.EN_center].y = (this.EN_joint[current_en][0].y+this.EN_joint[current_en][1].y)>>1;

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en]++;
            for (var i=0; i<3; i++){
                this.EN_joint[current_en][i].x += randomRange(-0.5,0.5);
                this.EN_joint[current_en][i].y -= randomRange(2,3);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<3; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<3; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Eel species original name: eb
window.fff = SR_Enemy.prototype.ENeel;
SR_Enemy.prototype.ENeel = function(current_en,type){
    var vec_d = new Vector2D;
    var eel_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        if (random(100)<50)
             this.EN_state[current_en] = 1;
        else this.EN_state[current_en] = 2;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],0,0.98);
        for (var i=1; i<6; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0,0.9);

        // movement
        if (type==9){
            assignVector2D(vec_d,0,0);
            var eel_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-150,this.EN_joint[current_en][0].y-50,this.EN_joint[current_en][0].x+150,this.EN_joint[current_en][0].y+50,0);
            if (eel_target!=-1){
                vec_d.Vdistance(Players.PL_joint[eel_target][2],this.EN_joint[current_en][0]);
                eel_target = Normalize(vec_d);
                eel_target -= EN_Info[this.EN_array_ID[current_en]][32]/2-10;
                if (eel_target<0){
                    scaleVector2D(vec_d,-0.05);
                    if (this.EN_joint[current_en][0].x>Win_Height)
                        getPerpendicular(vec_d);

                    if (this.EN_joint[current_en][0].x<128){
                        getPerpendicular(vec_d);
                        scaleVector2D(vec_d,-1);
                    }
                } else  scaleVector2D(vec_d,0.01);
            }
            eel_target = clamp(this.EN_joint[current_en][0].x,0,Win_Width-1)>>3;
            var eel_var1 = clamp(this.EN_joint[current_en][0].y-7,0,DIRE_Inv_Top-1)>>3;
            eel_target = Terrain.TR_tile_data[eel_var1][eel_target];
            if (eel_target<0)
                vec_d.y += 0.05;
            eel_target = clamp(this.EN_joint[current_en][0].x+vec_d.x,0,Win_Width-1)>>3;
            eel_var1 = clamp(this.EN_joint[current_en][0].y+vec_d.y,0,DIRE_Inv_Top-1)>>3;
            eel_target = Terrain.TR_tile_data[eel_var1][eel_target];
            if (0<=eel_target && eel_target<=8)
                getPerpendicular(vec_d);
        } else {
            assignVector2D(vec_d,0,0);
            eel_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-500,this.EN_joint[current_en][0].y-500,this.EN_joint[current_en][0].x+500,this.EN_joint[current_en][0].y+500,0);
            if (eel_target!=-1){
                vec_d.Vdistance(Players.PL_joint[eel_target][2],this.EN_joint[current_en][0]);
                eel_target = Normalize(vec_d);
                eel_target -= EN_Info[this.EN_array_ID[current_en]][32]/2-10;
                if (eel_target<0){
                    if (this.EN_state[current_en]==1){
                        scaleVector2D(vec_d,-0.05);
                    } else {
                        scaleVector2D(vec_d,0.05);
                        getPerpendicular(vec_d);
                    }
                } else  scaleVector2D(vec_d,0.02);
            }
            eel_target = clamp(this.EN_joint[current_en][0].x+vec_d.x,0,Win_Width-1)>>3;
            eel_var1 = clamp(this.EN_joint[current_en][0].y+vec_d.y,0,DIRE_Inv_Top-1)>>3;
            eel_target = Terrain.TR_tile_data[eel_var1][eel_target];
            if (0<=eel_target && eel_target<=8){
                getPerpendicular(vec_d);
                if (this.EN_state[current_en]==2)
                    scaleVector2D(vec_d,-1);
            }
        }
        eel_target = clamp(this.EN_joint[current_en][0].x+vec_d.x,0,Win_Width-1)>>3;
        eel_var1 = clamp(this.EN_joint[current_en][0].y+vec_d.y,0,DIRE_Inv_Top-1)>>3;
        eel_target = Terrain.TR_tile_data[eel_var1][eel_target];
        if (0<=eel_target && eel_target<=8){
            getPerpendicular(vec_d);
            if (this.EN_state[current_en]==2)
                scaleVector2D(vec_d,-1);
        }
        if (random(100)<2){
            vec_d.x += randomRange(-0.5,0.5);
            vec_d.y += randomRange(-0.5,0.5);
        }
        this.EN_joint[current_en][0].Vadd(vec_d);

        // sew limbs
        for (var i=0; i<6; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+1],6*eel_size,0,0.5);

        // attack
        if (EN_Info[this.EN_array_ID[current_en]][En_Is_2nd_Att]==0)
             this.ENattack(current_en,0);
        else this.ENattack(current_en,random(100)<50? 0 :1);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<6; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            this.EN_piece_size[current_en] = 0;
            for (var i=0; i<6; i++)
                this.EN_joint[current_en][i].x += randomRange(-2,2);
                this.EN_joint[current_en][i].y -= randomRange(2,4);
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<6; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        var eel_var2 = 6*(150-this.EN_piece_size[current_en])/150;
        for (var i=1; i<5; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+1],eel_var2*eel_size,0,0.5);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<6; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Spider species original name: mb
window.fff = SR_Enemy.prototype.ENspr;
SR_Enemy.prototype.ENspr = function(current_en){
    var spr_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_joint[current_en][0].x += 4;
        this.EN_joint[current_en][0].y += 0;
        this.EN_joint[current_en][1].x += 0;
        this.EN_joint[current_en][1].y += 0;
        this.EN_joint[current_en][2].x += 0;
        this.EN_joint[current_en][2].y += 7.99;
        this.EN_joint[current_en][3].x += 7.99;
        this.EN_joint[current_en][3].y += 0;
        this.EN_joint[current_en][4].x += 7.99;
        this.EN_joint[current_en][4].y += 7.99;
        this.EN_joint[current_en][5].x += 0;
        this.EN_joint[current_en][5].y += 0;
        this.EN_joint[current_en][6].x += 0;
        this.EN_joint[current_en][6].y += 7.99;
        this.EN_joint[current_en][7].x += 7.99;
        this.EN_joint[current_en][7].y += 0;
        this.EN_joint[current_en][8].x += 7.99;
        this.EN_joint[current_en][8].y += 7.99;
        for (var i=0; i<9; i++)
            this.EN_joint_destination[current_en][i].Vset(this.EN_joint[current_en][i]);

        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],-0.05,0.99);
        moveJoint(this.EN_joint[current_en][1],this.EN_joint_destination[current_en][1],-0.1,0.99);
        moveJoint(this.EN_joint[current_en][2],this.EN_joint_destination[current_en][2],0.8,0.99);
        moveJoint(this.EN_joint[current_en][3],this.EN_joint_destination[current_en][3],-0.1,0.99);
        moveJoint(this.EN_joint[current_en][4],this.EN_joint_destination[current_en][4],0.8,0.99);
        moveJoint(this.EN_joint[current_en][5],this.EN_joint_destination[current_en][5],-0.1,0.99);
        moveJoint(this.EN_joint[current_en][6],this.EN_joint_destination[current_en][6],0.8,0.99);
        moveJoint(this.EN_joint[current_en][7],this.EN_joint_destination[current_en][7],-0.1,0.99);
        moveJoint(this.EN_joint[current_en][8],this.EN_joint_destination[current_en][8],0.8,0.99);

        // movement
        if (random(100)<50 && (this.EN_is_grounded[current_en]&3)>0){
            var spr_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-500,this.EN_joint[current_en][0].y-25,this.EN_joint[current_en][0].x+500,this.EN_joint[current_en][0].y+25,0);
            if (spr_target!=-1){
                if (Players.PL_joint[spr_target][2].x<this.EN_joint[current_en][0].x)
                     this.EN_state[current_en] = 1;
                else this.EN_state[current_en] = 2;
            } else if (random(100)<10){
                this.EN_state[current_en] = fiftyfifty(1,2);
            }
            if (this.EN_state[current_en]==1){
                if (this.EN_joint[current_en][2].x < this.EN_joint[current_en][6].x){
                    this.EN_joint[current_en][6].x -= random(1);
                    this.EN_joint[current_en][6].y += randomRange(-1,-1);
                } else {
                    this.EN_joint[current_en][2].x -= random(1);
                    this.EN_joint[current_en][2].y += randomRange(-1,-1);
                }
                if (this.EN_joint[current_en][4].x < this.EN_joint[current_en][8].x){
                    this.EN_joint[current_en][8].x -= random(1);
                    this.EN_joint[current_en][8].y += randomRange(-1,-1);
                } else {
                    this.EN_joint[current_en][4].x -= random(1);
                    this.EN_joint[current_en][4].y += randomRange(-1,-1);
                }
                if (random(100)<1){
                    this.EN_joint[current_en][0].x -= 1;
                    this.EN_joint[current_en][0].y -= 3;
                }
            } else {
                if (this.EN_joint[current_en][2].x < this.EN_joint[current_en][6].x){
                    this.EN_joint[current_en][2].x += random(1);
                    this.EN_joint[current_en][2].y += randomRange(-1,-1);
                } else {
                    this.EN_joint[current_en][6].x += random(1);
                    this.EN_joint[current_en][6].y += randomRange(-1,-1);
                }
                if (this.EN_joint[current_en][4].x < this.EN_joint[current_en][8].x){
                    this.EN_joint[current_en][4].x += random(1);
                    this.EN_joint[current_en][4].y += randomRange(-1,-1);
                } else {
                    this.EN_joint[current_en][8].x += random(1);
                    this.EN_joint[current_en][8].y += randomRange(-1,-1);
                }
                if (random(100)<1){
                    this.EN_joint[current_en][0].x += 1;
                    this.EN_joint[current_en][0].y -= 3;
                }
            }
        }

        // sew limbs
        var spr_size2 = spr_size*2.2;
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][5],3*spr_size2,0.1*0.3,0.3);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][7],3*spr_size2,0.1*0.3,0.3);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][6],3*spr_size2,0.1*0.3,0.3);
        pullJoints(this.EN_joint[current_en][5],this.EN_joint[current_en][6],2*spr_size2,0.2*0.3,0.2*0.3);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][8],3*spr_size2,0.1*0.3,0.3);
        pullJoints(this.EN_joint[current_en][7],this.EN_joint[current_en][8],2*spr_size2,0.2*0.3,0.2*0.3);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],4*spr_size2,0.1*0.3,0.3);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][3],4*spr_size2,0.1*0.3,0.3);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][2],4*spr_size2,0.1*0.3,0.3);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],3*spr_size2,0.2*0.3,0.2*0.3);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][4],4*spr_size2,0.1*0.3,0.3);
        pullJoints(this.EN_joint[current_en][3],this.EN_joint[current_en][4],3*spr_size2,0.2*0.3,0.2*0.3);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][4],8*spr_size2,0.1*0.3,0.1*0.3);
        pullJoints(this.EN_joint[current_en][5],this.EN_joint[current_en][7],7*spr_size2,0.1*0.3,0.1*0.3);

        // attack
        this.ENattack(current_en,0);
        if (EN_Info[this.EN_array_ID[current_en]][En_Is_2nd_Att]!=0)
            this.ENattack(current_en,1);

        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<9; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            this.EN_piece_size[current_en] = 0;
            for (var i=1; i<9; i++){
                this.EN_joint[current_en][i].x += randomRange(-1,1);
                this.EN_joint[current_en][i].y -= randomRange(1,2);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<9; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        var spr_size2 = 1.2*(150-this.EN_piece_size[current_en])/150;
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],4*spr_size2,0.5,0.5);
        pullJoints(this.EN_joint[current_en][3],this.EN_joint[current_en][4],4*spr_size2,0.5,0.5);
        pullJoints(this.EN_joint[current_en][5],this.EN_joint[current_en][6],3*spr_size2,0.5,0.5);
        pullJoints(this.EN_joint[current_en][7],this.EN_joint[current_en][8],3*spr_size2,0.5,0.5);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<9; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Cactus species original name: nb
window.fff = SR_Enemy.prototype.ENcts;
SR_Enemy.prototype.ENcts = function(current_en){
    var cts_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_joint[current_en][0].x += 1;
        this.EN_joint[current_en][0].y += 0;
        this.EN_joint[current_en][1].x += 0;
        this.EN_joint[current_en][1].y += 1;
        this.EN_joint[current_en][2].x += 2;
        this.EN_joint[current_en][2].y += 1;
        this.EN_joint[current_en][3].x += 1;
        this.EN_joint[current_en][3].y += 2;

        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1){

        // sew body
        for (var i=0; i<3; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],-0.04,0.99);
        moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],1,0.99);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][3],20*cts_size,0.2,0);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][3],15*cts_size,0.2,0);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][3],20*cts_size,0.2,0);

        // attack
        this.EN_joint[current_en][0].x = this.EN_joint[current_en][3].x;
        this.EN_joint[current_en][1].x = this.EN_joint[current_en][3].x-8*cts_size;
        this.EN_joint[current_en][2].x = this.EN_joint[current_en][3].x+8*cts_size;
        if (this.EN_reload[current_en]>0){
            this.EN_reload[current_en]--;
        } else if (this.EN_is_provoked[current_en]>0){
            this.EN_joint[current_en][0].y += randomRange(0,1);
            this.EN_joint[current_en][1].y += randomRange(0,1);
            this.EN_joint[current_en][2].y += randomRange(0,1);
            this.ENattack(current_en,0);
        }
        this.EN_is_provoked[current_en] = 0;
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<4; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].x = this.EN_joint[current_en][0].x;
        this.EN_joint[current_en][this.EN_center].y = (this.EN_joint[current_en][0].y+this.EN_joint[current_en][1].y)>>1;

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en]++;
            for (var i=0; i<4; i++){
                this.EN_joint[current_en][i].x += randomRange(-0.5,0.5);
                this.EN_joint[current_en][i].y -= randomRange(2,3);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<4; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<4; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Copter species original name: ob
window.fff = SR_Enemy.prototype.ENcop;
SR_Enemy.prototype.ENcop = function(current_en){
    var cop_vec_c = new Vector2D;
    var cop_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_joint[current_en][0].x += 2;
        this.EN_joint[current_en][0].y += 4;
        this.EN_joint[current_en][1].x += 2;
        this.EN_joint[current_en][1].y += 2;
        this.EN_joint[current_en][2].x += 0;
        this.EN_joint[current_en][2].y += 0;
        this.EN_joint[current_en][3].x += 4;
        this.EN_joint[current_en][3].y += 0;
        for (var i=0; i<4; i++)
            this.EN_joint_destination[current_en][i].Vset(this.EN_joint[current_en][i]);

        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1 || this.EN_state[current_en]==2){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],0.1,0.99);
        moveJoint(this.EN_joint[current_en][1],this.EN_joint_destination[current_en][1],0.1,0.99);
        moveJoint(this.EN_joint[current_en][2],this.EN_joint_destination[current_en][2],-0.1,0.99);
        moveJoint(this.EN_joint[current_en][3],this.EN_joint_destination[current_en][3],-0.1,0.99);
        assignVector2D(cop_vec_c,0,0);

        // movement
        var cop_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-150,this.EN_joint[current_en][0].y-250,this.EN_joint[current_en][0].x+150,this.EN_joint[current_en][0].y+250,0);
        if (cop_target!=-1){
			cop_vec_c.x = Players.PL_joint[cop_target][2].x-this.EN_joint[current_en][0].x;
            cop_vec_c.y = Players.PL_joint[cop_target][2].y-10-this.EN_joint[current_en][0].y;
            if (cop_vec_c.x<-10)
                cop_vec_c.x = -0.02;
            else if (cop_vec_c.x>10)
                cop_vec_c.x = 0.02;
            else
                cop_vec_c.x = randomRange(-0.02,0.02);

			var cop_sight = EN_Info[this.EN_array_ID[current_en]][32]/2;
            if (cop_vec_c.y<-cop_sight)
                cop_vec_c.y = -0.02;
            else if (cop_vec_c.y>cop_sight)
                cop_vec_c.y = 0.02;
            else
                cop_vec_c.y = randomRange(-0.1,0.1);
        }
        this.EN_joint[current_en][0].Vadd(cop_vec_c);
        this.EN_joint[current_en][2].x -= random(0.8);
        this.EN_joint[current_en][3].x += random(0.8);

        // sew limbs
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],8*cop_size,0.3,0.3);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][3],8*cop_size,0.3,0.3);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][3],16*cop_size,0.3,0.3);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][2],12*cop_size,0.3,0.3);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][3],12*cop_size,0.3,0.3);

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<4; i++)
            this.ENgroundCollision(current_en,i,1);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);

        // death
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en] = 3;
            for (var i=0; i<4; i++){
                this.EN_joint[current_en][i].x += randomRange(-1,1);
                this.EN_joint[current_en][i].y -= randomRange(1,2);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<4; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        var cop_size2 = (150-this.EN_piece_size[current_en])/150;
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],8*cop_size2,0.3,0.3);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][3],8*cop_size2,0.3,0.3);
        pullJoints(this.EN_joint[current_en][2],this.EN_joint[current_en][3],16*cop_size2,0.3,0.3);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<4; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Bouncer species original name: pb
window.fff = SR_Enemy.prototype.ENbun;
SR_Enemy.prototype.ENbun = function(current_en){
    var bun_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_joint[current_en][0].x += 1;
        this.EN_joint[current_en][0].y += 0;
        this.EN_joint[current_en][1].x += 0;
        this.EN_joint[current_en][1].y += 1;
        this.EN_joint[current_en][2].x += 2;
        this.EN_joint[current_en][2].y += 1;
        for (var i=0; i<3; i++)
            this.EN_joint_destination[current_en][i].Vset(this.EN_joint[current_en][i]);

        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1){

        // sew body
        moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],-0.15,0.99);
        moveJoint(this.EN_joint[current_en][1],this.EN_joint_destination[current_en][1],0.1,0.99);
        moveJoint(this.EN_joint[current_en][2],this.EN_joint_destination[current_en][2],0.1,0.99);

        // movement
        var bun_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-200,this.EN_joint[current_en][0].y-50,this.EN_joint[current_en][0].x+200,this.EN_joint[current_en][0].y+50,0);
        if ((this.EN_is_grounded[current_en]&2)>0 && random(100)<5){
            var bun_var1 = 0;
            if (bun_target!=-1){
                if (Players.PL_joint[bun_target][2].x < this.EN_joint[current_en][0].x)
                     bun_var1 = -1;
                else bun_var1 = 1;
            } else fiftyfifty(-1,1);
            this.EN_joint[current_en][0].x += randomRange(0.4,0.6)*bun_var1;
            this.EN_joint[current_en][0].y += randomRange(-1.5,-2);
        }

        // sew limbs
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],5*bun_size,0.01,0.01);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][2],5*bun_size,0.01,0.01);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],6*bun_size,0.01,0.01);
        if (bun_size>1 && this.EN_is_provoked[current_en]>0 && random(100)<10)
            this.ENspawn(this.EN_joint[current_en][0].x>>3,this.EN_joint[current_en][0].y>>3,this.EN_array_ID[current_en]-1);

        this.EN_is_provoked[current_en] = 0;

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<3; i++)
            this.ENgroundCollision(current_en,i,0.9);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en]++;
            this.EN_joint[current_en][3].Vset(this.EN_joint[current_en][0]);
            this.EN_joint_destination[current_en][3].Vset(this.EN_joint[current_en][0]);
            for (var i=0; i<4; i++){
                this.EN_joint[current_en][i].x += randomRange(-0.5,0.5);
                this.EN_joint[current_en][i].y -= randomRange(2,3);
            }
            enemyDeath(this,current_en,0);
        }
    }

    else {
        for (var i=0; i<4; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        var bun_size2 = (150-this.EN_piece_size[current_en])/150;
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],5*bun_size2,0.01,0.01);
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][2],5*bun_size2,0.01,0.01);
        pullJoints(this.EN_joint[current_en][1],this.EN_joint[current_en][2],6*bun_size2,0.01,0.01);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<4; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Germ species original name: qb
window.fff = SR_Enemy.prototype.ENgrm;
SR_Enemy.prototype.ENgrm = function(current_en){
    var grm_vec_c = new Vector2D;
    var grm_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_state[current_en] = 1;
    }
    // perform
    else if (this.EN_state[current_en]==1){

        // sew body
        for (var i=0; i<10; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0,0.98);
        if (this.EN_piece_size[current_en]<=0 && random(100)<5){
            var grm_var1 = floor(random(3));
            if (grm_var1==0){
                grm_vec_c.x = (this.EN_joint[current_en][8].x+this.EN_joint[current_en][9].x)/2-this.EN_joint[current_en][7].x;
                grm_vec_c.y = (this.EN_joint[current_en][8].y+this.EN_joint[current_en][9].y)/2-this.EN_joint[current_en][7].y;
                Normalize(grm_vec_c);
                scaleVector2D(grm_vec_c,grm_size);
                this.EN_joint[current_en][7].Vadd(grm_vec_c);
            } else if (grm_var1==1){
                grm_vec_c.x = (this.EN_joint[current_en][9].x+this.EN_joint[current_en][7].x)/2-this.EN_joint[current_en][8].x;
                grm_vec_c.y = (this.EN_joint[current_en][9].y+this.EN_joint[current_en][7].y)/2-this.EN_joint[current_en][8].y;
                Normalize(grm_vec_c);
                scaleVector2D(grm_vec_c,grm_size);
                this.EN_joint[current_en][8].Vadd(grm_vec_c);
            } else if (grm_var1==2){
                grm_vec_c.x = (this.EN_joint[current_en][7].x+this.EN_joint[current_en][8].x)/2-this.EN_joint[current_en][9].x;
                grm_vec_c.y = (this.EN_joint[current_en][7].y+this.EN_joint[current_en][8].y)/2-this.EN_joint[current_en][9].y;
                Normalize(grm_vec_c);
                scaleVector2D(grm_vec_c,grm_size);
                this.EN_joint[current_en][9].Vadd(grm_vec_c);
            }
            this.EN_piece_size[current_en] = 25*grm_size;
        }
        assignVector2D(grm_vec_c,0,0);

        // movement
        var grm_target = Players.PLfindPlayer(this.EN_joint[current_en][0].x-200,this.EN_joint[current_en][0].y-200,this.EN_joint[current_en][0].x+200,this.EN_joint[current_en][0].y+200,0);
        if (grm_target!=-1){
            grm_vec_c.Vdistance(Players.PL_joint[grm_target][2],this.EN_joint[current_en][0]);
            Normalize(grm_vec_c);
            for (var i=4; i<7; i++){
                this.EN_joint[current_en][i].x += 0.02*grm_vec_c.x;
                this.EN_joint[current_en][i].y += 0.02*grm_vec_c.y;
            }
        }

        // sew limbs
        for (var i=1; i<4; i++)
            pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][i],3*grm_size,0.05,0.05);
        for (var i=1; i<4; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+3],3*grm_size,0.05,0.05);
        for (var i=4; i<7; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+3],3*grm_size,0.05,0.01);
        if (this.EN_piece_size[current_en]--<5){
            var grm_size2 = 0.01/grm_size;
            pullJoints(this.EN_joint[current_en][7],this.EN_joint[current_en][8],20*grm_size,grm_size2,grm_size2);
            pullJoints(this.EN_joint[current_en][8],this.EN_joint[current_en][9],20*grm_size,grm_size2,grm_size2);
            pullJoints(this.EN_joint[current_en][9],this.EN_joint[current_en][7],20*grm_size,grm_size2,grm_size2);
        }

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<10; i++) this.ENgroundCollision(current_en,i,0.9);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);
        if (this.EN_health[current_en]<=0){
            this.EN_state[current_en]++;
            this.EN_piece_size[current_en] = 0;
            for (var i=0; i<4; i++){
                this.EN_joint[current_en][i].x += randomRange(-0.5,0.5);
                this.EN_joint[current_en][i].y -= randomRange(2,3);
            }
            enemyDeath(this,current_en,0);
        }
    }
    // die
    else {
        for (var i=0; i<10; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.98);
        var grm_size2 = (150-this.EN_piece_size[current_en])/150;
        for (var i=1; i<4; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+3],3*grm_size*grm_size2,0.05,0.05);
        for (var i=4; i<7; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+3],3*grm_size*grm_size2,0.05,0.05);
        this.EN_is_grounded[current_en] = 0;
        for (var i=0; i<10; i++)
            this.ENgroundCollision(current_en,i,0.5);
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

// Digger species original name: rb
window.fff = SR_Enemy.prototype.ENdig;
SR_Enemy.prototype.ENdig = function(current_en){
    var dig_size = EN_Info[this.EN_array_ID[current_en]][EN_Size]*this.sizeMult[current_en];

    // spawn
    if (this.EN_state[current_en]==0){
        this.EN_state[current_en] = floor(randomRange(4,7));
        this.EN_piece_size[current_en] = floor(random(400));
    }
    // perform
    else if (this.EN_state[current_en]<10){

        // sew body
        if (this.EN_piece_size[current_en]<500)
             moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],0.1,0.99);
        else moveJoint(this.EN_joint[current_en][0],this.EN_joint_destination[current_en][0],-0.1,0.99);
        for (var i=1; i<this.EN_state[current_en]-1; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0,0.99);
        moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],1,0.99);

        // movement
        if (random(100)<10){
            var dgr_sway = floor(random(4));
            this.EN_joint[current_en][dgr_sway].x += randomRange(-0.5,0.5);
        }
        this.EN_piece_size[current_en]++;
        if (this.EN_piece_size[current_en]>600)
            this.EN_piece_size[current_en] = floor(random(400));

        // sew limbs
        pullJoints(this.EN_joint[current_en][0],this.EN_joint[current_en][1],8*dig_size,0.2,0.2);
        for (var i=1; i<this.EN_state[current_en]-2; i++)
            pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+1],6*dig_size,0.2,0.2);
        pullJoints(this.EN_joint[current_en][i],this.EN_joint[current_en][i+1],6*dig_size,0.2,0);

        // attack
        this.ENattack(current_en,0);
        this.EN_is_grounded[current_en] = 0;
        for (var i=this.EN_state[current_en]-1; i<this.EN_state[current_en]; i++)
            this.ENgroundCollision(current_en,i,0.5);
        this.EN_joint[current_en][this.EN_center].Vset(this.EN_joint[current_en][0]);

        // death
        if (this.EN_health[current_en]<=0){
            for (var i=0; i<this.EN_state[current_en]; i++){
                this.EN_joint[current_en][i].x += randomRange(-0.5,0.5);
                this.EN_joint[current_en][i].y -= randomRange(2,3);
            }
            this.EN_piece_size[current_en] = 0;
            enemyDeath(this,current_en,0);
            this.EN_state[current_en] += 10;
        }
    }
    // die
    else {
        for (var i=0; i<this.EN_state[current_en]-10; i++)
            moveJoint(this.EN_joint[current_en][i],this.EN_joint_destination[current_en][i],0.05,0.99);
        this.EN_is_grounded[current_en] = 0;
        if (this.EN_piece_size[current_en]++ > 150)
            this.ENkill(current_en--);
    }
    return current_en;
};

window.fff = SR_Enemy.prototype.ENrenderEnemy;
SR_Enemy.prototype.ENrenderEnemy = function(){ // hh.prototype.b()
    var head_img,head_color,body_color,en_size;
    for (var i=0; i<this.EN_index_current; i++){
        head_img = EN_Info[this.EN_array_ID[i]][2];
        head_color = EN_Info[this.EN_array_ID[i]][4];
        body_color = EN_Info[this.EN_array_ID[i]][5];
        attack_color = EN_Info[this.EN_array_ID[i]][10];
        attack_ele_type = EN_Info[this.EN_array_ID[i]][33];
        attack_ele_param = EN_Info[this.EN_array_ID[i]][34];
        en_size = EN_Info[this.EN_array_ID[i]][EN_Size]*this.sizeMult[i];
        var limb_size = (150-this.EN_piece_size[i])/150*en_size;

        // elites
        switch (this.EN_elite_type[i]) {
            case 0: //Physical
                body_color = 0x888888; //Gray
                //Hat
                dispItemCentered(Elite_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y-4*limb_size),floor(16*limb_size),floor(16*limb_size),16,0,16,16,0xFFFFFF);
            break;
            case 1: //Fire
                body_color = 0xFF2200; //Fiery red
                EN_Info[this.EN_array_ID[i]][33] = 1;
                EN_Info[this.EN_array_ID[i]][34] = 50;
                EN_Info[this.EN_array_ID[i]][10] = 0xFFFF0000;
                //Horns
                dispItemCentered(Elite_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y-4*limb_size),floor(16*limb_size),floor(16*limb_size),32,0,16,16,0xFFFFFF);
                if (this.EN_health[i] > 0) {
                    this.ENattack(i,339 - this.EN_array_ID[i]);
                }
            break;
        }

        if (this.EN_frozen_ticks[i]>0){
            head_color = 0x5A8EE1; // pale blue
            body_color = 0x1E5CD0; // blue
        } else if (this.EN_ice_ticks[i]>0){
            head_color = 0x1E5CD0; // blue
            body_color = 0x002670;    // navy blue
        } else if (this.EN_poison_ticks[i]>0){
            head_color = 0x33FF00; // light green
            body_color = 0x339900; // dark green
        }

        switch (this.EN_species_ID[i]){
            case 0: // walker
                drawRectCentered(floor(this.EN_joint[i][1].x-0.5),floor(this.EN_joint[i][1].y)-2*en_size,floor(4*limb_size)+1,floor(4*limb_size)+1,body_color);
                drawRectCentered(floor(this.EN_joint[i][2].x-0.5),floor(this.EN_joint[i][2].y)-2*en_size,floor(4*limb_size)+1,floor(4*limb_size)+1,body_color);

                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 1: // snake
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][2].x),floor(this.EN_joint[i][2].y-2*limb_size),floor(8*limb_size),floor(8*limb_size),16*head_img,0,16,16,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][1].x),floor(this.EN_joint[i][1].y-3*limb_size),floor(12*limb_size),floor(12*limb_size),16*head_img,0,16,16,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y-4*limb_size),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 2: // bat
                drawLine(this.EN_joint[i][1].x,this.EN_joint[i][1].y,this.EN_joint[i][2].x,this.EN_joint[i][2].y,body_color);
                drawLine(this.EN_joint[i][2].x,this.EN_joint[i][2].y,this.EN_joint[i][3].x,this.EN_joint[i][3].y,body_color);
                drawLine(this.EN_joint[i][3].x,this.EN_joint[i][3].y,this.EN_joint[i][1].x,this.EN_joint[i][1].y,body_color);
                drawLine(this.EN_joint[i][4].x,this.EN_joint[i][4].y,this.EN_joint[i][5].x,this.EN_joint[i][5].y,body_color);
                drawLine(this.EN_joint[i][5].x,this.EN_joint[i][5].y,this.EN_joint[i][6].x,this.EN_joint[i][6].y,body_color);
                drawLine(this.EN_joint[i][6].x,this.EN_joint[i][6].y,this.EN_joint[i][4].x,this.EN_joint[i][4].y,body_color);

                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 3: // dragon
                if (this.EN_state[i]<3){
                    drawLine(this.EN_joint[i][0].x,this.EN_joint[i][0].y,this.EN_joint[i][1].x,this.EN_joint[i][1].y,body_color);
                    drawLine(this.EN_joint[i][4].x,this.EN_joint[i][4].y,this.EN_joint[i][5].x,this.EN_joint[i][5].y,body_color);
                }
                drawLine(this.EN_joint[i][1].x,this.EN_joint[i][1].y,this.EN_joint[i][2].x,this.EN_joint[i][2].y,body_color);
                drawLine(this.EN_joint[i][2].x,this.EN_joint[i][2].y,this.EN_joint[i][3].x,this.EN_joint[i][3].y,body_color);
                drawLine(this.EN_joint[i][3].x,this.EN_joint[i][3].y,this.EN_joint[i][4].x,this.EN_joint[i][4].y,body_color);

                fillColor(floor(this.EN_joint[i][5].x),floor(this.EN_joint[i][5].y),floor(2*limb_size),floor(2*limb_size),head_color);

                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 4:  // stickman
            case 12: // zombie
                drawLine(this.EN_joint[i][1].x,this.EN_joint[i][1].y,this.EN_joint[i][2].x,this.EN_joint[i][2].y,body_color);
                if (this.EN_state[i]<3){
                    drawLine(this.EN_joint[i][1].x,this.EN_joint[i][1].y,this.EN_joint[i][3].x,this.EN_joint[i][3].y,body_color);
                    drawLine(this.EN_joint[i][1].x,this.EN_joint[i][1].y,this.EN_joint[i][4].x,this.EN_joint[i][4].y,body_color);
                }
                drawLine(this.EN_joint[i][3].x,this.EN_joint[i][3].y,this.EN_joint[i][5].x,this.EN_joint[i][5].y,body_color);
                drawLine(this.EN_joint[i][4].x,this.EN_joint[i][4].y,this.EN_joint[i][6].x,this.EN_joint[i][6].y,body_color);
                if (this.EN_state[i]<3){
                    drawLine(this.EN_joint[i][2].x,this.EN_joint[i][2].y,this.EN_joint[i][7].x,this.EN_joint[i][7].y,body_color);
                    drawLine(this.EN_joint[i][2].x,this.EN_joint[i][2].y,this.EN_joint[i][8].x,this.EN_joint[i][8].y,body_color);
                }
                drawLine(this.EN_joint[i][7].x,this.EN_joint[i][7].y,this.EN_joint[i][9].x,this.EN_joint[i][9].y,body_color);
                drawLine(this.EN_joint[i][8].x,this.EN_joint[i][8].y,this.EN_joint[i][10].x,this.EN_joint[i][10].y,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                if (this.EN_array_ID[i]==332)
                    dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y-3*limb_size),floor(16*limb_size),floor(16*limb_size),352,0,16,16,0xFFFFFF);
                break;

            case 5:  // tree
            case 18: // hanging tree
                var r;
                if (this.EN_species_ID[i]==5)
                     r = -2;
                else r = 2;
                for (var j=this.EN_state[i]<10? this.EN_state[i]-1 :this.EN_state[i]-11; j>0; j--)
                    drawRectCentered(floor(this.EN_joint[i][j].x),floor(this.EN_joint[i][j].y+r*limb_size),floor(4*limb_size)+1,floor(4*limb_size)+1,body_color);
                if (this.EN_species_ID[i]==5)
                     dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color)
                else dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,15,16,-16,head_color);
                break;

            case 6: // wheel
                for (var j=1; j<6; j++)
                    drawLine(this.EN_joint[i][j].x,this.EN_joint[i][j].y,this.EN_joint[i][j+1].x,this.EN_joint[i][j+1].y,body_color);
                if (this.EN_state[i]<3)
                    drawLine(this.EN_joint[i][j].x,this.EN_joint[i][j].y,this.EN_joint[i][1].x,this.EN_joint[i][1].y,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 7: // fish
                drawLine(this.EN_joint[i][2].x,this.EN_joint[i][2].y,this.EN_joint[i][3].x,this.EN_joint[i][3].y,body_color);
                drawLine(this.EN_joint[i][2].x,this.EN_joint[i][2].y,this.EN_joint[i][4].x,this.EN_joint[i][4].y,body_color);
                drawLine(this.EN_joint[i][3].x,this.EN_joint[i][3].y,this.EN_joint[i][4].x,this.EN_joint[i][4].y,body_color);
                drawRectCentered(floor(this.EN_joint[i][1].x),floor(this.EN_joint[i][1].y),floor(6*limb_size)+1,floor(6*limb_size)+1,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 8: // mushroom
                drawRectCentered(floor(this.EN_joint[i][2].x)+floor(1*limb_size),floor(this.EN_joint[i][2].y-2*limb_size),floor(8*limb_size)+1,floor(4*limb_size)+1,body_color);
                drawRectCentered(floor(this.EN_joint[i][1].x),floor(this.EN_joint[i][1].y-2*limb_size),floor(4*limb_size)+1,floor(4*limb_size)+1,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 9:  // eel (swimming)
            case 13: // eel (flying)
                fillColor(floor(this.EN_joint[i][5].x),floor(this.EN_joint[i][5].y),floor(2*limb_size),floor(2*limb_size),head_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][4].x),floor(this.EN_joint[i][4].y),floor(8*limb_size),floor(8*limb_size),16*head_img,0,16,16,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][3].x),floor(this.EN_joint[i][3].y),floor(10*limb_size),floor(10*limb_size),16*head_img,0,16,16,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][2].x),floor(this.EN_joint[i][2].y),floor(12*limb_size),floor(12*limb_size),16*head_img,0,16,16,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][1].x),floor(this.EN_joint[i][1].y),floor(14*limb_size),floor(14*limb_size),16*head_img,0,16,16,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 10: // spider
                drawLine(this.EN_joint[i][1].x,this.EN_joint[i][1].y,this.EN_joint[i][2].x,this.EN_joint[i][2].y,body_color);
                if (this.EN_state[i]<3){
                    drawLine(this.EN_joint[i][0].x,this.EN_joint[i][0].y,this.EN_joint[i][1].x,this.EN_joint[i][1].y,body_color);
                    drawLine(this.EN_joint[i][0].x,this.EN_joint[i][0].y,this.EN_joint[i][3].x,this.EN_joint[i][3].y,body_color);
                }
                drawLine(this.EN_joint[i][1].x,this.EN_joint[i][1].y,this.EN_joint[i][2].x,this.EN_joint[i][2].y,body_color);
                drawLine(this.EN_joint[i][3].x,this.EN_joint[i][3].y,this.EN_joint[i][4].x,this.EN_joint[i][4].y,body_color);
                if (this.EN_state[i]<3){
                    drawLine(this.EN_joint[i][0].x,this.EN_joint[i][0].y,this.EN_joint[i][5].x,this.EN_joint[i][5].y,body_color);
                    drawLine(this.EN_joint[i][0].x,this.EN_joint[i][0].y,this.EN_joint[i][7].x,this.EN_joint[i][7].y,body_color);
                }
                drawLine(this.EN_joint[i][5].x,this.EN_joint[i][5].y,this.EN_joint[i][6].x,this.EN_joint[i][6].y,body_color);
                drawLine(this.EN_joint[i][7].x,this.EN_joint[i][7].y,this.EN_joint[i][8].x,this.EN_joint[i][8].y,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 11: // cactus
                drawRectCentered(floor(this.EN_joint[i][3].x),floor(this.EN_joint[i][3].y-7*limb_size),floor(4*limb_size)+1,floor(14*limb_size)+1,body_color);
                drawRectCentered(floor(this.EN_joint[i][2].x)+0,floor(this.EN_joint[i][2].y),floor(4*limb_size)+1,floor(9*limb_size)+1,body_color);
                drawRectCentered(floor(this.EN_joint[i][1].x)+1,floor(this.EN_joint[i][1].y),floor(4*limb_size)+1,floor(8*limb_size)+1,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x)+1,floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 14: // copter
                drawLine(this.EN_joint[i][1].x,this.EN_joint[i][1].y,this.EN_joint[i][2].x,this.EN_joint[i][2].y,body_color);
                drawLine(this.EN_joint[i][2].x,this.EN_joint[i][2].y,this.EN_joint[i][3].x,this.EN_joint[i][3].y,body_color);
                drawLine(this.EN_joint[i][3].x,this.EN_joint[i][3].y,this.EN_joint[i][1].x,this.EN_joint[i][1].y,body_color);
                dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 15: // bouncer
                drawLine(this.EN_joint[i][0].x,this.EN_joint[i][0].y,this.EN_joint[i][1].x,this.EN_joint[i][1].y,body_color);
                drawLine(this.EN_joint[i][0].x,this.EN_joint[i][0].y,this.EN_joint[i][2].x,this.EN_joint[i][2].y,body_color);
                drawLine(this.EN_joint[i][1].x,this.EN_joint[i][1].y,this.EN_joint[i][2].x,this.EN_joint[i][2].y,body_color);
                if (this.EN_state[i]<2)
                     dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                else dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][3].x),floor(this.EN_joint[i][3].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 16: // germ
                if (this.EN_state[i]<2){
                    for (var j=1; j<4; j++)
                        drawLine(this.EN_joint[i][0].x,this.EN_joint[i][0].y,this.EN_joint[i][j].x,this.EN_joint[i][j].y,body_color);
                }
                for (var j=4; j<10; j++)
                    drawLine(this.EN_joint[i][j-3].x,this.EN_joint[i][j-3].y,this.EN_joint[i][j].x,this.EN_joint[i][j].y,body_color);
                if (this.EN_state[i]<2){
                    for (var j=7; j<10; j++)
                        fillColor(floor(this.EN_joint[i][j].x),floor(this.EN_joint[i][j].y),floor(2*en_size),floor(2*en_size),head_color);
                } else {
                    for (var j=7; j<10; j++)
                        fillColor(floor(this.EN_joint[i][j].x)+1,floor(this.EN_joint[i][j].y)+1,floor(2*limb_size),floor(2*limb_size),head_color);
                }
                if (this.EN_state[i]<2)
                     dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*en_size),floor(16*en_size),16*head_img,0,16,16,head_color);
                else dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                break;

            case 17: // digger
                if (this.EN_state[i]<10){
                    for (var j=this.EN_state[i]-1; j>0; j--)
                        fillColor(floor(this.EN_joint[i][j].x),floor(this.EN_joint[i][j].y-2*en_size),floor(4*en_size),floor(4*en_size),body_color);
                    dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*en_size),floor(16*en_size),16*head_img,0,16,16,head_color);
                } else {
                    for (var j=this.EN_state[i]-11; j>0; j--)
                        drawRectCentered(floor(this.EN_joint[i][j].x),floor(this.EN_joint[i][j].y-2*limb_size),floor(4*limb_size)+1,floor(4*limb_size)+1,body_color);
                    dispItemCentered(Enemy_Head_Img,floor(this.EN_joint[i][0].x),floor(this.EN_joint[i][0].y),floor(16*limb_size),floor(16*limb_size),16*head_img,0,16,16,head_color);
                }
        }
        if ((Sett_LP_Bar_Disp&2)>0 && this.EN_health[i]>0){
            drawButton(floor(this.EN_joint[i][0].x)-6*en_size,floor(this.EN_joint[i][0].y)-10*en_size,12*en_size,1,0x990000); // red
            drawButton(floor(this.EN_joint[i][0].x)-6*en_size,floor(this.EN_joint[i][0].y)-10*en_size,floor(12*en_size*this.EN_health[i]/(EN_Info[this.EN_array_ID[i]][EN_LP]*this.healthMult[i])),1,0x00CC00); // green
        }
    }
};

// output enemy icon for book and in-stage info
SR_Enemy.prototype.ENdrawIcon = function(array_ID,x_pos,y_pos,if_not_book){ // hh.prototype.M
    var en_head = EN_Info[array_ID][2];
    var head_color = EN_Info[array_ID][4];
    var body_color = EN_Info[array_ID][5];
    var en_size = clamp(EN_Info[array_ID][EN_Size],1,4);
    if (if_not_book==1)
        en_size = 1;
    scale = en_size;
    var joint_Xpos = [0,0,0,0,0,0,0,0,0,0,0];
    var joint_Ypos = [0,0,0,0,0,0,0,0,0,0,0];
    switch (EN_Info[array_ID][EN_Species]){
        case 0: // walker
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-7*scale;
            joint_Xpos[1] = x_pos-5.5*scale; // left foot
            joint_Ypos[1] = y_pos-0*scale;
            joint_Xpos[2] = x_pos+6*scale; // right foot
            joint_Ypos[2] = y_pos-0*scale;
            break;
        case 1: // snake
            joint_Xpos[0] = x_pos-3*scale; // head segment
            joint_Ypos[0] = y_pos-8*scale;
            joint_Xpos[1] = x_pos+1*scale; // middle segment
            joint_Ypos[1] = y_pos-7*scale;
            joint_Xpos[2] = x_pos+4*scale; // tail segment
            joint_Ypos[2] = y_pos-1*scale;
            break;
        case 2: // bat
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-8*scale;
            joint_Xpos[1] = x_pos-4*scale; // left wing inside tip
            joint_Ypos[1] = y_pos-8*scale;
            joint_Xpos[2] = x_pos-9*scale; // left wing top tip
            joint_Ypos[2] = y_pos-9*scale;
            joint_Xpos[3] = x_pos-7*scale; // left wing bottom tip
            joint_Ypos[3] = y_pos-4*scale;
            joint_Xpos[4] = x_pos+3*scale; // right wing inside tip
            joint_Ypos[4] = y_pos-8*scale;
            joint_Xpos[5] = x_pos+9*scale; // right wing top tip
            joint_Ypos[5] = y_pos-10*scale;
            joint_Xpos[6] = x_pos+7*scale; // right wing bottom tip
            joint_Ypos[6] = y_pos-4*scale;
            break;
        case 3: // dragon
            joint_Xpos[0] = x_pos-3*scale; // head
            joint_Ypos[0] = y_pos-10*scale;
            joint_Xpos[1] = x_pos+1*scale; // tail
            joint_Ypos[1] = y_pos-10*scale;         // (body in order from tail (4) to head (1))
            joint_Xpos[2] = x_pos+4*scale; // body 4
            joint_Ypos[2] = y_pos-8*scale;
            joint_Xpos[3] = x_pos+5*scale; // body 3
            joint_Ypos[3] = y_pos-6*scale;
            joint_Xpos[4] = x_pos+5*scale; // body 2
            joint_Ypos[4] = y_pos-4*scale;
            joint_Xpos[5] = x_pos+3*scale; // body 1
            joint_Ypos[5] = y_pos-1*scale;
            break;
        case 4: // stickman
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-15*scale;
            joint_Xpos[1] = x_pos+0*scale; // neck
            joint_Ypos[1] = y_pos-10*scale;
            joint_Xpos[2] = x_pos+0*scale; // crotch
            joint_Ypos[2] = y_pos-7*scale;
            joint_Xpos[3] = x_pos-2*scale; // left elbow
            joint_Ypos[3] = y_pos-8*scale;
            joint_Xpos[4] = x_pos+3*scale; // right elbow
            joint_Ypos[4] = y_pos-11*scale;
            joint_Xpos[5] = x_pos-5*scale; // left hand
            joint_Ypos[5] = y_pos-7*scale;
            joint_Xpos[6] = x_pos+5*scale; // right hand
            joint_Ypos[6] = y_pos-8*scale;
            joint_Xpos[7] = x_pos-3*scale; // left knee
            joint_Ypos[7] = y_pos-3*scale;
            joint_Xpos[8] = x_pos+3*scale; // right knee
            joint_Ypos[8] = y_pos-5*scale;
            joint_Xpos[9] = x_pos-1*scale; // left foot
            joint_Ypos[9] = y_pos-1*scale;
            joint_Xpos[10] = x_pos+2*scale; // right foot
            joint_Ypos[10] = y_pos-0*scale;
            break;
        case 5: // tree
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-20*scale;
            joint_Xpos[1] = x_pos+0*scale; // neck segment
            joint_Ypos[1] = y_pos-12*scale;
            joint_Xpos[2] = x_pos-1*scale; // middle segment
            joint_Ypos[2] = y_pos-6*scale;
            joint_Xpos[3] = x_pos+0*scale; // base segment
            joint_Ypos[3] = y_pos-0*scale;
            break;
        case 18: // tree (hanging)
            scale = clamp(scale,1,2);
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos+20*scale-40;
            joint_Xpos[1] = x_pos+0*scale; // neck segment
            joint_Ypos[1] = y_pos+12*scale-40;
            joint_Xpos[2] = x_pos-1*scale; // middle segment
            joint_Ypos[2] = y_pos+6*scale-40;
            joint_Xpos[3] = x_pos+0*scale; // base segment
            joint_Ypos[3] = y_pos+0*scale-40;
            break;
        case 6: // wheel
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-10*scale;
            joint_Xpos[1] = x_pos-7*scale; // top left corner
            joint_Ypos[1] = y_pos-19*scale;
            joint_Xpos[2] = x_pos+5*scale; // top right corner
            joint_Ypos[2] = y_pos-21*scale;
            joint_Xpos[3] = x_pos+12*scale; // right corner
            joint_Ypos[3] = y_pos-12*scale;
            joint_Xpos[4] = x_pos+7*scale; // bottom right corner
            joint_Ypos[4] = y_pos-2*scale;
            joint_Xpos[5] = x_pos-5*scale; // bottom left corner
            joint_Ypos[5] = y_pos-0*scale;
            joint_Xpos[6] = x_pos-12*scale; // left corner
            joint_Ypos[6] = y_pos-10*scale;
            break;
        case 7: // fish
            joint_Xpos[0] = x_pos-5*scale; // head
            joint_Ypos[0] = y_pos-13*scale;
            joint_Xpos[1] = x_pos+0*scale; // body
            joint_Ypos[1] = y_pos-9*scale;
            joint_Xpos[2] = x_pos+5*scale; // tail base
            joint_Ypos[2] = y_pos-6*scale;
            joint_Xpos[3] = x_pos+8*scale; // clockwise (from base) tail top
            joint_Ypos[3] = y_pos-11*scale;
            joint_Xpos[4] = x_pos+10*scale; // counter-clockwise (from base) tail top
            joint_Ypos[4] = y_pos-3*scale;
            break;
        case 8: // mushroom
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-12*scale;
            joint_Xpos[1] = x_pos+0*scale; // stem
            joint_Ypos[1] = y_pos-5*scale;
            joint_Xpos[2] = x_pos+0*scale; // base
            joint_Ypos[2] = y_pos-0*scale;
            break;
        case 9:  // eel (swimming)
        case 13: // eel (flying)
            joint_Xpos[0] = x_pos-4*scale; // head
            joint_Ypos[0] = y_pos-20*scale;
            joint_Xpos[1] = x_pos+2*scale; // body 1
            joint_Ypos[1] = y_pos-16*scale;
            joint_Xpos[2] = x_pos+4*scale; // body 2
            joint_Ypos[2] = y_pos-11*scale;
            joint_Xpos[3] = x_pos+2*scale; // body 3
            joint_Ypos[3] = y_pos-6*scale;
            joint_Xpos[4] = x_pos-1*scale; // body 4
            joint_Ypos[4] = y_pos-3*scale;
            joint_Xpos[5] = x_pos-5*scale; // tail
            joint_Ypos[5] = y_pos-2*scale;
            break;
        case 10: // spider
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-6*scale;
            joint_Xpos[1] = x_pos-9*scale; // outer left knee
            joint_Ypos[1] = y_pos-9*scale;
            joint_Xpos[2] = x_pos-7*scale; // outer left foot
            joint_Ypos[2] = y_pos-0*scale;
            joint_Xpos[3] = x_pos+9*scale; // outer right knee
            joint_Ypos[3] = y_pos-9*scale;
            joint_Xpos[4] = x_pos+7*scale; // outer right foot
            joint_Ypos[4] = y_pos-0*scale;
            joint_Xpos[5] = x_pos-7*scale; // inner left knee
            joint_Ypos[5] = y_pos-5*scale;
            joint_Xpos[6] = x_pos-5*scale; // inner left foot
            joint_Ypos[6] = y_pos-0*scale;
            joint_Xpos[7] = x_pos+7*scale; // inner right knee
            joint_Ypos[7] = y_pos-5*scale;
            joint_Xpos[8] = x_pos+5*scale; // inner right foot
            joint_Ypos[8] = y_pos-0*scale;
            break;
        case 11: // cactus
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-19*scale;
            joint_Xpos[1] = x_pos-8*scale; // left branch
            joint_Ypos[1] = y_pos-13*scale;
            joint_Xpos[2] = x_pos+8*scale; // right branch
            joint_Ypos[2] = y_pos-18*scale;
            joint_Xpos[3] = x_pos+0*scale; // trunk
            joint_Ypos[3] = y_pos-0*scale;
            break;
        case 12: // zombie
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-16*scale;
            joint_Xpos[1] = x_pos+0*scale; // neck
            joint_Ypos[1] = y_pos-10*scale;
            joint_Xpos[2] = x_pos+2*scale; // crotch
            joint_Ypos[2] = y_pos-7*scale;
            joint_Xpos[3] = x_pos-2*scale; // left elbow
            joint_Ypos[3] = y_pos-8*scale;
            joint_Xpos[4] = x_pos-3*scale; // right elbow
            joint_Ypos[4] = y_pos-11*scale;
            joint_Xpos[5] = x_pos-5*scale; // left hand
            joint_Ypos[5] = y_pos-7*scale;
            joint_Xpos[6] = x_pos-8*scale; // right hand
            joint_Ypos[6] = y_pos-10*scale;
            joint_Xpos[7] = x_pos-1*scale; // left knee
            joint_Ypos[7] = y_pos-4*scale;
            joint_Xpos[8] = x_pos+2*scale; // right knee
            joint_Ypos[8] = y_pos-5*scale;
            joint_Xpos[9] = x_pos-0*scale; // left foot
            joint_Ypos[9] = y_pos-1*scale;
            joint_Xpos[10] = x_pos+4*scale; // right foot
            joint_Ypos[10] = y_pos-0*scale;
            break;
        case 14: // copter
            joint_Xpos[0] = x_pos+0*scale; // head
            joint_Ypos[0] = y_pos-8*scale;
            joint_Xpos[1] = x_pos-0*scale; // body base
            joint_Ypos[1] = y_pos-14*scale;
            joint_Xpos[2] = x_pos-8*scale; // left tip
            joint_Ypos[2] = y_pos-16*scale;
            joint_Xpos[3] = x_pos+8*scale; // right tip
            joint_Ypos[3] = y_pos-16*scale;
            break;
        case 15: // bouncer
            joint_Xpos[0] = x_pos-1*scale; // head
            joint_Ypos[0] = y_pos-12*scale;
            joint_Xpos[1] = x_pos-3*scale; // left base tip
            joint_Ypos[1] = y_pos-0*scale;
            joint_Xpos[2] = x_pos+3*scale; // right base tip
            joint_Ypos[2] = y_pos-0*scale;
            break;
        case 16: // germ
            joint_Xpos[0] = x_pos-0*scale; // head
            joint_Ypos[0] = y_pos-10*scale;
            joint_Xpos[1] = x_pos-3*scale; // left leg knee 1
            joint_Ypos[1] = y_pos-11*scale;
            joint_Xpos[4] = x_pos-6*scale; // left leg knee 2
            joint_Ypos[4] = y_pos-12*scale;
            joint_Xpos[7] = x_pos-9*scale; // left tip
            joint_Ypos[7] = y_pos-13*scale;
            joint_Xpos[2] = x_pos+3*scale; // right leg knee 1
            joint_Ypos[2] = y_pos-11*scale;
            joint_Xpos[5] = x_pos+6*scale; // right leg knee 2
            joint_Ypos[5] = y_pos-12*scale;
            joint_Xpos[8] = x_pos+8*scale; // right tip
            joint_Ypos[8] = y_pos-14*scale;
            joint_Xpos[3] = x_pos+1*scale; // bottom leg knee 1
            joint_Ypos[3] = y_pos-7*scale;
            joint_Xpos[6] = x_pos+2*scale; // bottom leg knee 2
            joint_Ypos[6] = y_pos-4*scale;
            joint_Xpos[9] = x_pos+1*scale; // bottom tip
            joint_Ypos[9] = y_pos-1*scale;
            break;
        case 17: // digger
            joint_Xpos[0] = x_pos+2*scale; // head
            joint_Ypos[0] = y_pos-16*scale;
            joint_Xpos[1] = x_pos+2*scale; // neck segment
            joint_Ypos[1] = y_pos-6*scale;
            joint_Xpos[2] = x_pos-3*scale; // body segment
            joint_Ypos[2] = y_pos-5*scale;
            joint_Xpos[3] = x_pos-2*scale; // base segment
            joint_Ypos[3] = y_pos-0*scale;
            break;
    }
    switch (EN_Info[array_ID][EN_Species]){
        case 0: // walker
            drawRectCentered(floor(joint_Xpos[1]-0.5),floor(joint_Ypos[1])-2*en_size,floor(4*scale)+1,floor(4*scale)+1,body_color);
            drawRectCentered(floor(joint_Xpos[2]-0.5),floor(joint_Ypos[2])-2*en_size,floor(4*scale)+1,floor(4*scale)+1,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 1: // snake
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[2]),floor(joint_Ypos[2]-2*scale),floor(8*scale),floor(8*scale),16*en_head,0,16,16,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[1]),floor(joint_Ypos[1]-3*scale),floor(12*scale),floor(12*scale),16*en_head,0,16,16,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]-4*scale),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 2: // bat
            drawLine(joint_Xpos[1],joint_Ypos[1],joint_Xpos[2],joint_Ypos[2],body_color);
            drawLine(joint_Xpos[2],joint_Ypos[2],joint_Xpos[3],joint_Ypos[3],body_color);
            drawLine(joint_Xpos[3],joint_Ypos[3],joint_Xpos[1],joint_Ypos[1],body_color);
            drawLine(joint_Xpos[4],joint_Ypos[4],joint_Xpos[5],joint_Ypos[5],body_color);
            drawLine(joint_Xpos[5],joint_Ypos[5],joint_Xpos[6],joint_Ypos[6],body_color);
            drawLine(joint_Xpos[6],joint_Ypos[6],joint_Xpos[4],joint_Ypos[4],body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 3: // dragon
            drawLine(joint_Xpos[0],joint_Ypos[0],joint_Xpos[1],joint_Ypos[1],body_color);
            drawLine(joint_Xpos[4],joint_Ypos[4],joint_Xpos[5],joint_Ypos[5],body_color);
            drawLine(joint_Xpos[1],joint_Ypos[1],joint_Xpos[2],joint_Ypos[2],body_color);
            drawLine(joint_Xpos[2],joint_Ypos[2],joint_Xpos[3],joint_Ypos[3],body_color);
            drawLine(joint_Xpos[3],joint_Ypos[3],joint_Xpos[4],joint_Ypos[4],body_color);
            fillColor(floor(joint_Xpos[5]),floor(joint_Ypos[5]),floor(2*scale),floor(2*scale),head_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 4:  // stickman
        case 12: // zombie
            drawLine(joint_Xpos[1],joint_Ypos[1],joint_Xpos[2],joint_Ypos[2],body_color);
            drawLine(joint_Xpos[1],joint_Ypos[1],joint_Xpos[3],joint_Ypos[3],body_color);
            drawLine(joint_Xpos[1],joint_Ypos[1],joint_Xpos[4],joint_Ypos[4],body_color);
            drawLine(joint_Xpos[3],joint_Ypos[3],joint_Xpos[5],joint_Ypos[5],body_color);
            drawLine(joint_Xpos[4],joint_Ypos[4],joint_Xpos[6],joint_Ypos[6],body_color);
            drawLine(joint_Xpos[2],joint_Ypos[2],joint_Xpos[7],joint_Ypos[7],body_color);
            drawLine(joint_Xpos[2],joint_Ypos[2],joint_Xpos[8],joint_Ypos[8],body_color);
            drawLine(joint_Xpos[7],joint_Ypos[7],joint_Xpos[9],joint_Ypos[9],body_color);
            drawLine(joint_Xpos[8],joint_Ypos[8],joint_Xpos[10],joint_Ypos[10],body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            if (array_ID==332)
                dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]-3*scale),floor(16*scale),floor(16*scale),352,0,16,16,0xFFD700);
            break;
        case 5: // tree
            for (var i=3; i>0; i--)
                drawRectCentered(floor(joint_Xpos[i]),floor(joint_Ypos[i]-2*scale),floor(4*scale)+1,floor(4*scale)+1,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 18: // tree (hanging)
            scale = clamp(scale,1,2);
            for (var i=3; i>0; i--)
                drawRectCentered(floor(joint_Xpos[i]),floor(joint_Ypos[i]+2*scale),floor(4*scale)+1,floor(4*scale)+1,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,15,16,-16,head_color);
            break;
        case 6: // wheel
            for (var i=1; i<6; i++) drawLine(joint_Xpos[i],joint_Ypos[i],joint_Xpos[i+1],joint_Ypos[i+1],body_color);
            drawLine(joint_Xpos[i],joint_Ypos[i],joint_Xpos[1],joint_Ypos[1],body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 7: // fish
            drawLine(joint_Xpos[2],joint_Ypos[2],joint_Xpos[3],joint_Ypos[3],body_color);
            drawLine(joint_Xpos[2],joint_Ypos[2],joint_Xpos[4],joint_Ypos[4],body_color);
            drawLine(joint_Xpos[3],joint_Ypos[3],joint_Xpos[4],joint_Ypos[4],body_color);
            drawRectCentered(floor(joint_Xpos[1]),floor(joint_Ypos[1]),floor(6*scale)+1,floor(6*scale)+1,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 8: // mushroom
            drawRectCentered(floor(joint_Xpos[2])+floor(1*scale),floor(joint_Ypos[2]-2*scale),floor(8*scale)+1,floor(4*scale)+1,body_color);
            drawRectCentered(floor(joint_Xpos[1]),floor(joint_Ypos[1]-2*scale),floor(4*scale)+1,floor(4*scale)+1,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 9:  // eel (swimming)
        case 13: // eel (flying)
            fillColor(floor(joint_Xpos[5]),floor(joint_Ypos[5]),floor(2*scale),floor(2*scale),head_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[4]),floor(joint_Ypos[4]),floor(8*scale),floor(8*scale),16*en_head,0,16,16,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[3]),floor(joint_Ypos[3]),floor(10*scale),floor(10*scale),16*en_head,0,16,16,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[2]),floor(joint_Ypos[2]),floor(12*scale),floor(12*scale),16*en_head,0,16,16,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[1]),floor(joint_Ypos[1]),floor(14*scale),floor(14*scale),16*en_head,0,16,16,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 10: // spider
            drawLine(floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(joint_Xpos[1]),floor(joint_Ypos[1]),body_color);
            drawLine(floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(joint_Xpos[3]),floor(joint_Ypos[3]),body_color);
            drawLine(floor(joint_Xpos[1]),floor(joint_Ypos[1]),floor(joint_Xpos[2]),floor(joint_Ypos[2]),body_color);
            drawLine(floor(joint_Xpos[3]),floor(joint_Ypos[3]),floor(joint_Xpos[4]),floor(joint_Ypos[4]),body_color);
            drawLine(floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(joint_Xpos[5]),floor(joint_Ypos[5]),body_color);
            drawLine(floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(joint_Xpos[7]),floor(joint_Ypos[7]),body_color);
            drawLine(floor(joint_Xpos[5]),floor(joint_Ypos[5]),floor(joint_Xpos[6]),floor(joint_Ypos[6]),body_color);
            drawLine(floor(joint_Xpos[7]),floor(joint_Ypos[7]),floor(joint_Xpos[8]),floor(joint_Ypos[8]),body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 11: // cactus
            drawRectCentered(floor(joint_Xpos[3]),floor(joint_Ypos[3]-7*scale),floor(4*scale)+1,floor(14*scale)+1,body_color);
            drawRectCentered(floor(joint_Xpos[2])+0,floor(joint_Ypos[2]),floor(4*scale)+1,floor(9*scale)+1,body_color);
            drawRectCentered(floor(joint_Xpos[1])+1,floor(joint_Ypos[1]),floor(4*scale)+1,floor(8*scale)+1,body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0])+1,floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 14: // copter
            drawLine(floor(joint_Xpos[1]),floor(joint_Ypos[1]),floor(joint_Xpos[2]),floor(joint_Ypos[2]),body_color);
            drawLine(floor(joint_Xpos[1]),floor(joint_Ypos[1]),floor(joint_Xpos[3]),floor(joint_Ypos[3]),body_color);
            drawLine(floor(joint_Xpos[2]),floor(joint_Ypos[2]),floor(joint_Xpos[3]),floor(joint_Ypos[3]),body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 15: // bouncer
            drawLine(floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(joint_Xpos[1]),floor(joint_Ypos[1]),body_color);
            drawLine(floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(joint_Xpos[2]),floor(joint_Ypos[2]),body_color);
            drawLine(floor(joint_Xpos[1]),floor(joint_Ypos[1]),floor(joint_Xpos[2]),floor(joint_Ypos[2]),body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 16: // germ
            for (var i=1; i<4; i++)
                drawLine(floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(joint_Xpos[i]),floor(joint_Ypos[i]),body_color);
            for (var i=4; i<10; i++)
                drawLine(floor(joint_Xpos[i-3]),floor(joint_Ypos[i-3]),floor(joint_Xpos[i]),floor(joint_Ypos[i]),body_color);
            for (var i=7; i<10; i++)
                fillColor(floor(joint_Xpos[i]),floor(joint_Ypos[i]),floor(2*scale),floor(2*scale),head_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
            break;
        case 17: // digger
            for (var i=3; i>0; i--)
                fillColor(floor(joint_Xpos[i]),floor(joint_Ypos[i]-2*scale),floor(4*scale),floor(4*scale),body_color);
            dispItemCentered(Enemy_Head_Img,floor(joint_Xpos[0]),floor(joint_Ypos[0]),floor(16*scale),floor(16*scale),16*en_head,0,16,16,head_color);
    }
};

// Stage States (locked, Unlocked, Beaten, Beaten with book)
// 0: Stage Locked
// 1: Stage Unlocked, Not Beaten
// 3: Stage Completed, Book for this stage not bought.
// 7: Stage Completed, Book for this stage bought.
var Stage_Count = 5; // Stage_Count original name: ze
var Stage_Status = [3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]; // Stage_Status[] original name: Ae
var Unlocked = 1; // original name: Ce
var Beaten = 2; // original name: Be
var Booked = 4; // original name: kg
var Book_List = [1,2,3,4,5]; // stages in book jg[]
var Shop_Reqs = [1,2,3,4,5]; // stages that must be Beaten in order to unlock next weapon in shop gg[]
var Stage_Names = "Town;Opening Cave;Jade Tropics;Sage Grove;Moss Hovel".split(";"); // original name: Uf
var Stage_Songs = [mus_restarea, mus_cavewater, mus_jungle, mus_wetforest, mus_cavewater];
var Dot_Locations = [ // original name: De[]
    [9  ,24,0,1 ,0 ], // Town
    [4 , 23,0,2 ,0 ], // Opening Cave
    [11 ,21,0,3 ,0 ], // Jade Tropics
    [16 ,16,0,4 ,0 ], // Sage Grove
    [20 ,15,0,0 ,0 ]  // Moss Hovel
];
    //O=1     ,P=2            ,Q=3              ,R=4             ,S=5          ,T=6      ,Mf=7                 ,Nf=8                   ,Of=9                  ,Lf=10   ,Pf=11       ,Qf=12            ,Rf=13              ,Sf=14,
var Ground = 1;
var Ground_Left = 2;
var Ground_Middle = 3;
var Ground_Right = 4;
var Air_Water = 5;
var Water = 6;
var Ground_Left_Clump = 7;
var Ground_Middle_Clump = 8;
var Ground_Right_Clump = 9;
var Air = 10;
var Ceiling = 11;
var Ceiling_Left = 12;
var Ceiling_Middle = 13;
var Ceiling_Right = 14;
var Stage_Spawns = [
    [   //0 Town
        [0,0  ,Ground,0,0,Ground,0,0,Ground,0,0,Ground,0,0],
        [0,100,Ground,0]
    ],
    [   //1 Opening Cave
        [4,103],
        //[0,100,Ground_Left,4,1], // training ground
        [4,5  ,Ground     ,0,6 ,Ground_Middle,1,3],
        [4,5  ,Ground     ,0,6 ,Ground_Left  ,1,2,Ground_Middle,2,1],
        [4,12  ,Ground     ,2,8 ,Water,3,2],
        [4,12  ,Ground     ,2,8 , Ground_Middle,1,3, Water,3,3],
        [4,104, Air,4,1, Water,3,4]
    ],
    [   //2 Jade Tropics
        [0,1  ,Ground_Left,5,1 ,Ground_Middle,5,2,Ground ,5,3 ],
        [0,6  ,Ground     ,5,6 ,Ground_Middle,6,1],
        [0,6  ,Ground     ,5,6 ,Ground_Middle,6,3],
        [0,1  ,Ground     ,5,8 ,Ground,7,1],
        [0,6  ,Ground_Middle,6,2,Ground_Middle,7,2,Ground,6,3 ],
        [0,1  ,Ground_Left,5,3 ,Ground_Middle,7,2,Ground ,6,3],
        [0,105,Ground_Left,6,2 ,Ground_Right,6,2,Ground_Middle ,8,8]
    ],
    [   //3 Sage Grove
        [3,1  ,Air     ,9, 3, Ground_Middle, 10, 2],
        [3,1  ,Air     ,9, 4, Ground_Left  ,10,1,Ground_Middle,10,3,Ground_Right,10,1],
        [3,13  ,Air     ,9 ,7],
        [3,13  ,Ground_Middle,11, 3, Ground, 10, 4],
        [3,13  ,Ground_Right ,12,1,Air          ,9,7, Ground_Middle,10,5],
        [3,13  ,Air     ,9 ,5,Ground_Left  ,10,3,Ground_Middle,12,3,Ground,11,4],
        [3,0,Ground_Middle,12,2,Ground_Middle,13,1,Ground ,11,2]
    ],
    [   //4 Moss Hovel
        [3,14  ,Ceiling     ,15,3,Ground_Middle,14,1,Ground_Right ,14,1],
        [3,14  ,Ceiling     ,15,3,Ground_Left  ,16,1,Ground_Middle,14,1,Ground_Right,14,1],
        [3,14 ,Ceiling     ,15,3,Ground_Middle,16,3,Ground_Right ,14,3],
        [3,14  ,Ceiling     ,15,9,Ground_Middle ,17,1],
        [3,14  ,Ground     ,17,2,Ground_Left  ,14,3,Ground_Middle,14,3,Ground_Right,14,3],
        [3,14  ,Ground     ,17,3,Ceiling      ,15,6,Ground_Middle,16,3,Ground_Right,16,3],
        [3,102,Ceiling_Left,15,3,Ground_Middle_Clump,18,1,Ceiling_Right ,15,3]
    ],
    [   //5 Grassland 4
        [0,2  ,Ground     ,19,5 ],
        [0,2  ,Ground     ,19,10],
        [0,2  ,Ground     ,19,15],
        [0,2  ,Ground_Left,19,5 ,Ground_Middle,19,5,Ground_Right ,21,1 ],
        [0,2  ,Ground     ,19,10,Ground_Middle,20,3],
        [0,2  ,Ground     ,19,10,Ground_Left  ,21,1,Ground_Middle,20,2 ,Ground_Right,21,1],
        [0,2  ,Ground     ,19,5 ,Ground_Left  ,19,3,Ground_Middle,20,3 ,Ground_Right,21,3],
        [0,100,Ground_Left,19,2 ,Ground_Middle,19,6,Ground_Right ,22,12]
    ],
    [   //6 Grassland 5
        [0,2  ,Ground       ,23,6],
        [0,2  ,Ground       ,23,8 ,Ground_Middle,24,3],
        [0,2  ,Ground       ,24,6 ,Ground_Left  ,23,2,Ground_Middle,23,2,Ground_Right,23,2],
        [0,2  ,Ground_Middle,24,6 ,Ground_Right ,23,6],
        [0,2  ,Ground       ,23,9 ,Ground_Middle,25,1],
        [0,2  ,Ground       ,23,9 ,Ground_Left  ,25,1,Ground_Middle,25,1,Ground_Right,25,1],
        [0,2  ,Ground       ,23,12,Ground_Left  ,24,3,Ground_Middle,25,2,Ground_Right,25,2],
        [0,2  ,Ground       ,25,6 ,Ground_Left  ,24,3,Ground_Middle,24,3,Ground_Right,24,3],
        [0,100,Ground       ,26,3 ,Ground_Left  ,23,3,Ground_Middle,25,3,Ground_Right,24,3]
    ],
    [   //7 Grassland 6
        [0,2  ,Ground_Middle,27,5,Ground_Right ,28,1],
        [0,2  ,Ground       ,27,5,Ground_Left  ,28,1,Ground_Middle,28,1,Ground_Right,28,1],
        [0,2  ,Ground       ,27,5,Ground_Left  ,29,1,Ground_Middle,29,1,Ground_Right,29,1],
        [0,2  ,Ground       ,28,5,Ground_Left  ,29,1,Ground_Middle,29,1,Ground_Right,29,1],
        [0,2  ,Ground_Left  ,27,5,Ground_Middle,28,3,Ground_Right ,29,2],
        [0,2  ,Ground       ,27,9,Ground_Middle,27,9],
        [0,2  ,Ground       ,28,5,Ground_Middle,29,5],
        [0,100,Ground       ,28,5,Ground_Left  ,29,2,Ground_Middle,30,1,Ground_Right,29,2]
    ],
    [   //8 Grassland 7
        [0,2  ,Ground_Middle,32,1,Ground_Right ,32,2],
        [0,2  ,Ground       ,31,3,Ground_Left  ,32,1,Ground_Middle,32,2,Ground_Right,32,2],
        [0,2  ,Ground_Left  ,31,3,Ground_Middle,32,2,Ground_Right ,32,3],
        [0,2  ,Ground       ,31,5,Ground_Middle,33,2],
        [0,2  ,Ground       ,32,8,Ground_Middle,33,1,Ground_Right ,33,2],
        [0,2  ,Ground_Left  ,31,5,Ground_Middle,33,4,Ground_Right ,33,3],
        [0,2  ,Ground       ,31,8,Ground_Left  ,32,2,Ground_Middle,32,3,Ground_Right,33,4],
        [0,100,Ground_Left  ,32,3,Ground_Middle,33,3,Ground_Right ,34,1]
    ],
    [   //9 Castle Gate
        [1,1  ,Ground_Middle,35,10,Ground_Right ,36,1],
        [1,1  ,Ground_Left  ,35,1 ,Ground_Middle,35,15,Ground_Right ,36,1 ],
        [1,1  ,Ground       ,35,15,Ground_Left  ,37,1 ,Ground_Middle,37,1 ,Ground_Right,37,1],
        [1,1  ,Ground       ,35,15,Ground_Left  ,36,1 ,Ground_Middle,36,1 ,Ground_Right,36,1],
        [1,1  ,Ground       ,37,5 ,Ground_Left  ,36,2 ,Ground_Middle,35,10,Ground_Right,36,2],
        [1,100,Ground       ,36,3 ,Ground_Middle,38,1 ]
    ],
    [   //10 Castle
        [1,100,Ground      ,39,0],
        [1,100,Ground_Right,39,1]
    ],
    [   //11 Hill Country 1
        [2,3  ,Ground_Middle,41,1,Ground       ,42,3],
        [2,3  ,Ground_Middle,41,1,Ground_Middle,42,6],
        [2,3  ,Ground_Middle,41,1,Ground_Right ,43,6],
        [2,3  ,Ground       ,41,2,Ground       ,43,5],
        [2,3  ,Ground       ,41,3,Ground       ,42,9],
        [2,3  ,Ground       ,41,3,Ground       ,42,9,Ground,43,6],
        [2,100,Ground_Middle,44,1,Ground_Middle,43,6]
    ],
    [   //12 Hill Country 2
        [2,3  ,Ground_Middle,45,1,Ground       ,46,3],
        [2,3  ,Ground_Middle,45,1,Air_Water    ,46,5],
        [2,3  ,Ground_Middle,45,1,Ground       ,47,5],
        [2,3  ,Ground       ,45,2,Ground       ,47,9],
        [2,3  ,Air_Water    ,45,3,Air_Water    ,46,6],
        [2,3  ,Air_Water    ,45,2,Air_Water    ,46,6,Ground,47,5],
        [2,100,Ground_Right ,48,1,Ground_Middle,45,2]
    ],
    [   //13 Hill Country 3
        [2,3  ,Ground       ,49,1,Ground       ,50,1],
        [2,3  ,Ground       ,49,1,Ground       ,51,5],
        [2,3  ,Ground       ,50,1,Ground       ,51,5],
        [2,3  ,Ground       ,49,1,Ground       ,50,1,Ground       ,51,9],
        [2,100,Ground_Middle,52,1,Ground_Middle,49,2,Ground_Middle,50,2]
    ],
    [   //14 Lake
        [0,4  ,Water,53,10,Water ,55,5 ],
        [0,4  ,Water,53,20,Water ,55,5 ],
        [0,4  ,Water,53,15,Ground,54,10],
        [0,4  ,Water,55,8 ,Ground,54,10],
        [0,4  ,Water,53,30,Water ,55,5 ],
        [0,4  ,Water,53,30,Ground,54,5 ],
        [0,4  ,Water,53,20,Ground,54,5 ,Water,55,5],
        [0,101,Water,56,1 ,Ground,54,5 ,Water,55,5]
    ],
    [   //15 Forest 1
        [3,1  ,Ground       ,58,3 ],
        [3,1  ,Ground       ,58,4 ,Ground       ,57,5 ],
        [3,1  ,Ground       ,58,5 ,Ground       ,59,5 ],
        [3,1  ,Ground       ,58,5 ,Ground_Middle,57,5 ,Ground_Left,59,5],
        [3,1  ,Ground_Middle,57,8 ,Ground_Right ,59,8 ],
        [3,1  ,Ground       ,58,15,Ground       ,57,1 ,Ground     ,59,1],
        [3,1  ,Ground       ,58,6 ,Ground       ,57,6 ,Ground     ,59,6],
        [3,100,Ground_Middle,60,3 ,Ground       ,58,10]
    ],
    [   //16 Forest 2
        [3,1  ,Ground       ,62,3 ,Ground   ,61,2],
        [3,1  ,Ground       ,62,4 ,Ground   ,63,3],
        [3,1  ,Ground       ,62,5 ,Air_Water,61,5],
        [3,1  ,Ground       ,62,5 ,Air_Water,63,5],
        [3,1  ,Air_Water    ,61,5 ,Air_Water,63,5],
        [3,1  ,Ground       ,62,15,Air_Water,61,1,Air_Water,63,1],
        [3,1  ,Ground       ,62,6 ,Air_Water,61,6,Air_Water,63,6],
        [3,100,Ground_Middle,64,1 ,Ground   ,62,3,Air_Water,61,1,Air_Water,63,1]
    ],
    [   //17 Cavern 1
        [4,5  ,Water        ,69,1,Ground       ,65,5],
        [4,5  ,Water        ,69,1,Ground       ,65,5,Ground_Middle,66,5],
        [4,5  ,Water        ,69,1,Ground       ,65,5,Ground_Right ,67,5],
        [4,5  ,Water        ,69,1,Ground_Middle,66,5,Ground_Middle,65,5],
        [4,5  ,Water        ,69,1,Ground_Left  ,66,5,Ground_Middle,65,5,Ground_Right,67,5],
        [4,5  ,Water        ,69,1,Ground       ,66,6,Ground       ,65,6,Ground      ,67,6],
        [4,102,Ground_Middle,68,1]
    ],
    [   //18 Cavern 2
        [4,5  ,Water        ,74,1,Ground       ,70,8],
        [4,5  ,Water        ,74,1,Ground       ,70,8,Ground       ,71,5],
        [4,5  ,Water        ,74,1,Ground       ,70,8,Ground       ,72,5],
        [4,5  ,Water        ,74,1,Ground_Middle,71,8,Ground       ,72,5],
        [4,5  ,Water        ,74,1,Ground_Left  ,70,6,Ground_Middle,71,6,Ground_Right,72,6],
        [4,5  ,Water        ,74,1,Ground       ,70,8,Ground       ,71,8,Ground      ,72,8],
        [4,102,Ground_Middle,73,1,Ground       ,71,8]
    ],
    [   //19 Cavern 3
        [4,5  ,Water        ,79,1,Ground       ,75,5,Ground_Middle,76,1],
        [4,5  ,Water        ,79,1,Ground       ,75,5,Ground       ,77,2],
        [4,5  ,Water        ,79,1,Ground       ,75,5,Air_Water    ,76,5],
        [4,5  ,Water        ,79,1,Ground_Middle,75,4,Ground_Middle,76,4,Ground_Middle,77,2],
        [4,5  ,Water        ,79,1,Ground       ,75,5,Air_Water    ,76,5,Ground       ,77,3],
        [4,102,Ground_Middle,78,2,Ground_Right ,78,3,Ground_Middle,77,5,Ground_Right ,77,10]
    ],
    [   //20 Village
        [0,0  ,Ground,80,0],
        [0,100,Ground,80,0]
    ],
    [   //21 Seaside 1
        [0,6  ,Ground      ,80,10,Ground_Middle,83,2],
        [0,6  ,Ground      ,81,10,Ground       ,83,5],
        [0,6  ,Ground      ,80,12,Ground_Middle,83,3,Ground_Right ,82,1],
        [0,6  ,Ground      ,83,12,Ground       ,81,5,Ground_Middle,82,1],
        [0,6  ,Ground_Left ,80,8 ,Ground_Middle,81,8,Ground_Right ,83,8,Ground,82,5],
        [0,100,Ground_Right,84,1 ]
    ],
    [   //22 Seaside 2
        [0,6  ,Ground      ,85,15,Ground_Middle,86,1],
        [0,6  ,Ground      ,85,15,Ground_Middle,86,2,Air_Water,87,5 ,Air_Water,88,1],
        [0,6  ,Air_Water   ,87,20,Air_Water    ,88,2],
        [0,6  ,Ground      ,85,15,Ground_Middle,86,1,Air_Water,87,15,Air_Water,88,1],
        [0,6  ,Ground      ,85,10,Ground_Middle,86,4,Air_Water,87,5 ,Air_Water,88,4],
        [0,100,Ground_Right,89,1 ]
    ],
    [   //23 Seaside 3
        [0,6  ,Ground_Middle,92,1 ,Ground_Middle,92,2 ],
        [0,6  ,Ground_Middle,90,15,Ground_Middle,92,1 ],
        [0,6  ,Ground       ,91,15,Ground_Middle,91,5 ,Ground_Middle,92,1],
        [0,6  ,Air_Water    ,91,15,Ground_Middle,92,1 ],
        [0,6  ,Ground_Middle,90,15,Air_Water    ,91,10,Ground_Middle,92,1],
        [0,100,Ground_Right ,93,1]
    ],
    [   //24 Seaside 4
        [0,6  ,Ground_Middle,94,10,Ground_Right ,94,10,Ground_Right ,96,5],
        [0,6  ,Air_Water    ,95,20,Ground       ,96,5 ],
        [0,6  ,Ground       ,94,30,Air_Water    ,95,30,Ground       ,96,5],
        [0,6  ,Ground_Middle,94,30,Air_Water    ,95,30,Ground_Middle,96,5],
        [0,100,Ground_Middle,97,1 ,Ground_Middle,96,20]
    ],
    [   //25 Submarine 1
        [4,4  ,Water        ,99 ,10,Water       ,100,1 ],
        [4,4  ,Water        ,98 ,10,Water       ,99 ,10,Water,100,1],
        [4,4  ,Ground_Left  ,98 ,10,Ground_Right,98 ,10,Water,100,1],
        [4,4  ,Water        ,99 ,20,Water       ,100,5 ],
        [4,4  ,Ground_Middle,98 ,10,Water       ,98 ,10,Water,99 ,5,Water,100,2],
        [4,101,Water        ,101,1 ]
    ],
    [   //26 Submarine 2
        [4,4  ,Ground       ,102,20,Water        ,103,3],
        [4,4  ,Ground       ,102,30,Ground       ,104,3],
        [4,4  ,Ground_Middle,102,20,Water        ,103,3,Ground_Right,104,3],
        [4,4  ,Ground       ,102,20,Water        ,103,8,Ground_Right,104,5],
        [4,101,Ground       ,102,50,Ground_Middle,105,1]
    ],
    [   //27 Submarine 3
        [4,4  ,Water,106,10,Water,107,3 ],
        [4,4  ,Water,106,20,Water,108,2 ],
        [4,4  ,Water,106,20,Water,107,5 ,Water,108,1],
        [4,4  ,Water,106,15,Water,107,10,Water,108,1],
        [4,4  ,Water,106,35,Water,108,3 ],
        [4,101,Water,109,5 ]
    ],
    [   //28 Submarine 4
        [4,4  ,Water,111,10,Water,112,1],
        [4,4  ,Water,111,20,Water,112,1],
        [4,4  ,Water,110,30,Water,112,1],
        [4,4  ,Water,111,20,Water,112,2],
        [4,101,Water,113,1 ,Water,112,2,Water,111,10]
    ],
    [   //29 Submarine Shrine
        [1,101,Water,114,0],
        [1,101,Water,114,1]
    ],
    [   //30 Mist Grove 1
        [3,2  ,Ground       ,116,5 ,Air_Water    ,118,3 ],
        [3,2  ,Ground       ,116,12,Ground       ,117,12],
        [3,2  ,Ground_Middle,116,10,Ground       ,116,5 ,Air_Water,118,5],
        [3,2  ,Ground       ,117,12,Air_Water    ,118,8 ],
        [3,2  ,Ground       ,116,10,Ground_Middle,117,10,Air_Water,118,5],
        [3,100,Ground_Middle,119,1 ,Air_Water    ,118,3 ]
    ],
    [   //31 Mist Grove 2
        [3,2  ,Ground_Right ,122,1,Ground,120,5 ],
        [3,2  ,Ground_Right ,122,3,Ground,120,10],
        [3,2  ,Ground_Right ,122,5,Ground,121,10,Ground_Right,120,10],
        [3,100,Ground_Middle,123,1,Ground,120,10]
    ],
    [   //32 Mist Grove 3
        [3,3  ,Ground       ,124,20],
        [3,3  ,Ground       ,125,20],
        [3,3  ,Ground       ,126,20],
        [3,2  ,Ground       ,124,10,Ground,125,5 ,Ground       ,126,5],
        [3,2  ,Ground_Right ,124,10,Ground,125,10,Ground_Middle,126,5],
        [3,3  ,Ground_Middle,124,30],
        [3,100,Ground_Middle,127,1 ]
    ],
    [   //33 ???
        [3,1  ,Ground,128,10],
        [3,1  ,Ground,128,50],
        [3,100,Ground,128,99,Ground,129,1]
    ],
    [   //34 Desert 1
        [5,7  ,Ground       ,130,10,Ground       ,132,1 ],
        [5,7  ,Ground       ,130,15,Ground       ,131,15,Ground_Right,132,2],
        [5,7  ,Ground       ,131,30,Ground       ,132,2 ],
        [5,7  ,Ground_Middle,130,30,Ground_Right ,132,3 ],
        [5,7  ,Ground       ,130,20,Ground_Middle,131,20,Ground      ,132,3],
        [5,100,Ground_Middle,133,1 ,Ground_Right ,132,5 ]
    ],
    [   //35 Desert 2
        [5,7  ,Ground       ,134,10,Air_Water    ,135,1 ],
        [5,7  ,Ground       ,134,30,Ground_Middle,136,5 ,Air_Water,135,3],
        [5,7  ,Air_Water    ,134,10,Ground       ,136,10,Air_Water,135,2],
        [5,7  ,Ground_Middle,134,10,Ground_Middle,136,5 ,Air_Water,135,4],
        [5,7  ,Air_Water    ,134,30,Ground_Middle,136,5 ,Air_Water,135,3],
        [5,100,Ground_Middle,137,1 ,Ground_Middle,135,2 ]
    ],
    [   //36 Desert 3
        [5,7  ,Ground_Left  ,138,5 ,Ground_Middle,139,5 ,Ground_Right,140,1 ],
        [5,7  ,Ground_Middle,139,10,Ground_Right ,138,10,Ground      ,140,2 ],
        [5,7  ,Ground       ,138,25,Ground_Middle,140,3 ],
        [5,7  ,Ground       ,139,25,Ground_Middle,140,3 ],
        [5,7  ,Ground_Left  ,138,15,Ground_Middle,140,3 ,Ground_Right,139,15],
        [5,7  ,Ground_Middle,139,20,Ground       ,140,5 ],
        [5,100,Ground       ,141,5 ,Ground       ,138,30]
    ],
    [   //37 Desert 4
        [5,7  ,Ground       ,143,10,Ground_Middle,142,3 ],
        [5,7  ,Ground       ,143,15,Ground_Middle,142,3 ,Ground_Middle,144,3 ],
        [5,7  ,Ground_Middle,143,1 ,Air_Water    ,142,20,Ground_Middle,144,5 ],
        [5,7  ,Ground_Middle,143,1 ,Air_Water    ,142,10,Ground       ,144,15],
        [5,7  ,Ground_Left  ,143,10,Air_Water    ,142,10,Ground_Middle,144,10],
        [5,100,Ground_Middle,145,1 ,Ground       ,143,8 ]
    ],
    [   //38 Desert 5
        [5,7  ,Ground_Middle,146,1 ,Ground_Right ,147,1 ,Water,148,1 ],
        [5,7  ,Ground       ,146,3 ,Water        ,148,2 ],
        [5,7  ,Ground       ,147,3 ,Water        ,148,3 ],
        [5,7  ,Ground       ,146,2 ,Ground       ,147,2 ,Water,148,3 ],
        [5,7  ,Ground_Middle,146,1 ,Ground_Middle,147,1 ,Water,148,30],
        [5,100,Ground_Middle,149,25,Ground_Right ,149,25]
    ],
    [   //39 Oasis
        [5,4  ,Water      ,150,10,Ground_Middle,151,10],
        [5,4  ,Water      ,151,10,Ground_Middle,152,10],
        [5,4  ,Water      ,152,10,Ground_Middle,150,10],
        [5,4  ,Ground_Left,150,10,Ground_Middle,151,10,Ground_Right,152,10],
        [5,4  ,Water      ,150,10,Water        ,151,10,Water       ,152,10],
        [5,101,Water      ,153,1 ]
    ],
    [   //40 Desert 6
        [5,7  ,Ground       ,154,3 ,Air_Water    ,155,2 ,Ground_Right ,156,1],
        [5,7  ,Ground       ,154,15,Ground_Middle,154,10,Ground_Middle,156,1],
        [5,7  ,Air_Water    ,155,20,Ground_Middle,156,1 ],
        [5,7  ,Ground       ,154,15,Air_Water    ,155,15,Ground       ,156,2],
        [5,7  ,Ground_Left  ,154,15,Air_Water    ,155,15,Ground       ,156,2],
        [5,100,Ground_Middle,157,1 ]
    ],
    [   //41 Desert 7
        [5,7  ,Ground_Left  ,158,10,Ground_Middle,160,1 ,Ground_Right,158,10],
        [5,7  ,Air_Water    ,159,20,Ground_Middle,160,2 ],
        [5,7  ,Ground_Left  ,158,10,Air_Water    ,159,20,Ground      ,160,3 ],
        [5,7  ,Ground_Middle,159,20,Ground_Middle,160,5 ],
        [5,100,Ground_Middle,161,1 ,Ground       ,160,5 ]
    ],
    [   //42 Pyramid
        [5,102,Ground_Middle,162,0],
        [5,102,Ground_Middle,162,1]
    ],
    [   //43 Desert 8
        [5,2  ,Ground_Left  ,164,10,Ground_Right,165,1],
        [5,2  ,Ground       ,165,2 ],
        [5,2  ,Ground       ,164,30,Ground      ,166,3],
        [5,2  ,Ground_Left  ,164,10,Ground_Right,165,1,Ground,166,3],
        [5,100,Ground_Middle,167,1 ,Ground_Right,165,1]
    ],
    [   //44 Beach 1
        [5,8  ,Ground       ,168,15,Air_Water,169,3],
        [5,8  ,Ground       ,168,20,Water    ,170,1],
        [5,8  ,Ground       ,168,20,Air_Water,169,5,Water,170,2],
        [5,8  ,Air_Water    ,169,30,Water    ,170,2],
        [5,8  ,Ground       ,168,10,Air_Water,169,5,Water,170,3],
        [5,101,Ground_Middle,171,1 ,Water    ,170,3]
    ],
    [   //45 Beach 2
        [5,8  ,Air_Water,172,5 ,Air_Water,173,5 ,Air_Water,174,1 ],
        [5,8  ,Air_Water,172,20,Air_Water,174,3 ],
        [5,8  ,Air_Water,173,20,Air_Water,174,3 ],
        [5,8  ,Air_Water,172,10,Air_Water,173,10,Air_Water,174,3 ],
        [5,8  ,Air_Water,173,3 ,Air_Water,173,3 ,Air_Water,174,15],
        [5,101,Air_Water,175,10]
    ],
    [   //46 Beach 3
        [5,8  ,Water        ,177,10,Ground,178,10],
        [5,8  ,Ground_Middle,176,1 ,Water ,177,10],
        [5,8  ,Ground_Middle,176,1 ,Ground,178,10],
        [5,8  ,Ground_Middle,176,1 ,Water ,177,10,Ground,178,10],
        [5,101,Ground_Middle,176,2 ,Water ,179,1]
    ],
    [   //47 Junk Shop
        [0,0  ,Ground,180,0],
        [0,100,Ground,180,0]
    ],
    [   //48 Cavern 4
        [4,9  ,Ground       ,180,20,Water ,184,1 ],
        [4,9  ,Ground       ,180,30,Ground,181,3 ,Water ,184,2],
        [4,9  ,Ground       ,180,40,Ground,182,3 ,Water ,184,3],
        [4,9  ,Ground       ,180,50,Ground,181,3 ,Ground,182,3],
        [4,9  ,Ground       ,180,60,Water ,184,10],
        [4,103,Ground_Middle,183,1 ,Ground,180,20]
    ],
    [   //49 Cavern 6
        [4,9  ,Ground      ,185,30,Ground_Middle,186,3 ],
        [4,9  ,Ground      ,185,40,Ground       ,186,10,Ground_Right ,187,1],
        [4,9  ,Ground      ,185,40,Ground_Middle,186,20,Ground_Middle,187,1],
        [4,9  ,Ground      ,185,70,Ground_Middle,187,1 ,Ground_Right ,187,1],
        [4,9  ,Ground      ,185,40,Water        ,189,1 ],
        [4,103,Ground_Right,188,1 ,Ground       ,186,5 ]
    ],
    [   //50 Cavern 6
        [4,9  ,Ground       ,190,80,Water,194,1],
        [4,9  ,Ground       ,191,80,Water,194,1],
        [4,9  ,Ground       ,192,80,Water,194,1],
        [4,103,Ground_Middle,193,1 ]
    ],
    [   //51 Snowfield 1
        [7,3  ,Ground_Right ,195,30,Ground_Middle,196,1],
        [7,3  ,Ground_Right ,195,30,Ground_Middle,197,3],
        [7,3  ,Ground       ,195,50,Ground_Middle,196,3,Ground_Middle,197,3],
        [7,3  ,Ground_Right ,195,50,Ground_Middle,196,3,Ground_Middle,197,3],
        [7,100,Ground_Middle,198,1 ,Ground_Middle,197,3]
    ],
    [   //52 Snowfield 2
        [7,3  ,Ground       ,199,30,Ground_Middle,200,2 ],
        [7,3  ,Ground       ,199,40,Ground_Middle,201,2 ],
        [7,3  ,Ground_Middle,200,20,Ground_Middle,201,2 ],
        [7,3  ,Ground       ,199,20,Ground_Middle,200,10,Ground_Right,201,2],
        [7,3  ,Ground       ,201,5 ],
        [7,100,Ground_Middle,202,1 ,Ground       ,199,90]
    ],
    [   //53 Mountain 1
        [3,10 ,Ground       ,203,30,Ground_Middle,205,1 ],
        [3,10 ,Ground       ,204,30,Ground_Middle,205,1 ],
        [3,10 ,Ground       ,205,5 ],
        [3,10 ,Ground       ,203,20,Ground_Middle,204,20,Ground      ,205,1],
        [3,100,Ground_Middle,206,1 ,Ground_Left  ,203,5 ,Ground_Right,204,5]
    ],
    [   //54 Mountain 2
        [4,10 ,Air_Water    ,207,30,Ground_Right ,208,30],
        [4,10 ,Air_Water    ,207,50,Ground_Middle,208,10,Ground_Right,209,1 ],
        [4,10 ,Air_Water    ,207,10,Ground       ,208,50,Ground_Right,209,1 ],
        [4,10 ,Air_Water    ,207,10,Ground       ,208,10,Ground      ,209,3 ],
        [4,100,Ground_Middle,210,1 ,Air_Water    ,207,10,Ground      ,208,10]
    ],
    [   //55 Mountaintop
        [0,1  ,Ground_Middle,4  ,1,Ground_Left  ,8  ,1,Air_Water    ,13 ,1,Air_Water    ,18 ,1,Ground_Left,22 ,1,Ground_Middle,26 ,1,Ground_Middle,30 ,1,Ground_Right ,34 ,1],
        [2,10 ,Ground_Middle,44 ,1,Air_Water    ,48 ,1,Ground_Middle,52 ,1,Ground_Middle,38 ,1],
        [3,10 ,Ground_Middle,60 ,1,Ground_Middle,64 ,1,Ground_Right ,68 ,1,Air_Water    ,73 ,1,Ground_Left,78 ,1],
        [0,8  ,Ground_Middle,84 ,1,Ground_Middle,89 ,1,Air_Water    ,93 ,1,Ground_Middle,97 ,1],
        [4,101,Water        ,56 ,1,Water        ,101,1,Ground_Middle,105,1,Water        ,109,1,Water      ,113,1,Water        ,153,1],
        [3,1  ,Ground_Left  ,119,1,Ground_Right ,123,1,Ground_Middle,127,1],
        [5,1  ,Ground_Middle,133,1,Ground_Middle,137,1,Ground       ,141,1,Ground_Right ,145,1,Ground_Left,149,1,Ground_Right ,157,1,Ground_Left  ,161,1,Ground_Middle,167,1],
        [5,8  ,Ground_Middle,171,1,Air_Water    ,175,1,Water        ,179,1],
        [4,103,Air_Water    ,183,1,Ground_Middle,188,1,Ground_Middle,193,1],
        [1,100,Air_Water    ,211,1,Air_Water    ,212,1,Air_Water    ,213,1,Air_Water    ,214,1]
    ],
    [   //56 Snowfield 3
        [7,3  ,Ground_Left  ,215,3 ,Ground_Right,216,3 ,Ground_Middle,217,3],
        [7,3  ,Air_Water    ,215,80,Ground      ,217,1 ],
        [7,3  ,Ground       ,216,80,Ground      ,217,1 ],
        [7,3  ,Air_Water    ,215,40,Ground      ,216,40,Ground       ,217,2],
        [7,100,Ground_Middle,218,1 ,Ground_Right,217,1 ]
    ],
    [   //57 Snowfield 4
        [7,3  ,Ground_Left  ,219,1,Ground_Middle,220,1,Ground_Right ,219,1],
        [7,3  ,Ground_Left  ,221,1,Ground_Middle,220,1,Ground_Right ,221,1],
        [7,3  ,Ground       ,221,3,Ground_Middle,219,1],
        [7,3  ,Ground_Middle,219,1,Ground       ,220,3,Ground_Middle,221,1],
        [7,100,Ground_Left  ,221,1,Ground_Middle,220,1,Ground_Right ,219,1,Ground_Middle,222,1]
    ],
    [   //58 Snowfield 5
        [7,1  ,Air_Water    ,223,50,Ground_Middle,225,1 ],
        [7,1  ,Air_Water    ,224,50,Ground_Middle,225,1 ],
        [7,1  ,Air_Water    ,223,20,Air_Water    ,224,20,Ground,225,2],
        [7,100,Ground_Middle,226,1 ]
    ],
    [   //59 Snowfield 6
        [7,1  ,Ground_Middle,227,30],
        [7,1  ,Ground_Middle,229,15,Ground_Right ,227,30],
        [7,1  ,Ground       ,228,50],
        [7,1  ,Ground       ,228,30,Ground_Middle,227,30],
        [7,1  ,Ground       ,228,10,Ground_Middle,229,30,Ground_Right,227,10],
        [7,100,Ground_Right ,230,30]
    ],
    [   //60 Snowfield 7
        [7,1  ,Ground_Middle,232,1,Ground,231,5 ],
        [7,1  ,Ground_Middle,232,1,Ground,231,50],
        [7,1  ,Ground_Middle,232,2,Ground,231,15],
        [7,100,Ground_Middle,234,1,Ground,233,99]
    ],
    [   //61 Snowfield 8
        [7,1  ,Ground       ,235,50,Ground_Middle,237,1 ],
        [7,1  ,Ground       ,236,50,Ground_Middle,237,1 ],
        [7,1  ,Ground_Left  ,237,1 ,Ground_Middle,237,1 ,Ground_Right,237,1],
        [7,1  ,Ground_Middle,235,30,Ground_Middle,236,30,Ground_Right,237,1],
        [7,100,Ground_Left  ,238,1 ,Ground_Middle,238,1 ,Ground_Right,238,1]
    ],
    [   //62 Frozen Lake
        [8,100,Air_Water    ,239,5,Ground       ,241,3],
        [8,100,Ground       ,240,2,Ground       ,241,5],
        [8,100,Air_Water    ,239,5,Ground_Middle,240,5],
        [8,100,Air_Water    ,239,5,Ground_Right ,240,1,Ground,241,5],
        [8,100,Ground_Middle,242,1]
    ],
    [   //63 Ice Castle
        [7,102,Ground_Middle,243,0],
        [7,102,Ground_Middle,243,1]
    ],
    [   //64 Snowfield 9
        [7,6  ,Ground       ,247,30],
        [7,6  ,Ground_Left  ,245,20,Ground_Middle,247,20],
        [7,6  ,Ground       ,245,20,Air_Water    ,246,30],
        [7,6  ,Ground       ,245,20,Air_Water    ,246,20,Ground_Right,247,20],
        [7,100,Ground_Middle,248,1 ]
    ],
    [   //65 Beach 4
        [7,8  ,Water ,249,30,Ground_Right ,251,1 ],
        [7,8  ,Water ,249,50,Ground_Right ,251,3 ],
        [7,8  ,Ground,250,40,Ground_Right ,251,1 ],
        [7,8  ,Water ,249,30,Ground_Middle,250,30,Ground_Right,251,2],
        [7,101,Water ,252,1 ,Water        ,251,3 ]
    ],
    [   //66 Forest 3
        [9,1  ,Ground_Middle,253,30,Air_Water,255,1 ],
        [9,1  ,Ground       ,254,30,Air_Water,255,1 ],
        [9,1  ,Ground_Middle,253,20,Ground   ,254,20,Air_Water,255,1],
        [9,1  ,Ground_Left  ,253,10,Ground   ,254,10,Air_Water,255,3],
        [9,100,Air_Water    ,256,1 ,Air_Water,255,1 ]
    ],
    [   //67 Forest 4
        [9,1  ,Ground_Middle,258,1 ],
        [9,1  ,Ground       ,258,10],
        [9,100,Ground_Middle,259,1 ]
    ],
    [   //68 Forest 5
        [9,1  ,Ground       ,262,30,Ground_Middle,260,30],
        [9,1  ,Ground       ,260,30,Ground_Middle,261,30],
        [9,1  ,Ground       ,262,30,Ground_Middle,261,30],
        [9,100,Ground_Middle,263,1 ,Ground_Right ,260,2 ,Ground_Right,261,2,Ground_Right,262,2]
    ],
    [   //69 Forest 6
        [9,1  ,Ground_Middle,264,1,Air_Water   ,265,80],
        [9,1  ,Ground_Middle,264,1,Ground      ,266,80],
        [9,1  ,Ground_Middle,264,1,Air_Water   ,265,40,Ground,266,40],
        [9,100,Ground_Middle,267,1,Ground_Right,264,1 ]
    ],
    [   //70 Forget Tree
        [9,0  ,Ground,268,0],
        [9,100,Ground,268,0]
    ],
    [   //71 !!!
        [4,101,Air_Water,268,30],
        [4,101,Air_Water,268,60],
        [4,101,Air_Water,268,99,Air_Water,269,1]
    ],
    [   //72 Hell 1
        [10,1  ,Ground_Middle,270,20,Ground_Right ,271,1 ],
        [10,1  ,Ground       ,270,40,Ground_Middle,271,1 ,Ground_Right,271,1],
        [10,1  ,Ground       ,270,40,Ground_Middle,271,1 ,Ground_Right,272,1],
        [10,1  ,Ground       ,270,40,Ground_Middle,272,1 ,Ground_Right,272,1],
        [10,1  ,Ground       ,270,10,Ground       ,271,3 ,Ground      ,272,3],
        [10,1  ,Ground_Middle,270,60],
        [10,100,Ground_Middle,273,1 ,Ground       ,270,30]
    ],
    [   //73 Hell 2
        [10,11 ,Air_Water    ,274,50,Ground_Middle,276,1],
        [10,11 ,Air_Water    ,274,50,Ground_Middle,275,1],
        [10,11 ,Ground       ,274,50,Ground_Right ,276,1,Ground_Middle,275,1],
        [10,11 ,Ground       ,274,50,Ground       ,275,2],
        [10,11 ,Ground       ,274,50,Ground_Left  ,276,1,Ground_Right ,276,1],
        [10,100,Ground_Middle,274,50,Ground_Middle,277,1]
    ],
    [   //74 Hell 3
        [10,11 ,Ground_Middle,279,1,Ground_Left ,278,10,Ground_Right ,280,10],
        [10,11 ,Ground       ,279,2,Ground      ,278,40],
        [10,11 ,Ground       ,279,2,Ground      ,280,60],
        [10,11 ,Ground       ,279,2,Ground      ,278,30,Ground       ,280,20],
        [10,100,Ground_Left  ,279,1,Ground_Right,279,1 ,Ground_Middle,281,1 ]
    ],
    [   //75 Hell 4
        [10,10 ,Ground_Middle,282,10,Ground_Right ,282,10],
        [10,10 ,Ground       ,283,30,Ground_Middle,282,10],
        [10,10 ,Ground       ,282,30,Ground       ,284,5 ],
        [10,10 ,Ground       ,283,30,Ground       ,284,5 ],
        [10,10 ,Ground       ,284,10,Ground_Middle,282,5 ,Ground_Right ,283,5],
        [10,100,Ground_Middle,285,1 ,Ground_Left  ,282,3 ,Ground_Middle,284,3,Ground_Right,283,3]
    ],
    [   //76 Hell 5
        [10,1  ,Ground_Left,286,1,Ground_Middle,286,1,Ground_Right,286,2],
        [10,1  ,Ground_Left,287,1,Ground_Middle,287,1,Ground_Right,287,2],
        [10,1  ,Ground_Left,288,1,Ground_Middle,288,1,Ground_Right,288,2],
        [10,1  ,Ground     ,286,3,Ground       ,287,3],
        [10,1  ,Ground     ,287,3,Ground       ,288,2],
        [10,1  ,Ground     ,288,3,Ground       ,286,3],
        [10,100,Ground_Left,286,1,Ground_Middle,287,1,Ground_Right,288,1,Ground,289,5]
    ],
    [   //77 Island
        [0,0  ,Ground,290,0],
        [0,100,Ground,290,0]
    ],
    [   //78 Hell 6
        [10,1  ,Air_Water    ,290,60,Ground_Middle,291,5],
        [10,1  ,Air_Water    ,290,60,Ground_Middle,292,2],
        [10,1  ,Air_Water    ,291,60,Ground_Middle,292,2],
        [10,1  ,Air_Water    ,292,10,Air_Water    ,290,2,Air_Water,291,2],
        [10,100,Ground_Middle,293,1 ,Air_Water    ,290,1,Air_Water,291,1,Air_Water,292,1]
    ],
    [   //79 Inferno 1
        [11,10 ,Ground       ,294,30,Ground_Middle,296,1 ],
        [11,10 ,Ground       ,295,30,Ground_Middle,296,1 ],
        [11,10 ,Ground_Middle,296,1 ,Ground_Right ,296,1 ],
        [11,10 ,Ground_Middle,294,50,Ground_Right ,295,50],
        [11,10 ,Ground_Left  ,294,20,Ground_Middle,295,20,Ground_Right,296,1],
        [11,100,Ground_Middle,297,1 ]
    ],
    [   //80 Inferno 2
        [11,1  ,Ground_Middle_Clump,298,100],
        [11,1  ,Ground_Middle_Clump,299,100],
        [11,1  ,Ground_Middle_Clump,300,100],
        [11,100,Ground_Left_Clump  ,298,20 ,Ground_Middle_Clump,300,20,Ground_Right_Clump,299,20,Ground_Right,301,1]
    ],
    [   //81 Inferno 3
        [11,1  ,Ground_Right ,302,20,Ground_Middle_Clump,302,20],
        [11,1  ,Ground       ,303,40],
        [11,1  ,Ground_Right ,304,20,Ground_Middle_Clump,304,20],
        [11,1  ,Ground_Left  ,302,15,Ground_Middle      ,304,15,Ground_Right,303,15],
        [11,100,Ground_Middle,305,1 ]
    ],
    [   //82 Blood Lake
        [11,4  ,Water        ,306,10,Ground_Middle,307,5 ],
        [11,4  ,Water        ,306,30,Air          ,308,10],
        [11,4  ,Ground       ,307,20,Air          ,308,10],
        [11,4  ,Water        ,306,10,Ground_Middle,307,5 ,Air,308,40],
        [11,4  ,Water        ,306,30,Ground_Middle,307,10,Air,308,5 ],
        [11,101,Ground_Middle,309,1 ,Air          ,308,10]
    ],
    [   //83 Cavern 7
        [11,9  ,Ground_Middle,310,10,Ceiling_Middle,311,10,Water        ,314,1],
        [11,9  ,Ground       ,310,30,Ceiling_Middle,311,10,Ground_Middle,312,1,Water,314,1],
        [11,9  ,Ground_Middle,310,10,Ceiling       ,311,30,Ground_Middle,312,1,Water,314,1],
        [11,9  ,Ground       ,310,30,Ceiling       ,311,30,Ground       ,312,2,Water,314,1],
        [11,103,Ground       ,312,2 ,Ground_Middle ,313,1 ]
    ],
    [   //84 Cavern 8
        [11,9  ,Ground_Middle,315,10,Ceiling_Middle,316,10,Water        ,319,1],
        [11,9  ,Ground       ,315,30,Ceiling_Middle,316,10,Ground_Middle,317,1,Water,319,1],
        [11,9  ,Ground_Middle,315,20,Ceiling       ,316,20,Ground_Middle,317,1,Water,319,1],
        [11,9  ,Ground       ,315,40,Ceiling       ,316,15,Ground       ,317,2,Water,319,1],
        [11,103,Ground_Middle,318,1 ]
    ],
    [   //85 Hell 7
        [10,1  ,Ground_Middle,320,50,Ground_Right,320,50],
        [10,1  ,Ground_Right ,321,5 ,Ground      ,320,20],
        [10,1  ,Air_Water    ,322,3 ,Ground      ,320,20],
        [10,1  ,Air_Water    ,322,2 ,Air_Water   ,321,3 ,Ground       ,320,20],
        [10,100,Air_Water    ,323,1 ,Air_Water   ,322,1 ,Ground_Middle,321,1 ,Ground_Middle,320,1]
    ],
    [   //86 Hell 8
        [10,11 ,Ground,324,10],
        [10,11 ,Ground,324,50,Air_Water   ,325,1],
        [10,11 ,Ground,324,50,Air_Water   ,326,1],
        [10,11 ,Ground,324,50,Air_Water   ,325,1,Air_Water,326,1],
        [10,100,Ground,324,50,Ground_Right,327,1]
    ],
    [   //87 Hell Gate
        [1,1  ,Ground_Middle,328,10,Ground_Right ,329,1 ],
        [1,1  ,Ground_Left  ,328,1 ,Ground_Middle,328,15,Ground_Right ,329,1 ],
        [1,1  ,Ground       ,328,15,Ground_Left  ,330,1 ,Ground_Middle,330,1 ,Ground_Right,330,1],
        [1,1  ,Ground       ,328,15,Ground_Left  ,329,1 ,Ground_Middle,329,1 ,Ground_Right,329,1],
        [1,1  ,Ground       ,330,5 ,Ground_Left  ,329,2 ,Ground_Middle,328,10,Ground_Right,329,2],
        [1,100,Ground_Middle,331,1 ,Ground       ,329,3 ]
    ],
    [   //88 Hell Castle
        [12,100,Ground_Middle,332,0],
        [12,100,Ground_Middle,332,1]
    ],
    [   //89 Volcano
        [7 ,100,Ground_Middle,198,1  ,Ground_Middle,202,1,Ground_Middle,218,1,Ground_Middle,222,1],
        [7 ,100,Ground_Middle,234,1  ,Ground_Middle,238,1,Ground_Middle,226,1,Ground_Right ,230,1],
        [4 ,100,Ground_Middle,206,1  ,Air_Water    ,210,1],
        [8 ,100,Ground_Middle,242,1  ,Ground_Middle,248,1],
        [9 ,100,Ground_Middle,267,1  ,Air_Water    ,256,1],
        [9 ,100,Ground_Middle,259,1  ,Ground_Middle,263,1],
        [10,100,Ground_Middle,273,1  ,Ground_Right ,277,1,Ground_Middle,281,1],
        [10,100,Ground_Middle,285,1  ,Ground       ,289,1,Ground_Middle,293,1],
        [11,100,Ground_Middle,297,1  ,Ground_Right ,301,1,Ground_Middle,305,1],
        [11,101,Water        ,252,1  ,Water        ,309,1],
        [11,103,Ground_Middle,313,1  ,Ground_Middle,318,1],
        [1 ,100,Ground_Left  ,323,1  ,Ground_Middle,327,1,Ground_Right ,331,1],
        [12,100,Air_Water    ,338,100]
    ],
    []
];

var Projectiles = new SR_Projectile;
function SR_Projectile(){ // original name: ih()
    this.PJ_index = 0;                                        // original name: .index
    this.PJ_class_ID = new Int32Array(DIRE_Proj_Limit);            // original name: .F
    this.PJ_body = Array(DIRE_Proj_Limit);                         // original name: .a
    this.PJ_velocity = Array(DIRE_Proj_Limit);                        // original name: .k
    this.PJ_d = new Int32Array(DIRE_Proj_Limit);                   // original name: .d
    this.PJ_orient = new Int32Array(DIRE_Proj_Limit);              // original name: .Ya
    this.PJ_img = new Int32Array(DIRE_Proj_Limit);                 // original name: .N
    this.PJ_color = new Int32Array(DIRE_Proj_Limit);               // original name: .G
    this.PJ_transp = new Int32Array(DIRE_Proj_Limit);              // original name: .Wa
    this.PJ_width = new Int32Array(DIRE_Proj_Limit);               // original name: .Ua
    this.PJ_height = new Int32Array(DIRE_Proj_Limit);              // original name: .Va
    this.PJ_box_width = new Int32Array(DIRE_Proj_Limit);           // original name: .ja
    this.PJ_box_height = new Int32Array(DIRE_Proj_Limit);          // original name: .ka
    this.PJ_appear_delay = new Int32Array(DIRE_Proj_Limit);        // original name: .ha
    this.PJ_solid_delay = new Int32Array(DIRE_Proj_Limit);         // original name: .oa
    this.PJ_lifespan = new Int32Array(DIRE_Proj_Limit);            // original name: .count
    this.PJ_disp_eff = new Int32Array(DIRE_Proj_Limit);            // original name: .ia
    this.PJ_gravity = new Int32Array(DIRE_Proj_Limit);             // original name: .e
    this.PJ_accel = new Int32Array(DIRE_Proj_Limit);               // original name: .i
    this.PJ_pierce = new Int32Array(DIRE_Proj_Limit);              // original name: .ya
    this.PJ_bounce = new Int32Array(DIRE_Proj_Limit);              // original name: .Y
    this.PJ_homing = new Int32Array(DIRE_Proj_Limit);              // original name: .ra
    this.PJ_knockback = new Int32Array(DIRE_Proj_Limit);           // original name: .la
    this.PJ_splash = new Int32Array(DIRE_Proj_Limit);              // original name: .ga
    this.PJ_AT_min = new Int32Array(DIRE_Proj_Limit);              // original name: .ea
    this.PJ_AT_max = new Int32Array(DIRE_Proj_Limit);              // original name: .fa
    this.PJ_res_type = new Int32Array(DIRE_Proj_Limit);            // original name: .U
    this.PJ_res_type_param = new Int32Array(DIRE_Proj_Limit);      // original name: .V
    this.PJ_res_mode = new Int32Array(DIRE_Proj_Limit);            // original name: .sub
    this.PJ_res_orient = new Int32Array(DIRE_Proj_Limit);          // original name: .Ha
    this.PJ_res_img = new Int32Array(DIRE_Proj_Limit);             // original name: .Sa
    this.PJ_res_color = new Int32Array(DIRE_Proj_Limit);           // original name: .Ea
    this.PJ_res_transp = new Int32Array(DIRE_Proj_Limit);          // original name: .za
    this.PJ_res_width = new Int32Array(DIRE_Proj_Limit);           // original name: .Pa
    this.PJ_res_height = new Int32Array(DIRE_Proj_Limit);          // original name: .Qa
    this.PJ_res_box_width = new Int32Array(DIRE_Proj_Limit);       // original name: .La
    this.PJ_res_box_height = new Int32Array(DIRE_Proj_Limit);      // original name: .Ma
    this.PJ_res_appear_delay = new Int32Array(DIRE_Proj_Limit);    // original name: .Ga
    this.PJ_res_solid_delay = new Int32Array(DIRE_Proj_Limit);     // original name: .Na
    this.PJ_res_lifespan = new Int32Array(DIRE_Proj_Limit);        // original name: .Fa
    this.PJ_res_fade_tick = new Int32Array(DIRE_Proj_Limit);       // original name: .Ia
    this.PJ_res_grav = new Int32Array(DIRE_Proj_Limit);            // original name: .Ja
    this.PJ_res_accel = new Int32Array(DIRE_Proj_Limit);           // original name: .Ta
    this.PJ_res_pierce = new Int32Array(DIRE_Proj_Limit);          // original name: .Oa
    this.PJ_res_bounce = new Int32Array(DIRE_Proj_Limit);          // original name: .Ka
    this.PJ_res_splash = new Int32Array(DIRE_Proj_Limit);          // original name: .Ra
    this.PJ_res_AT_min = new Int32Array(DIRE_Proj_Limit);          // original name: .Aa
    this.PJ_res_AT_max = new Int32Array(DIRE_Proj_Limit);          // original name: .Ba
    this.PJ_res_bullet = new Int32Array(DIRE_Proj_Limit);          // original name: .A
    this.PJ_res_base_type = new Int32Array(DIRE_Proj_Limit);       // original name: .Ca
    this.PJ_res_base_type_param = new Int32Array(DIRE_Proj_Limit); // original name: .Da
    for (var i=0; i<DIRE_Proj_Limit; i++){
        this.PJ_velocity[i] = new Vector2D;
        this.PJ_body[i] = new Vector2D;
    }
}

//aa = SR_Projectile.prototype;
SR_Projectile.prototype.PJreset = function(){ // aa.j
    this.PJ_index = 0;
};

// tracks projectiles/hits original name: aa.add
SR_Projectile.prototype.PJadd = function(class_ID,x_pos,y_pos,Xspd,Yspd,orient,img,color,transp,width,height,box_width,box_height,appear_delay,solid_delay,lifespan,disp_eff,grav,accel,pierce,bounce,homing,knockback,splash,AT_Min,AT_Max,res_type,res_type_param,res_mode,res_orient,res_img,Res_Color,res_transp,res_width,res_height,res_box_width,res_box_height,res_appear_delay,res_solid_delay,Res_Lifespan,res_fade_time,res_grav,res_accel,res_pierce,res_bounce,res_splash,res_ATmin,res_ATmax,res_bullet,base_res_type,base_res_type_param){
    if (this.PJ_index!=DIRE_Proj_Limit){
        this.PJ_class_ID[this.PJ_index] = class_ID;
        assignVector2D(this.PJ_body[this.PJ_index],x_pos,y_pos);
        assignVector2D(this.PJ_velocity[this.PJ_index],Xspd,Yspd);
        this.PJ_d[this.PJ_index] = 0;
        this.PJ_orient[this.PJ_index] = orient;
        this.PJ_img[this.PJ_index] = img;
        this.PJ_color[this.PJ_index] = color;
        this.PJ_transp[this.PJ_index] = transp;
        this.PJ_width[this.PJ_index] = width;
        this.PJ_height[this.PJ_index] = height;
        this.PJ_box_width[this.PJ_index] = box_width;
        this.PJ_box_height[this.PJ_index] = box_height;
        this.PJ_appear_delay[this.PJ_index] = floor(random(appear_delay));
        this.PJ_solid_delay[this.PJ_index] = solid_delay;
        this.PJ_lifespan[this.PJ_index] = lifespan;
        this.PJ_disp_eff[this.PJ_index] = disp_eff;
        this.PJ_gravity[this.PJ_index] = grav;
        this.PJ_accel[this.PJ_index] = accel;
        this.PJ_pierce[this.PJ_index] = pierce;
        this.PJ_bounce[this.PJ_index] = bounce;
        this.PJ_homing[this.PJ_index] = homing;
        this.PJ_knockback[this.PJ_index] = knockback;
        this.PJ_splash[this.PJ_index] = splash;
        this.PJ_AT_min[this.PJ_index] = AT_Min;
        this.PJ_AT_max[this.PJ_index] = AT_Max;
        this.PJ_res_type[this.PJ_index] = res_type;
        this.PJ_res_type_param[this.PJ_index] = res_type_param;
        this.PJ_res_mode[this.PJ_index] = res_mode;
        this.PJ_res_orient[this.PJ_index] = res_orient;
        this.PJ_res_img[this.PJ_index] = res_img;
        this.PJ_res_color[this.PJ_index] = Res_Color;
        this.PJ_res_transp[this.PJ_index] = res_transp;
        this.PJ_res_width[this.PJ_index] = res_width;
        this.PJ_res_height[this.PJ_index] = res_height;
        this.PJ_res_box_width[this.PJ_index] = res_box_width;
        this.PJ_res_box_height[this.PJ_index] = res_box_height;
        this.PJ_res_appear_delay[this.PJ_index] = res_appear_delay;
        this.PJ_res_solid_delay[this.PJ_index] = res_solid_delay;
        this.PJ_res_lifespan[this.PJ_index] = Res_Lifespan;
        this.PJ_res_fade_tick[this.PJ_index] = res_fade_time;
        this.PJ_res_grav[this.PJ_index] = res_grav;
        this.PJ_res_accel[this.PJ_index] = res_accel;
        this.PJ_res_pierce[this.PJ_index] = res_pierce;
        this.PJ_res_bounce[this.PJ_index] = res_bounce;
        this.PJ_res_splash[this.PJ_index] = res_splash;
        this.PJ_res_AT_min[this.PJ_index] = res_ATmin; 
        this.PJ_res_AT_max[this.PJ_index] = res_ATmax; //aha
        this.PJ_res_bullet[this.PJ_index] = res_bullet;
        this.PJ_res_base_type[this.PJ_index] = base_res_type;
        this.PJ_res_base_type_param[this.PJ_index] = base_res_type_param;
        this.PJ_index++;
    }
};

//tracks projectile hits ? original name: aa.q
SR_Projectile.prototype.PJsub = function(a) {
    this.PJ_class_ID[a] = this.PJ_class_ID[this.PJ_index-1];
    this.PJ_body[a].Vset(this.PJ_body[this.PJ_index-1]);
    this.PJ_velocity[a].Vset(this.PJ_velocity[this.PJ_index-1]);
    this.PJ_d[a] = this.PJ_d[this.PJ_index-1];
    this.PJ_orient[a] = this.PJ_orient[this.PJ_index-1];
    this.PJ_img[a] = this.PJ_img[this.PJ_index-1];
    this.PJ_color[a] = this.PJ_color[this.PJ_index-1];
    this.PJ_transp[a] = this.PJ_transp[this.PJ_index-1];
    this.PJ_width[a] = this.PJ_width[this.PJ_index-1];
    this.PJ_height[a] = this.PJ_height[this.PJ_index-1];
    this.PJ_box_width[a] = this.PJ_box_width[this.PJ_index-1];
    this.PJ_box_height[a] = this.PJ_box_height[this.PJ_index-1];
    this.PJ_appear_delay[a] = this.PJ_appear_delay[this.PJ_index-1];
    this.PJ_solid_delay[a] = this.PJ_solid_delay[this.PJ_index-1];
    this.PJ_lifespan[a] = this.PJ_lifespan[this.PJ_index-1];
    this.PJ_disp_eff[a] = this.PJ_disp_eff[this.PJ_index-1];
    this.PJ_gravity[a] = this.PJ_gravity[this.PJ_index-1];
    this.PJ_accel[a] = this.PJ_accel[this.PJ_index-1];
    this.PJ_pierce[a] = this.PJ_pierce[this.PJ_index-1];
    this.PJ_bounce[a] = this.PJ_bounce[this.PJ_index-1];
    this.PJ_homing[a] = this.PJ_homing[this.PJ_index-1];
    this.PJ_knockback[a] = this.PJ_knockback[this.PJ_index-1];
    this.PJ_splash[a] = this.PJ_splash[this.PJ_index-1];
    this.PJ_AT_min[a] = this.PJ_AT_min[this.PJ_index-1];
    this.PJ_AT_max[a] = this.PJ_AT_max[this.PJ_index-1];
    this.PJ_res_type[a] = this.PJ_res_type[this.PJ_index-1];
    this.PJ_res_type_param[a] = this.PJ_res_type_param[this.PJ_index-1];
    this.PJ_res_mode[a] = this.PJ_res_mode[this.PJ_index-1];
    this.PJ_res_orient[a] = this.PJ_res_orient[this.PJ_index-1];
    this.PJ_res_img[a] = this.PJ_res_img[this.PJ_index-1];
    this.PJ_res_color[a] = this.PJ_res_color[this.PJ_index-1];
    this.PJ_res_transp[a] = this.PJ_res_transp[this.PJ_index-1];
    this.PJ_res_width[a] = this.PJ_res_width[this.PJ_index-1];
    this.PJ_res_height[a] = this.PJ_res_height[this.PJ_index-1];
    this.PJ_res_box_width[a] = this.PJ_res_box_width[this.PJ_index-1];
    this.PJ_res_box_height[a] = this.PJ_res_box_height[this.PJ_index-1];
    this.PJ_res_appear_delay[a] = this.PJ_res_appear_delay[this.PJ_index-1];
    this.PJ_res_solid_delay[a] = this.PJ_res_solid_delay[this.PJ_index-1];
    this.PJ_res_lifespan[a] = this.PJ_res_lifespan[this.PJ_index-1];
    this.PJ_res_fade_tick[a] = this.PJ_res_fade_tick[this.PJ_index-1];
    this.PJ_res_grav[a] = this.PJ_res_grav[this.PJ_index-1];
    this.PJ_res_accel[a] = this.PJ_res_accel[this.PJ_index-1];
    this.PJ_res_pierce[a] = this.PJ_res_pierce[this.PJ_index-1];
    this.PJ_res_bounce[a] = this.PJ_res_bounce[this.PJ_index-1];
    this.PJ_res_splash[a] = this.PJ_res_splash[this.PJ_index-1];
    this.PJ_res_AT_min[a] = this.PJ_res_AT_min[this.PJ_index-1];
    this.PJ_res_AT_max[a] = this.PJ_res_AT_max[this.PJ_index-1];
    this.PJ_res_bullet[a] = this.PJ_res_bullet[this.PJ_index-1];
    this.PJ_res_base_type[a] = this.PJ_res_base_type[this.PJ_index-1];
    this.PJ_res_base_type_param[a] = this.PJ_res_base_type_param[this.PJ_index-1];
    this.PJ_index--;
};

// tracks projectile hits ? original name: aa.h
SR_Projectile.prototype.PJifContact = function(curr_proj,proj_velocity){
    var projectile_dies = 0;
    proj_velocity.Vset(this.PJ_velocity[curr_proj]);
    var half_vec_b = (magnitudeOf(proj_velocity)>>2)+1;
    var next_x,next_y,tile_type;

    scaleVector2D(proj_velocity,1/half_vec_b);

    for (var r=0; r<half_vec_b; r++){
        next_y = this.PJ_body[curr_proj].y+proj_velocity.y;
        //g = clamp(this.PJ_body[curr_proj].x,0,Win_Width-1)>>3;
        //k = clamp(next_y,0,DIRE_Inv_Top-1)>>3;
        tile_type = Terrain.TR_tile_data[clamp(next_y,0,DIRE_Inv_Top-1)>>3][clamp(this.PJ_body[curr_proj].x,0,Win_Width-1)>>3];

        if (tile_type>=0 && tile_type<=8 && this.PJ_pierce[curr_proj]==0){
            if (this.PJ_bounce[curr_proj]==0)
                projectile_dies = 1;
            else if (this.PJ_bounce[curr_proj]==2){
                proj_velocity.y *= -1;               // reflect y magnitude
                this.PJ_velocity[curr_proj].y *= -1;
            }
        } else { // else continue projectile
            this.PJ_body[curr_proj].y = next_y;
        }

        next_x = this.PJ_body[curr_proj].x+proj_velocity.x;
        //g = clamp(next_x,0,Win_Width-1)>>3;
        //k = clamp(this.PJ_body[curr_proj].y,0,DIRE_Inv_Top-1)>>3;
        tile_type = Terrain.TR_tile_data[clamp(this.PJ_body[curr_proj].y,0,DIRE_Inv_Top-1)>>3][clamp(next_x,0,Win_Width-1)>>3];

        if (tile_type>=0 && tile_type<=8 && this.PJ_pierce[curr_proj]==0){
            if (this.PJ_bounce[curr_proj]==0 || this.PJ_bounce[curr_proj]==1)
                projectile_dies = 1;
            if (this.PJ_bounce[curr_proj]==2){
                proj_velocity.x *= -1;               // reflect x magnitude
                this.PJ_velocity[curr_proj].x *= -1;
            }
        } else { // else continue projectile
            this.PJ_body[curr_proj].x = next_x;
        }
    }
    return projectile_dies;
};

// something to do with stages/stage loading ????? maybe agi resets or other things
SR_Projectile.prototype.PJmain = function(){ // aa.move
    var b;
    var vec_c = new Vector2D;
    var d,target;

    for (var curr_proj=0; curr_proj<this.PJ_index; curr_proj++){
        if (this.PJ_body[curr_proj].x<-64 || this.PJ_body[curr_proj].x>Win_Width+64){
            this.PJsub(curr_proj--);
        } else if (this.PJ_appear_delay[curr_proj] > 0){
            this.PJ_appear_delay[curr_proj]--;
        } else if (this.PJ_d[curr_proj]==1){
            this.PJ_lifespan[curr_proj]++;
            if (this.PJ_lifespan[curr_proj] >= this.PJ_disp_eff[curr_proj])
                this.PJsub(curr_proj--);
        } else {
            if (this.PJ_homing[curr_proj] > 0){
                d = this.PJ_homing[curr_proj];

                if (Game_Mode!=1){
                    if (this.PJ_class_ID[curr_proj]==0)
                         d = Enemies.ENfindEnemy(this.PJ_body[curr_proj].x-d,this.PJ_body[curr_proj].y-d,this.PJ_body[curr_proj].x+d,this.PJ_body[curr_proj].y+d);
                    else d = Players.PLfindPlayer(this.PJ_body[curr_proj].x-d,this.PJ_body[curr_proj].y-d,this.PJ_body[curr_proj].x+d,this.PJ_body[curr_proj].y+d,0);
                } else   d = Players.PLfindPlayer(this.PJ_body[curr_proj].x-d,this.PJ_body[curr_proj].y-d,this.PJ_body[curr_proj].x+d,this.PJ_body[curr_proj].y+d,1-this.PJ_class_ID[curr_proj]<<2);

                if (d!=-1){
                    if (Game_Mode!=1){
                        if (this.PJ_class_ID[curr_proj]==0)
                             vec_c.Vdistance(Enemies.EN_joint[d][0],this.PJ_body[curr_proj]);
                        else vec_c.Vdistance(Players.PL_joint[d][0],this.PJ_body[curr_proj]);
                    } else   vec_c.Vdistance(Players.PL_joint[d][0],this.PJ_body[curr_proj]);

                    Normalize(vec_c);
                    d = magnitudeOf(this.PJ_velocity[curr_proj]);
                    this.PJ_velocity[curr_proj].x = 0.85*this.PJ_velocity[curr_proj].x+0.15*vec_c.x+randomRange(-0.1,0.1);
                    this.PJ_velocity[curr_proj].y = 0.85*this.PJ_velocity[curr_proj].y+0.15*vec_c.y+randomRange(-0.1,0.1);
                    Normalize(this.PJ_velocity[curr_proj]);
                    scaleVector2D(this.PJ_velocity[curr_proj],maxOf(d,1));
                }
            }

            this.PJ_velocity[curr_proj].y += 0.01*this.PJ_gravity[curr_proj];
            scaleVector2D(this.PJ_velocity[curr_proj],0.01*this.PJ_accel[curr_proj]);
            d = this.PJifContact(curr_proj,vec_c);
            b = 1;

            // burn rate damage (change to fixed?)
            if (this.PJ_res_type[curr_proj]==1 && this.PJ_res_type_param[curr_proj]!=0 && random(1000)>this.PJ_res_type_param[curr_proj])
                b = 0;
            if (this.PJ_solid_delay[curr_proj] > 0){ //mkay now just normal damage
                this.PJ_solid_delay[curr_proj]--;
                b = 0;
            }

            target = -1;
            if (b==1){
                if (Game_Mode!=1){
                    if (this.PJ_class_ID[curr_proj]==0)
                         target = Enemies.ENtakeDamage(this.PJ_splash[curr_proj],this.PJ_res_type[curr_proj],this.PJ_res_type_param[curr_proj],this.PJ_AT_min[curr_proj],this.PJ_AT_max[curr_proj],this.PJ_body[curr_proj].x,this.PJ_body[curr_proj].y,this.PJ_box_width[curr_proj],this.PJ_box_height[curr_proj]);
                    else target = Players.PLtakeDamage(this.PJ_splash[curr_proj],this.PJ_res_type[curr_proj],this.PJ_res_type_param[curr_proj],this.PJ_AT_min[curr_proj],this.PJ_AT_max[curr_proj],this.PJ_body[curr_proj].x,this.PJ_body[curr_proj].y,this.PJ_box_width[curr_proj],this.PJ_box_height[curr_proj],0);
                } else   target = Players.PLtakeDamage(this.PJ_splash[curr_proj],this.PJ_res_type[curr_proj],this.PJ_res_type_param[curr_proj],this.PJ_AT_min[curr_proj],this.PJ_AT_max[curr_proj],this.PJ_body[curr_proj].x,this.PJ_body[curr_proj].y,this.PJ_box_width[curr_proj],this.PJ_box_height[curr_proj],1-this.PJ_class_ID[curr_proj]<<2);
            }

            if (target!=-1 && this.PJ_knockback[curr_proj]!=0){
                if (Game_Mode!=1){
                    if (this.PJ_class_ID[curr_proj]==0)
                         vec_c.Vdistance(Enemies.EN_joint[target][0],this.PJ_body[curr_proj]);
                    else vec_c.Vdistance(Players.PL_joint[target][0],this.PJ_body[curr_proj]);
                } else   vec_c.Vdistance(Players.PL_joint[target][0],this.PJ_body[curr_proj]);

                Normalize(vec_c);
                scaleVector2D(vec_c,0.1*this.PJ_knockback[curr_proj]);

                if (Game_Mode!=1 && this.PJ_class_ID[curr_proj]==0)
                     scaleVector2D(vec_c,Text_Spacing[EN_Info[Enemies.EN_array_ID[target]][EN_Species]]/EN_Info[Enemies.EN_array_ID[target]][EN_Size]);
                else scaleVector2D(vec_c,0.1);

                if (Game_Mode!=1){
                    if (this.PJ_class_ID[curr_proj]==0)
                         Enemies.EN_joint_destination[target][0].Vsub(vec_c);
                    else Players.PL_joint_destination[target][0].Vsub(vec_c);
                } else   Players.PL_joint_destination[target][0].Vsub(vec_c);

                this.PJ_knockback[curr_proj] = 0;
            }

            if (this.PJ_res_type[curr_proj]==1 && this.PJ_res_type_param[curr_proj]!=0)
                target = -1;

            if (d==1 || target!=-1){
                this.PJ_d[curr_proj] = 1;
                this.PJ_lifespan[curr_proj] = 0;

                // residue modes
                if (this.PJ_res_mode[curr_proj]==1 || this.PJ_res_mode[curr_proj]==3 || this.PJ_res_mode[curr_proj]==4 || this.PJ_res_mode[curr_proj]==5 || this.PJ_res_mode[curr_proj]==6 || this.PJ_res_mode[curr_proj]==7 || this.PJ_res_mode[curr_proj]==8 || this.PJ_res_mode[curr_proj]==9){
                    var g = floor(random(512));

                    for (var j=0; j<this.PJ_res_bullet[curr_proj]; j++){
                        switch (this.PJ_res_mode[curr_proj]){
                            case 1:
                                assignVector2D(vec_c,0,0);
                                break;

                            case 3:
                                var g = floor(random(512));
                                k = randomRange(0.05,0.1);
                                vec_c.x = this.PJ_res_bullet[curr_proj]*Xe[g][0]*k;
                                vec_c.y = this.PJ_res_bullet[curr_proj]*Xe[g][1]*k;
                                break;

                            case 4:
                                vec_c.x = randomRange(0.1*-this.PJ_res_bullet[curr_proj],0.1*this.PJ_res_bullet[curr_proj]);
                                vec_c.y = randomRange(0.2*-this.PJ_res_bullet[curr_proj],0.1*-this.PJ_res_bullet[curr_proj]);
                                break;

                            case 5:
                                vec_c.x = this.PJ_velocity[curr_proj].x;
                                vec_c.y = this.PJ_velocity[curr_proj].y;
                                break;

                            case 6:
                                vec_c.x = randomRange(0.01*-this.PJ_res_bullet[curr_proj],0.01*this.PJ_res_bullet[curr_proj]);
                                vec_c.y = randomRange(0.2*-this.PJ_res_bullet[curr_proj],0.05*-this.PJ_res_bullet[curr_proj]);
                                break;

                            case 7:
                                k = floor(g+512*j/this.PJ_res_bullet[curr_proj])&511;
                                vec_c.x = this.PJ_res_bullet[curr_proj]*Xe[k][0];
                                vec_c.y = this.PJ_res_bullet[curr_proj]*Xe[k][1];
                                break;

                            case 8:
                                g = floor(random(512));
                                k = randomRange(0,0.1);
                                vec_c.x = this.PJ_res_bullet[curr_proj]*Xe[g][0]*k;
                                vec_c.y = this.PJ_res_bullet[curr_proj]*Xe[g][1]*k;
                                break;

                            case 9:
                                vec_c.x = this.PJ_velocity[curr_proj].x;
                                vec_c.y = this.PJ_velocity[curr_proj].y;
                                Normalize(vec_c);
                                break;
                        }

                        Projectiles.PJadd(this.PJ_class_ID[curr_proj],
                           this.PJ_body[curr_proj].x,
                           this.PJ_body[curr_proj].y,
                           vec_c.x,
                           vec_c.y,
                           this.PJ_res_orient[curr_proj],
                           this.PJ_res_img[curr_proj],
                           this.PJ_res_color[curr_proj],
                           this.PJ_res_transp[curr_proj],
                           this.PJ_res_width[curr_proj],
                           this.PJ_res_height[curr_proj],
                           this.PJ_res_box_width[curr_proj],
                           this.PJ_res_box_height[curr_proj],
                           this.PJ_res_appear_delay[curr_proj],
                           this.PJ_res_solid_delay[curr_proj],
                           this.PJ_res_lifespan[curr_proj],
                           this.PJ_res_fade_tick[curr_proj],
                           this.PJ_res_grav[curr_proj],
                           this.PJ_res_accel[curr_proj],
                           this.PJ_res_pierce[curr_proj],
                           this.PJ_res_bounce[curr_proj],
                           0,
                           0,
                           this.PJ_res_splash[curr_proj],
                           this.PJ_res_AT_min[curr_proj],
                           this.PJ_res_AT_max[curr_proj],
                           this.PJ_res_base_type[curr_proj],
                           this.PJ_res_base_type_param[curr_proj],
                           0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                        );
                    }
                }
            }
            if (this.PJ_lifespan[curr_proj] > 0)
                this.PJ_lifespan[curr_proj]--;
            if (this.PJ_lifespan[curr_proj]==0)
                this.PJ_d[curr_proj] = 1;

            if (this.PJ_res_mode[curr_proj]==2 && (random(100)<this.PJ_res_bullet[curr_proj] || d==1 || target!=-1)){
                vec_c.x = randomRange(-1,1);
                vec_c.y = randomRange(-1,1);

                Projectiles.PJadd(
                   this.PJ_class_ID[curr_proj],
                   this.PJ_body[curr_proj].x,
                   this.PJ_body[curr_proj].y,
                   vec_c.x,
                   vec_c.y,
                   this.PJ_res_orient[curr_proj],
                   this.PJ_res_img[curr_proj],
                   this.PJ_res_color[curr_proj],
                   this.PJ_res_transp[curr_proj],
                   this.PJ_res_width[curr_proj],
                   this.PJ_res_height[curr_proj],
                   this.PJ_res_box_width[curr_proj],
                   this.PJ_res_box_height[curr_proj],
                   this.PJ_res_appear_delay[curr_proj],
                   this.PJ_res_solid_delay[curr_proj],
                   this.PJ_res_lifespan[curr_proj],
                   this.PJ_res_fade_tick[curr_proj],
                   this.PJ_res_grav[curr_proj],
                   this.PJ_res_accel[curr_proj],
                   this.PJ_res_pierce[curr_proj],
                   this.PJ_res_bounce[curr_proj],
                   0,
                   0,
                   this.PJ_res_splash[curr_proj],
                   this.PJ_res_AT_min[curr_proj],
                   this.PJ_res_AT_max[curr_proj],
                   this.PJ_res_base_type[curr_proj],
                   this.PJ_res_base_type_param[curr_proj],
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                );
            }
        }
    }
};

SR_Projectile.prototype.PJrenderProjectiles = function(){ // aa.b
    var a,b,c;
    var d = new Vector2D;
    var e = new Vector2D;
    var g = new Vector2D;
    var k = new Vector2D;

    for (p=0; p<this.PJ_index; p++){
        if (this.PJ_appear_delay[p]<=0){
            b = 16*this.PJ_img[p];
            if (this.PJ_d[p]==1)
                 c = floor((this.PJ_color[p]>>24&0xFF)*(this.PJ_disp_eff[p]-this.PJ_lifespan[p])/this.PJ_disp_eff[p])<<24|this.PJ_color[p]&0xFFFFFF;
            else c = this.PJ_color[p];

            if (this.PJ_solid_delay[p]>0)
                c = ((c>>24&0xFF)>>1)<<24|c&0xFFFFFF;
            Display_Mode = this.PJ_transp[p];
            Display_Mode2 = 1;
            if (this.PJ_orient[p]==0){
                dispItemCentered(Projectiles_Img,floor(this.PJ_body[p].x),floor(this.PJ_body[p].y),this.PJ_width[p],this.PJ_height[p],b,0,16,16,c);
            } else {
                e.Vset(this.PJ_velocity[p]);
                d.Vset(e);
                getPerpendicular(d);
                Normalize(d);
                Normalize(e);
                scaleVector2D(d,this.PJ_width[p]>>1);
                scaleVector2D(e,this.PJ_height[p]>>1);
                g.Vdistance(e,d);
                sumVector2D(k,e,d);
                var r = this.PJ_body[p].x+g.x;
                var m = this.PJ_body[p].y+g.y;
                var n = b;
                var F = this.PJ_body[p].x+k.x;
                var H = this.PJ_body[p].y+k.y;
                var M = b+16;
                var E = this.PJ_body[p].x-g.x;
                var ka = this.PJ_body[p].y-g.y;
                var Ja = b+16;
                var Ea = this.PJ_body[p].x-k.x;
                var Ca = this.PJ_body[p].y-k.y;
                var Z = 0;
                var X = 0;
                var dol = 16;
                var ob = 16;
                var pb = Projectiles_Img;
                var r = r<<16;
                var m = m<<16;
                var F = F<<16;
                var H = H<<16;
                var E = E<<16;
                var ka = ka<<16;
                var Ea = Ea<<16;
                var Ca = Ca<<16;
                var n = 65535*n;
                var Z = 65535*Z;
                var M = 65535*M;
                var X = 65535*X;
                var Ja = 65535*Ja;
                var dol = 65535*dol;

                b *= 65535;
                var ob = 65535*ob;
                var Xa = void 0;
                var ta = void 0;
                var ya = void 0;
                var rb = void 0;
                var Xa = void 0;
                var ia = void 0;
                var ja = void 0;
                var za = void 0;
                var bb = void 0;
                var ab = void 0;
                var pa = void 0;
                var Ya = void 0;
                var Bb = void 0;
                var Cb = void 0;
                var Sa = void 0;
                var Sa = void 0;
                var ya = Win_Height<<16;
                var Oa = 0;

                if (ya>m)
                    ya = m;
                if (ya>H)
                    ya = H;
                if (ya>ka)
                    ya = ka;
                if (ya>Ca)
                    ya = Ca;
                if (Oa<m)
                    Oa = m;
                if (Oa<H)
                    Oa = H;
                if (Oa<ka)
                    Oa = ka;
                if (Oa<Ca)
                    Oa = Ca;
                ya >>= 16;
                Oa >>= 16;
                if (ya<0)
                    ya = 0;
                if (Oa>=Win_Height)
                    Oa = Win_Height-1;
                for (ta=ya; ta<=Oa; ta++){
                    Layer1[ta] = Win_Width;
                    Layer2[ta] = -1;
                }
                lh(r,m,n,Z,F,H,M,X);
                lh(F,H,M,X,E,ka,Ja,dol);
                lh(E,ka,Ja,dol,Ea,Ca,b,ob);
                lh(Ea,Ca,b,ob,r,m,n,Z);
                Ya = c>>24&0xFF;
                bb = c>>16&0xFF;
                ab = c>>8&0xFF;
                pa = c&0xFF;
                for (ta=ya; ta<=Oa; ta++){
                    for (ya=ta*Win_Width+Layer1[ta],Xa=Layer2[ta]-Layer1[ta]+1,ja=(Layer4[ta]-Layer3[ta])/Xa,za=(Layer6[ta]-Layer5[ta])/Xa,rb=Layer3[ta],ia=Layer5[ta],Xa=Layer1[ta]; Xa<=Layer2[ta]; Xa++,ya++,rb+=ja,ia+=za){
                        if (Xa>=0 && Xa<Win_Width){
                            Sa = pb.IG_pxl_color_index[(ia>>16)*pb.IG_width+(rb>>16)];

                            if (Display_Mode2==0){
                                if (Sa!=-1){
                                    Bb = bb*((Sa&0xFF0000)>>16)>>8;
                                    Cb = ab*((Sa&0x00FF00)>>8)>>8;
                                    Sa = pa*(Sa&0x0000FF)>>8;

                                    if (Display_Mode==0)
                                         Game_Canvas[ya] = Bb<<16|Cb<<8|Sa;
                                    else Game_Canvas[ya] = colorBlend(Game_Canvas[ya],Bb<<16|Cb<<8|Sa,Ya);
                                }
                            } else {
                                Sa = Ya*(Sa&0xFF)>>8;
                                if (Sa!=0)
                                    Game_Canvas[ya] = colorBlend(Game_Canvas[ya],c,Sa);
                            }
                        }
                    }
                }
            }
            Display_Mode2 = Display_Mode = 0;
        }
    }
};

var Indicators = new SR_Animated_Indicator; // original name: ne
function SR_Animated_Indicator(){ // original name: rh()
    this.IN_position = Array(DIRE_Ind_Limit);            // origin position of indicator           original name: .a
    this.IN_direction = Array(DIRE_Ind_Limit);           // initial x and y direction of indicator original name: .k
    //this.IN_value = new Int32Array(DIRE_Ind_Limit);    // value of the number                    original name: .value
    this.IN_value = new Array(DIRE_Ind_Limit);           // value of the number (changed from Int32 to allow letter indicators)                   original name: .value
    this.IN_color = new Int32Array(DIRE_Ind_Limit);      // color of indicator                     original name: .G
    this.IN_fade_ticks = new Int32Array(DIRE_Ind_Limit); // countdown until indicator fades away   original name: .count
    this.IN_index = 0;                                   //                                        original name: .index

    for (var i=0; i<DIRE_Ind_Limit; i++){
        this.IN_position[i] = new Vector2D;
        this.IN_direction[i] = new Vector2D;
    }
}

SR_Animated_Indicator.prototype.INreset = function(){ // aa.j
    this.IN_index = 0;
};

// little numbers
SR_Animated_Indicator.prototype.INadd = function(x_pos,y_pos,direction,value,color){ // aa.add
    if (this.IN_index != DIRE_Ind_Limit){ // limit the quantitiy of damage numbers to DIRE_Ind_Limit
        // limit position to stay inside the screen
        x_pos = clamp(x_pos,16,Win_Width-16-1);
        y_pos = clamp(y_pos,8,DIRE_Inv_Top-8-1);

        assignVector2D(this.IN_position[this.IN_index],x_pos,y_pos);   // set position
        assignVector2D(this.IN_direction[this.IN_index],direction,-2); // set direction

        if (direction!=0){
            this.IN_direction[this.IN_index].x += randomRange(-0.2,0.2);
            this.IN_direction[this.IN_index].y += randomRange(-0.2,0.2);
        }

        this.IN_value[this.IN_index] = value; // set value
        this.IN_color[this.IN_index] = color; // set color
        this.IN_fade_ticks[this.IN_index] = 0;

        this.IN_index++;
    }
};

SR_Animated_Indicator.prototype.INsubtract = function(a){ // aa.sub
    this.IN_position[a].Vset(this.IN_position[this.IN_index-1]);
    this.IN_direction[a].Vset(this.IN_direction[this.IN_index-1]);

    this.IN_value[a] = this.IN_value[this.IN_index-1];
    this.IN_color[a] = this.IN_color[this.IN_index-1];
    this.IN_fade_ticks[a] = this.IN_fade_ticks[this.IN_index-1];

    this.IN_index--;
};

SR_Animated_Indicator.prototype.INmain = function(){ // aa.move
    for (var i=0; i<this.IN_index; i++){
        if (this.IN_direction[i].x==0){
            this.IN_direction[i].y += 0;
            scaleVector2D(this.IN_direction[i],0.96);
        } else {
            this.IN_direction[i].y += 0.05;
            scaleVector2D(this.IN_direction[i],0.99);
        }

        this.IN_position[i].Vadd(this.IN_direction[i]);
        this.IN_position[i].x = clamp(this.IN_position[i].x,16,Win_Width-16-1);
        this.IN_position[i].y = clamp(this.IN_position[i].y,8,DIRE_Inv_Top-8-1);

        this.IN_fade_ticks[i]++;
        if (this.IN_fade_ticks[i] >= 100)
            this.INsubtract(i--);

    }
};
SR_Animated_Indicator.prototype.INoutput = function(){ // aa.b
    var fill_R,fill_G,fill_B,opacity;

    for (var i=0; i<this.IN_index; i++){ // Split color value into RGB
        fill_R = this.IN_color[i]>>16&0xFF;
        fill_G = this.IN_color[i]>>8&0xFF;
        fill_B = this.IN_color[i]&0xFF;

        if (100-this.IN_fade_ticks[i] < 50) // Fade out text
             opacity = 100-this.IN_fade_ticks[i];
        else opacity = 50;
        opacity = floor(0xFF*opacity/50); // convert opacity to Alpha value

        largeMessage(Small_Text,floor(this.IN_position[i].x),floor(this.IN_position[i].y),""+this.IN_value[i],fill_R,fill_G,fill_B,opacity,0,0,0,opacity,5,7);
    }
};

// item drops
var Drops = new SR_Drop;
function SR_Drop(){ // original name: sh()
    this.DP_position = Array(100);         // original name: .a
    this.DP_velocity = Array(100);         // original name: .k
    this.DP_item_ID = new Int32Array(100); // original name: .item
    this.DP_val1 = new Int32Array(100);    // original name: .value
    this.DP_val2 = new Int32Array(100);    // original name: .da
    this.DP_count = new Int32Array(100);   // original name: .count
    this.DP_log = 0;                       // original name: .J
    this.DP_index = 0;                     // original name: .index
    for (var d=0; d<100; d++){
        this.DP_position[d] = new Vector2D;
        this.DP_velocity[d] = new Vector2D;
    }
}

SR_Drop.prototype.DPreset = function(){ // aa.j
    this.DP_log = this.DP_index = 0;
};

// spawn a drop
SR_Drop.prototype.DPadd = function(x_pos,y_pos,item_ID,attribute1,attribute2){ // aa.add
    if (this.DP_index!=100){ // don't do < 100
        x_pos = clamp(x_pos,16,Win_Width-16-1);
        y_pos = clamp(y_pos,8,DIRE_Inv_Top-8-1);
        assignVector2D(this.DP_position[this.DP_index],x_pos,y_pos);

        if (Mouse_Xpos<x_pos) // send items dropped in the direction of the mouse
             this.DP_velocity[this.DP_index].x = randomRange(-0.5,-1);
        else this.DP_velocity[this.DP_index].x = randomRange(0.5,1);

        this.DP_velocity[this.DP_index].y = randomRange(-1,-2);
        this.DP_item_ID[this.DP_index] = item_ID;
        this.DP_val1[this.DP_index] = attribute1;
        this.DP_val2[this.DP_index] = attribute2;
        this.DP_count[this.DP_index] = 0;
        this.DP_index++;
        this.DP_log = 0;
        for (var d=0; d<this.DP_index; d++)
            this.DP_log += 7*this.DP_item_ID[d]+3*this.DP_val1[d]+11*this.DP_val2[d];
    }
};

SR_Drop.prototype.DPsub = function(a){ // aa.sub
    this.DP_position[a].Vset(this.DP_position[this.DP_index-1]);
    this.DP_velocity[a].Vset(this.DP_velocity[this.DP_index-1]);
    this.DP_item_ID[a] = this.DP_item_ID[this.DP_index-1];
    this.DP_val1[a] = this.DP_val1[this.DP_index-1];
    this.DP_val2[a] = this.DP_val2[this.DP_index-1];
    this.DP_count[a] = this.DP_count[this.DP_index-1];
    this.DP_index--;
    this.DP_log = 0;
    for (var d=0; d<this.DP_index; d++)
        this.DP_log += 7*this.DP_item_ID[d] + 3*this.DP_val1[d] + 11*this.DP_val2[d];
};

SR_Drop.prototype.DPmain = function(){ // aa.move
    var b = 0;
    var test_log = 0;
    for (var d=0; d<this.DP_index; d++)
        test_log += 7*this.DP_item_ID[d] + 3*this.DP_val1[d] + 11*this.DP_val2[d];

    if (this.DP_log != test_log)
        console.log("this.DP_log!="+test_log);//C=null);

    for (var d=0; d<this.DP_index; d++){
        this.DP_velocity[d].y += 0.04;

        scaleVector2D(this.DP_velocity[d],0.98);

        var c,d;
        b = clamp(this.DP_position[d].y+this.DP_velocity[d].y,8,DIRE_Inv_Top-8-1);
        var Xtile_pos = this.DP_position[d].x>>3;
        var Ytile_pos = b>>3;
        var tile_data = Terrain.TR_tile_data[Ytile_pos][Xtile_pos];

        if (tile_data<=-1 || tile_data==9)
            this.DP_position[d].y = b;

        b = clamp(this.DP_position[d].x+this.DP_velocity[d].x,16,Win_Width-16-1);
        Ytile_pos = this.DP_position[d].y>>3;
        Xtile_pos = b>>3;
        tile_data = Terrain.TR_tile_data[Ytile_pos][Xtile_pos];

        if (tile_data<=-1 || tile_data==9)
            this.DP_position[d].x = b;

        var target_player = Players.PLfindPlayer(this.DP_position[d].x-12,this.DP_position[d].y-6-12,this.DP_position[d].x+12,this.DP_position[d].y-6+12,0)
        if (this.DP_count[d] < 100){
            this.DP_count[d]++;
        } else if (Players.PLfindPlayer(this.DP_position[d].x-12,this.DP_position[d].y-6-12,this.DP_position[d].x+12,this.DP_position[d].y-6+12,0) != -1){
            antiCheatCheck();

            if (this.DP_item_ID[d]==1){ // gold pickup
                PlaySoundSFX(snd_money, false);
                Team_Gold = clamp(Team_Gold+this.DP_val1[d],0,9999999);
                Indicators.INadd(this.DP_position[d].x,this.DP_position[d].y,0,this.DP_val1[d],0xFFFF00);
            } else if (this.DP_item_ID[d]==2){ // onigiri pickup
                for (var j=0; j<Stickmen_Slots; j++){
                    if (Players.PL_is_chosen[j]!=0){
                        if (floor(100*LP_Current[target_player]/LP_Max[target_player]) > floor(100*LP_Current[j]/LP_Max[j]))
                            target_player = j;
                    }
                }
                if (LP_Current[target_player]==LP_Max[target_player])
                    continue;
                antiCheatCheck();
                LP_Current[target_player] = clamp(LP_Current[target_player]+floor(LP_Max[target_player]/5),0,LP_Max[target_player]);
                antiCheatSet();
                Indicators.INadd(this.DP_position[d].x,this.DP_position[d].y,0,floor(LP_Max[target_player]/5),0x00FF00);
                PlaySoundSFX(snd_onigiri, false);
            } else {
                for (var j=Inv_First; j<Inv_Last; j++){ // search for next open slot
                    if (Item_Inv[j]==0){ // if there ds space, add item to inventory
                        Item_Inv[j] = this.DP_item_ID[d];
                        Comp1_Inv[j] = this.DP_val1[d];
                        Comp2_Inv[j] = this.DP_val2[d];
                        PlaySoundSFX(snd_weapon, false);
                        break;
                    }
                }
                if (Inv_Last==j){
                    this.DP_velocity[d].x = randomRange(-1,1);
                    this.DP_velocity[d].y = randomRange(-1,-2);
                    this.DP_count[d] = 0;
                    continue;
                }
            }
            antiCheatSet();
            this.DPsub(d--);
        }
    }
};

SR_Drop.prototype.DPrenderDrops = function(){ // aa.b
    Display_Mode2 = 2;
    for (var d=0; d<this.DP_index; d++){
        if (this.DP_count[d]==100 || (this.DP_count[d]&6)!=0)
            dispItem(Drop_Img,floor(this.DP_position[d].x)-6,floor(this.DP_position[d].y)-12,12,12,12*getVal(this.DP_item_ID[d],Item_Ico_Sm),0,12,12,getVal(this.DP_item_ID[d],Item_Color));
    }
    Display_Mode2 = 0;
};

var Terrain = new SR_Terrain; // I = new th
function SR_Terrain(){ // original name: th()
    this.TR_width = Win_Width>>3;                           // original name: .i
    this.TR_height = Win_Height>>3;                         // original name: .s
    this.TR_tile_data = Array(this.TR_height);              // original name: .e
    this.DIRE_tile_indicator_color = Array(this.TR_height); // original name: .e
    this.TR_low_dry_surface = new Int32Array(this.TR_width);// original name: .o
    this.TR_high_surface = new Int32Array(this.TR_width);   // original name: .I
    this.TR_air_ceil = new Int32Array(this.TR_width);       // original name: .$
    this.TR_air_floor = new Int32Array(this.TR_width);      // original name: .hb
    this.TR_water_ceil = new Int32Array(this.TR_height*this.TR_height); // original name: .gb
    this.TR_stage_num = 0;                                  // original name: .w
    this.TR_water_floor = 0;                                // original name: .ab
    this.TR_img = -1;                                       // original name: .cb
    for (var y=0; y<this.TR_height; y++){
        this.TR_tile_data[y] = new Int32Array(this.TR_width);
        this.DIRE_tile_indicator_color[y] = Array(this.TR_width);
    }

}

/* TR_tile_data reference
the screen is split into 4px by 4px tiles, making it 64x48

3x3 block surrounded by Air:
    -1-1-1-1-1
    -1 0 1 2-1
    -1 3 4 5-1
    -1 6 7 8-1
    -1-1-1-1-1

Air: -1
Water = 9

top left corner: 0
top side: 1
top right corner: 2

left side: 3
surrounded: 4
right side: 5

bottom left corner: 6
bottom side: 7
bottom right corner: 8
*/

SR_Terrain.prototype.TRset = function(stage_number){ // th.prototype.j
    this.TR_stage_num = stage_number;
    if (this.TR_img != Stage_Spawns[this.TR_stage_num][Current_Screen][1]){
        this.TR_img = Stage_Spawns[this.TR_stage_num][Current_Screen][1];
        Stage_Terrain_Img = new SR_Image;
        Stage_Terrain_Img.IGset("st"+this.TR_img+".gif");
    }
    imgToArray(Stage_Terrain_Img);
    if (Tile_Counter1!=0)
        return false;
    //this.TR_height = Stage_Terrain_Img.IG_height;
    this.TR_height = DIRE_Inv_Top>>3;
    var tile_height_adjust = this.TR_height-Stage_Terrain_Img.IG_height;

    for (var y=0; y<this.TR_height; y++){ // reset pixel data
        for (var x=0; x<this.TR_width; x++)
            this.TR_tile_data[y][x] = -1;
    }
    for (var y=0; y<this.TR_height; y++){ // reset tile indicator color
        for (var x=0; x<this.TR_width; x++)
            this.DIRE_tile_indicator_color[y][x] = 0x999999;
    }
    var terr_start_column = floor(random(Stage_Terrain_Img.IG_width-this.TR_width));
    var cur_pxl,left_pxl,right_pxl,above_pxl,below_pxl;
    for (var y=0; y<this.TR_height; y++){ // top to bottom
        for (var x=0; x<this.TR_width; x++){ // left to right
            //cur_pxl = y*Stage_Terrain_Img.IG_width+clamp(x,3,Terrain.TR_width-4)+terr_start_column;                                             // start of row + number from 3-60 + start pos
            cur_pxl = (y-tile_height_adjust)*Stage_Terrain_Img.IG_width+clamp(x,3,Terrain.TR_width-4)+terr_start_column;                                             // start of row + number from 3-60 + start pos

            left_pxl = Stage_Terrain_Img.IG_pxl_color_index[x<=3 || this.TR_width-3<=x? cur_pxl :cur_pxl-1];                    // if x is between 3 and width-3? current pixel else left pixel
            right_pxl = Stage_Terrain_Img.IG_pxl_color_index[x<=2 || this.TR_width-4<=x? cur_pxl :cur_pxl+1];                   // if x is between 2 and width-4? current pixel else right pixel
            above_pxl = Stage_Terrain_Img.IG_pxl_color_index[y==0? cur_pxl :cur_pxl-Stage_Terrain_Img.IG_width];                // if at the top row? current pixel else above pixel

            below_pxl = Stage_Terrain_Img.IG_pxl_color_index[y==this.TR_height-1? cur_pxl :cur_pxl+Stage_Terrain_Img.IG_width]; // if at the bottom row? current pixel else below pixel
            //below_pxl = Stage_Terrain_Img.IG_pxl_color_index[y==(this.TR_height-tile_height_adjust)-1? cur_pxl :cur_pxl+Stage_Terrain_Img.IG_width]; // if at the bottom row? current pixel else below pixel

            // set pixel data
            if (Stage_Terrain_Img.IG_pxl_color_index[cur_pxl]==0){
                if (left_pxl!=0 && right_pxl==0 && above_pxl!=0 && below_pxl==0)
                    this.TR_tile_data[y][x] = 0;
                else if (left_pxl==0 && right_pxl==0 && above_pxl!=0 && below_pxl==0)
                    this.TR_tile_data[y][x] = 1;
                else if (left_pxl==0 && right_pxl!=0 && above_pxl!=0 && below_pxl==0)
                    this.TR_tile_data[y][x] = 2;
                else if (left_pxl!=0 && right_pxl==0 && above_pxl==0 && below_pxl==0)
                    this.TR_tile_data[y][x] = 3;
                else if (left_pxl==0 && right_pxl==0 && above_pxl==0 && below_pxl==0)
                    this.TR_tile_data[y][x] = 4;
                else if (left_pxl==0 && right_pxl!=0 && above_pxl==0 && below_pxl==0)
                    this.TR_tile_data[y][x] = 5;
                else if (left_pxl!=0 && right_pxl==0 && above_pxl==0 && below_pxl!=0)
                    this.TR_tile_data[y][x] = 6;
                else if (left_pxl==0 && right_pxl==0 && above_pxl==0 && below_pxl!=0)
                    this.TR_tile_data[y][x] = 7;
                else if (left_pxl==0 && right_pxl!=0 && above_pxl==0 && below_pxl!=0)
                    this.TR_tile_data[y][x] = 8;

            } else if (Stage_Terrain_Img.IG_pxl_color_index[cur_pxl]==0x0000FF){ // if pixel is blue
                this.TR_tile_data[y][x] = 9;
            } else if (Stage_Terrain_Img.IG_pxl_color_index[cur_pxl]==0xFF0000){ // if pixel is red
                this.TR_tile_data[y][x] = -2;
            }
            
        }
    } // set player spawns to the first 4 open tiles
    for (var x=0; x<this.TR_width; x++){ // left to right
        for (var y=this.TR_height-1; y>=0; y--){ // bottom to top
            if (this.TR_tile_data[y][x]<=-1 || this.TR_tile_data[y][x]==9){ // if tile is air or water
                this.TR_low_dry_surface[x] = y;
                this.DIRE_tile_indicator_color[y][x] = 0xFF0000;
                break;
            }
        }
    } // sets air or water tiles that are directly on the ground surface
    for (var x=0; x<this.TR_width; x++){ // left to right
        for (var y=1; y<this.TR_height; y++){ // top to bottom
                // if (above tile is air or water) && current tile is solid
            if ((this.TR_tile_data[y-1][x]<=-1 || this.TR_tile_data[y-1][x]==9) && 0<=this.TR_tile_data[y][x] && this.TR_tile_data[y][x]<=8){
                this.TR_high_surface[x] = y-1;
                this.DIRE_tile_indicator_color[y-1][x] = 0xFFFF00;
                break;
            }
        }
    } // sets air or water tiles that are directly on the ceiling surface
    for (var x=0; x<this.TR_width; x++){ // left to right
        for (var y=0; y<this.TR_height; y++){ // top to bottom
            if (this.TR_tile_data[y][x]<=-1 || this.TR_tile_data[y][x]==9){ // if current tile is air or water
                this.TR_air_ceil[x] = y;
                this.DIRE_tile_indicator_color[y][x] = 0x00FF00;
                break;
            }
        }
    } // sets air tiles that are directly above solid or water surface
    for (var x=0; x<this.TR_width; x++){ // left to right
        this.TR_air_floor[x] = this.TR_air_ceil[x];
        for (var y=1; y<this.TR_height; y++){ // top to bottom
                // if (above tile is air or water) current tile is solid or water
            if ((this.TR_tile_data[y-1][x]<=-1 || this.TR_tile_data[y-1][x]==9) && 0<=this.TR_tile_data[y][x] && this.TR_tile_data[y][x]<=9){
                this.TR_air_floor[x] = y-1;
                this.DIRE_tile_indicator_color[y-1][x] = 0x0000FF;
                break;
            }
        }
    }
    this.TR_water_floor = 0;
    for (var x=12; x<this.TR_width-4; x++){ // left to right
        for (var y=1; y<this.TR_height-1; y++){ // top to bottom
            if (this.TR_tile_data[y-1][x]==9 && this.TR_tile_data[y][x]==9){
                this.TR_water_ceil[this.TR_water_floor++] = y*this.TR_width+x;
                this.DIRE_tile_indicator_color[y][x] = 0xFF00FF;
            }
        }
    }

    if (Current_Screen==0){
        for (var i=0; i<Win_Width*Win_Height; i++)
            Stage_Eff_Canvas.IG_pxl_color_index[i] = 0;

        var auxb = Game_Canvas;
        switch (this.TR_stage_num){ // stage mist effect
            case 3:
            case 16:
            case 30:
            case 31:
            case 32:
            case 33:
            case 66:
            case 67:
            case 68:
            case 69:
                Display_Mode = 1;
                Display_Mode2 = 3;
                Game_Canvas = Stage_Eff_Canvas.IG_pxl_color_index;
                for (var i=0; i<Win_Width*Win_Height; i++)
                    Game_Canvas[i] = 0;
                for (var i=0; i<100; i++){
                    c = randomRange(1.7,3.69);
                    c *= c*c*c;
                    dispItemCentered(Projectiles_Img,floor(randomRange(0,Win_Width)),floor(DIRE_Win_Center-c),DIRE_Win_Center,32,96,0,16,16,0x18FFFFFF);
                }
                Game_Canvas = auxb;
                Display_Mode = Display_Mode2 = 0;
        }
    }
    return true;
};

SR_Terrain.prototype.TRdrawTerrain = function(){ // th.prototype.b
    var tile_type,fill_R,fill_G,fill_B;
    var gif_xpos = new Int32Array([0,8,16,0,8,16,0 ,8 ,16]);
    var gif_ypos = new Int32Array([0,0,0 ,8,8,8 ,16,16,16]);
    var texture = Terrain_Textures[Stage_Spawns[this.TR_stage_num][Current_Screen][0]];

    for (var y=0; y<this.TR_height; y++){
        for (var x=0; x<this.TR_width; x++){
            tile_type = this.TR_tile_data[y][x];
            if (tile_type!=-1){                                // if tile is not air
                if (tile_type==9){                             // if tile is water
                    if (this.TR_stage_num==82){                // if stage is blood lake
                        if (this.TR_tile_data[y-1][x]==-1)     // if this tile is the water surface (of blood lake)
                            drawItem(Water_Red_Img,8*x,8*y,8,8,0,0,8,8);
                        else
                            backgroundFill(8*x-4,8*y,16,8,0x550000);
                    } else if (this.TR_tile_data[y-1][x]==-1){ // if this tile is the water surface
                        drawItem(Water_Img,8*x,8*y,8,8,0,0,8,8);
                    } else {
                        backgroundFill(8*x-4,8*y,16,8,0x00559C);
                    }
                } else if (tile_type==-2){                      // if tile is decoration
                    if (this.TR_stage_num==4){                  // if stage is moss hovel
                        drawItem(Wood_Img,8*x,8*y,8,8,0,0,8,8);
                    }
                } else {
                    drawItem(texture,8*x,8*y,8,8,gif_xpos[tile_type],gif_ypos[tile_type],8,8);
                }
            }
            fill_R = this.DIRE_tile_indicator_color[y][x]>>16&0xFF;
            fill_G = this.DIRE_tile_indicator_color[y][x]>>8&0xFF;
            fill_B = this.DIRE_tile_indicator_color[y][x]&0xFF;
            //if (Debug_Mode==1)
                //largeMessage(Small_Text,x*8+3,y*8+4,""+tile_type,fill_R,fill_G,fill_B,0xCC,0,0,0,0,5,7);
        }
    }
};

// map size
var WorldMap = new SR_map; // qe = new uh
function SR_map(){ // original name: uh()
    this.MAP_width = 78;                             // total width (in tiles) of world map              original name: .i
    this.MAP_height = 16;                            // total height (in tiles) of world map             original name: .s
    this.MAP_tile_horizontal_spacer = 0;             // spacing adjust for scrolling                     original name: .t
    this.MAP_land_array = Array(this.MAP_height);    // array of land tiles (sand, ice, cliff)           original name: .e
    this.MAP_feature_array = Array(this.MAP_height); // array of feature tiles (trees, bulidings, caves) original name: .W
    for (var y=0; y<this.MAP_height; y++){
        this.MAP_land_array[y] = new Int32Array(this.MAP_width);
        this.MAP_feature_array[y] = new Int32Array(this.MAP_width);
    }
}

// map tiling
SR_map.prototype.MAPset = function(){ // uh.prototype.j
    var left_margin,right_margin,bottom_margin,top_margin;
    for (var y=0; y<this.MAP_height; y++){
        for (var x=0; x<this.MAP_width; x++)
            this.MAP_land_array[y][x] = -1; // reset map
    }
    for (var y=0; y<this.MAP_height; y++){
        for (var x=0; x<this.MAP_width; x++){
            var tile_pos = y*Map_Elev_Index.IG_width+x;
            if (x==0)
                 left_margin = 0;
            else left_margin = -1;
            if (x==this.MAP_width-1)
                 right_margin = 0;
            else right_margin = 1;
            if (y==0)
                 bottom_margin = 0;
            else bottom_margin = -this.MAP_width;
            if (y==this.MAP_height-1)
                 top_margin = 0;
            else top_margin = this.MAP_width;
            var below_left = Map_Elev_Index.IG_pxl_color_index[tile_pos+left_margin+bottom_margin];
            var below = Map_Elev_Index.IG_pxl_color_index[tile_pos+bottom_margin];
            var below_right = Map_Elev_Index.IG_pxl_color_index[tile_pos+right_margin+bottom_margin];
            var left_side = Map_Elev_Index.IG_pxl_color_index[tile_pos+left_margin];
            var right_side = Map_Elev_Index.IG_pxl_color_index[tile_pos+right_margin];
            var above_left = Map_Elev_Index.IG_pxl_color_index[tile_pos+left_margin+top_margin];
            var above = Map_Elev_Index.IG_pxl_color_index[tile_pos+top_margin];
            var above_right = Map_Elev_Index.IG_pxl_color_index[tile_pos+right_margin+top_margin];
            // set map tiles
            if (Map_Feature_Index.IG_pxl_color_index[tile_pos]==0x00FFFF){         // frozen lake color
                this.MAP_land_array[y][x] = 15;                                    // 15th tile in mt.gif
            } else if (Map_Feature_Index.IG_pxl_color_index[tile_pos]==0x660000){  // blood lake color
                this.MAP_land_array[y][x] = 17;                                    // 17th tile in mt.gif
            } else if (Map_Elev_Index.IG_pxl_color_index[tile_pos]!=0){
                if (Map_Elev_Index.IG_pxl_color_index[tile_pos]==0x003399){           // lake color
                    this.MAP_land_array[y][x] = 13;                                   // 13th tile in mt.gif
                } else if (Map_Feature_Index.IG_pxl_color_index[tile_pos]==0xFFCC66){ // desert color
                    this.MAP_land_array[y][x] = 14;                                   // 14th tile in mt.gif
                } else if (Map_Feature_Index.IG_pxl_color_index[tile_pos]==0x666666){ // hell tile color
                    this.MAP_land_array[y][x] = 16;                                   // 16th tile in mt.gif
                } else {
                    var tile_color = Map_Elev_Index.IG_pxl_color_index[tile_pos]; // the tile's color represents its height
                    if (tile_color<=below && tile_color<=left_side && tile_color<=right_side && tile_color<=above && tile_color>above_right)
                        this.MAP_land_array[y][x] = 3;
                    else if (tile_color<=below && tile_color<=left_side && tile_color<=right_side && tile_color<=above && tile_color>above_left)
                        this.MAP_land_array[y][x] = 4;
                    else if (tile_color<=below && tile_color<=left_side && tile_color<=right_side && tile_color<=above && tile_color>below_right)
                        this.MAP_land_array[y][x] = 8;
                    else if (tile_color<=below && tile_color<=left_side && tile_color<=right_side && tile_color<=above && tile_color>below_left)
                        this.MAP_land_array[y][x] = 9;
                    else if (tile_color>left_side && tile_color<=right_side && tile_color>below && tile_color<=above)
                        this.MAP_land_array[y][x] = 0;
                    else if (tile_color<=left_side && tile_color<=right_side && tile_color>below && tile_color<=above)
                        this.MAP_land_array[y][x] = 1;
                    else if (tile_color<=left_side && tile_color>right_side && tile_color>below && tile_color<=above)
                        this.MAP_land_array[y][x] = 2;
                    else if (tile_color>left_side && tile_color<=right_side && tile_color<=below && tile_color<=above)
                        this.MAP_land_array[y][x] = 5;
                    else if (tile_color<=left_side && tile_color>right_side && tile_color<=below && tile_color<=above)
                        this.MAP_land_array[y][x] = 7;
                    else if (tile_color>left_side && tile_color<=right_side && tile_color<=below && tile_color>above)
                        this.MAP_land_array[y][x] = 10;
                    else if (tile_color<=left_side && tile_color<=right_side && tile_color<=below && tile_color>above)
                        this.MAP_land_array[y][x] = 11;
                    else if (tile_color<=left_side && tile_color>right_side && tile_color<=below && tile_color>above)
                        this.MAP_land_array[y][x] = 12;
                }
            }
        }
    }
    for (var y=0; y<this.MAP_height; y++){ // set map features
        for (var x=0; x<this.MAP_width; x++){
            tile_pos = y*Map_Feature_Index.IG_width+x;
            this.MAP_feature_array[y][x] = -1;
            if (Map_Feature_Index.IG_pxl_color_index[tile_pos]==0x006600)      // tree pixel
                this.MAP_feature_array[y][x] = 0;
            else if (Map_Feature_Index.IG_pxl_color_index[tile_pos]==0x999999) // castle pixel
                this.MAP_feature_array[y][x] = 1;
            else if (Map_Feature_Index.IG_pxl_color_index[tile_pos]==0x804000) // cave mouth pixel
                this.MAP_feature_array[y][x] = 2;
            else if (Map_Feature_Index.IG_pxl_color_index[tile_pos]==0xCCFFFF) // snowy tree pixel
                this.MAP_feature_array[y][x] = 5;
            else if (Map_Feature_Index.IG_pxl_color_index[tile_pos]==0x003000) // dark tree pixel
                this.MAP_feature_array[y][x] = 6;
        }
    }
};

SR_map.prototype.MAPmain = function(){ // uh.prototype.b
    var dotpath_pos = new Vector2D;
    var dotpath_dist = new Vector2D;
    var fill1 = 0xFF;

    if (Mouse_Xpos<20 && Mouse_Ypos<DIRE_Inv_Top && Right_Click_Was_Down) // fix: hold down right click and move cursor to scroll map
    //if (Mouse_Xpos<20 && Mouse_Ypos<DIRE_Inv_Top) // original: hover near or past the edge to scoll map
        this.MAP_tile_horizontal_spacer = clamp(this.MAP_tile_horizontal_spacer+4,-720,0); // scroll map left
    else if (Mouse_Xpos>492 && Mouse_Ypos<DIRE_Inv_Top && Right_Click_Was_Down) // fix: hold down right click and move cursor to scroll map
    //else if (Mouse_Xpos>492 && Mouse_Ypos<DIRE_Inv_Top) // original: hover near or past the edge to scoll map
        this.MAP_tile_horizontal_spacer = clamp(this.MAP_tile_horizontal_spacer-4,-720,0); // scroll map right

    for (var y=0; y<this.MAP_height; y++){
        //for (var x=0; x<this.MAP_width; x++){
        //for (var x=(this.MAP_tile_horizontal_spacer-1)*16; x<this.MAP_width; x++){
        for (var x=(this.MAP_tile_horizontal_spacer-1)<<4; x<this.MAP_width; x++){
            if (this.MAP_land_array[y][x]!=-1){
                drawItem(Map_Tiles_Img,this.MAP_tile_horizontal_spacer+16*x,16*y,16,16,this.MAP_land_array[y][x]%5*16,16*floor(this.MAP_land_array[y][x]/5),16,16);
                //if (Debug_Mode==1 && this.MAP_tile_horizontal_spacer+16*x+8>0)
                    //largeMessage(Small_Text,this.MAP_tile_horizontal_spacer+16*x+8,16*y+9,""+this.MAP_land_array[y][x],0xAA,0x00,0x00,fill1,0,0,0,0,5,7); // map tile debug
            }
        }
    }
    var path_len;
    for (var s=0; s<Stage_Count; s++){
        if ((Stage_Status[s]&Beaten) != 0){
            for (var j=3; j<=4; j++){
                if (!(Dot_Locations[s][j]<=0) && s!=32 && s!=70 && s!=88){
                    dotpath_pos.x = 8*Dot_Locations[s][0];
                    dotpath_pos.y = 8*Dot_Locations[s][1];
                    dotpath_dist.x = 8*(Dot_Locations[Dot_Locations[s][j]][0]-Dot_Locations[s][0]);
                    dotpath_dist.y = 8*(Dot_Locations[Dot_Locations[s][j]][1]-Dot_Locations[s][1]);
                    path_len = Normalize(dotpath_dist)/8-1;
                    scaleVector2D(dotpath_dist,8);
                    dotpath_pos.Vadd(dotpath_dist);
                    for (var k=0; k<path_len; k++){
                        fillColor(this.MAP_tile_horizontal_spacer+dotpath_pos.x,dotpath_pos.y,2,2,0xCCCCCC); // dotted path from stage to stage on world map
                        dotpath_pos.Vadd(dotpath_dist);
                    }
                }
            }
        }
    }
    for (var y=0; y<this.MAP_height; y++){
        for (var x=0; x<this.MAP_width; x++){
            if (this.MAP_feature_array[y][x]!=-1)
                drawItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+16*x+8,16*y+8,16,16,16*this.MAP_feature_array[y][x],0,16,16);
            //if (Debug_Mode==1 && this.MAP_tile_horizontal_spacer+16*x+16>-16)
                //largeMessage(Small_Text,this.MAP_tile_horizontal_spacer+16*x+16,16*y+15,""+this.MAP_feature_array[y][x],0x55,0x55,0x55,fill1,0,0,0,0,5,7); // map tile debug
        }
    }
    /*
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+384-8,124,16,16,16,0,16,16,0xFF8080FF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+504-8,116,16,16,48,0,16,16,0xFFFFFFFF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+552-8,116,16,16,64,0,16,16,0xFFFFFFFF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+592-8,100,16,16,32,0,16,16,0xFFFFFFFF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+672-8,68,16,16,32,0,16,16,0xFFFFFFFF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+808-8,132,16,16,16,0,16,16,0xFFCCFFFF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+904-8,164,16,16,112,0,16,16,0xFFCCFFFF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+1040-8,172,16,16,128,0,16,16,0xFFCCFFFF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+1088-8,100,16,16,32,0,16,16,0xFFFFFFFF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+1160-8,84,16,16,32,0,16,16,0xFFFFFFFF);
    dispItem(Map_Features_Img,this.MAP_tile_horizontal_spacer+1112-8,44,32,16,144,0,32,16,0xFFFFFFFF);
    */

    var dot_color,dot_size;
    for (var s=0; s<Stage_Count; s++){ // stages dot colors
        if (Stage_Status[s]!=0){
            b = 8*Dot_Locations[s][0];
            path_len = 8*Dot_Locations[s][1];

            if (s==0||s==20||s==47||s==77)        // if town stages, dot is white
                dot_color = 0xFFFFFF;
            else if (s==33||s==71)                // if ??? or !!!, dot is black
                dot_color = 0x000000;
            else if ((Stage_Status[s]&Beaten)!=0) // if stage is complete
                dot_color = 0x990000;
            else                                  // if stage is not Beaten
                dot_color = 0xCCCC00;

            if (Dot_Locations[s][2]==0)
                fillColor(this.MAP_tile_horizontal_spacer+b,path_len,6,6,dot_color);

            if (s==71)
                 dot_size = 3;
            else dot_size = 24;

            if (isMouseHoveredCenter(this.MAP_tile_horizontal_spacer+b,path_len,dot_size,dot_size))
                drawRectCentered(this.MAP_tile_horizontal_spacer+b,path_len,dot_size,dot_size,0xCC0000);
        }
    }
    var last_stage_xpos = 8*Dot_Locations[Current_Stage][0];
    last_stage_ypos = 8*Dot_Locations[Current_Stage][1];
    drawItem(Player_Img,this.MAP_tile_horizontal_spacer+last_stage_xpos+1-12,last_stage_ypos-14-11,24,22,0,0,24,22);
    for (var s=0; s<Stage_Count; s++){
        if (Stage_Status[s]!=0){
            last_stage_xpos = 8*Dot_Locations[s][0];
            last_stage_ypos = 8*Dot_Locations[s][1];
            if (s==71) // if !!! stage
                 dot_size = 3;
            else dot_size = 24;

            if (0<Mouse_Xpos && Mouse_Xpos<Win_Width && isMouseHoveredCenter(this.MAP_tile_horizontal_spacer+last_stage_xpos,last_stage_ypos,dot_size,dot_size)){
                if (!Clicked || s!=0 && s!=20 && s!=47 && s!=70 && s!=77){
                    if (Clicked && s!=0){
                        Current_Stage = s;
                        Current_Screen = 0;
                        Sequence_Step = 10;
                    }
                } else {
                   Current_Stage = s;
                   Current_Screen = 1;
                   Sequence_Step = 50;
                }
                last_stage_xpos = clamp(Mouse_Xpos,1+4*Stage_Names[s].length,510-4*Stage_Names[s].length);
                last_stage_ypos = clamp(Mouse_Ypos-24,8,DIRE_Inv_Top);
                textBox(Large_Text,last_stage_xpos,last_stage_ypos,Stage_Names[s],0xFFFFFF,0x505050);
            }
        }
    }
    Large_Text.Q = 4;
    textBox(Large_Text,DIRE_Inv_Top,16,"World Map",-1,0xC8C8C8); // Top of map screen
    Large_Text.Q = 0;
    if (this.MAP_tile_horizontal_spacer<0)
        textBox(Large_Text,12,16,"<<",0xC8C8C8,0x505050);
    if (this.MAP_tile_horizontal_spacer>-720)
        textBox(Large_Text,500,16,">>",0xC8C8C8,0x505050);
};

var cv = document.getElementById("cv");                      // original name: We
var ctx = cv.getContext("2d");                               // original name: wh
var My_Img_Data = ctx.createImageData(Win_Width,Win_Height); // original name: xh
var Bit_8_Color = new Uint8Array(My_Img_Data.data.buffer);     // original name: Bit_8_Color
//var yh = window.console;
//var zg = String.fromCharCode;
//var of = setTimeout;
var Host_Name = "dan-ball.jp"; // zh=location.hostname;

window.fff = putImageData;
function putImageData(image_data,dx,dy){ // original name: Ah()
    try {
        cv = document.getElementById("cv");
        ctx = cv.getContext("2d");
        ctx.putImageData(image_data,dx,dy);
    } catch(d){}
}

window.fff = logCopyright;
function logCopyright(a){ // original name: Ue()
    try {
        window.console.log(a);
    } catch(b){}
}

// frame rate
window.Init = gameStartup;
var Hg = "(C) 2008 ha55ii DAN-BALL.jp";                     // original name: Hg
var Ve = "Copyright (C) 2008 ha55ii DAN-BALL.jp";           // original name: Ve
var Bh = "./data/";                                         // original name: Bh
var Af = "fps";                                             // original name: Af
var Ch = "canvas";                                          // original name: Ch
var Dh = "2d";                                              // original name: Dh
var Check_Host2 = 0;                                        // original name: Eh
var Host_Site = "dan-ball.jp";                              // original name: Fh
var Game_Canvas = new Int32Array(Win_Width*Win_Height);     // original name: C
var Layer1 = new Int32Array(Win_Height);                    // original name: jh
var Layer2 = new Int32Array(Win_Height);                    // original name: kh
var Layer3 = new Float32Array(Win_Height);                  // original name: nh
var Layer4 = new Float32Array(Win_Height);                  // original name: mh
var Layer5 = new Float32Array(Win_Height);                  // original name: ph
var Layer6 = new Float32Array(Win_Height);                  // original name: oh

function mainSequence(){ // original name: rf()
    if (Animation_Frame){
        Animation_Frame(mainSequence);
        Animation_Frame_Counter++;
        Time_Current = Date.now();
        var game_ticks_passed = floor(DIRE_Ticks_Per_Second*(Time_Current-Time_Prev)/1000+0.5);

        if (game_ticks_passed<0 || DIRE_Ticks_Per_Second<=game_ticks_passed){
            Animation_Frame_Counter = 0;
            Frame_Rate = Frame_Counter;
            Frame_Counter = 0;
            Time_Per_Second = floor((2*Time_Per_Second+Time_Period1)/3);
            Time_Period1 = 0;
            Time_Prev = Time_Current;
            game_ticks_passed = 0;
        } else if (game_ticks_passed==Prev_Game_Ticks_Passed){
            return;
        }
        Frame_Counter++;
        Prev_Game_Ticks_Passed = game_ticks_passed;
    }

    Clicked = Left_Click_Is_Down && !Left_Click_Was_Down;
    Released = !Left_Click_Is_Down && Left_Click_Was_Down;
    Right_Click_Released = !Right_Click_Is_Down && Right_Click_Was_Down;
    Left_Click_Was_Down = Left_Click_Is_Down;
    Right_Click_Was_Down = Right_Click_Is_Down;
    Left_Click_Is_Up = !(Released|Left_Click_Was_Down|Right_Click_Released|Right_Click_Was_Down);

    if (Clicked) {
        //PlaySound(snd_click, false);
    }

    if (Released)
        Sett_Change = 1;
    else if (Right_Click_Released)
        Sett_Change = -1;
    else
        Sett_Change = 0;

    Mouse_Xpos = Mouse_Xpos2;
    Mouse_Ypos = Mouse_Ypos2;
    for (var h=0; h<256; h++){
        Arr256_1[h] = Arr256_2[h];
        Arr256_2[h] = false;
    }
    Rand_EF = Rand_EF+floor(1024*Math.random())&1023;
    Rand_FF = floor(512*Math.random())|1;
    playSequence();

    var area;
    if (Check_Host2==11)
         area = Win_Width*Win_Height;
    else area = 0;

    var b = 0;
    for (var i=0; i<area; i++){
        Bit_8_Color[b++] = Game_Canvas[i]>>16&0xFF;
        Bit_8_Color[b++] = Game_Canvas[i]>>8&0xFF;
        Bit_8_Color[b++] = Game_Canvas[i]&0xFF;
        b++;
    }
    putImageData(My_Img_Data,0,0);

    if (Animation_Frame)
        Time_Period1 += Date.now()-Time_Current;
    else
        setTimeout(mainSequence,timePF());
}

var Check_Host1 = 1;
function checkFalseHost(){ // original name: jf()
    if (Host_Name.length!=Host_Site.length)
        return true;
    for (Check_Host1=0; Check_Host2<Host_Name.length; Check_Host2++){
        if (Host_Name[Check_Host2] != Host_Site[Check_Host2])
            return true;
    }
    return false;
}

var Animation_Frame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame; // original name: Gh
var Animation_Frame_Counter = 0;   // original name: Hh
var Prev_Game_Ticks_Passed = 0;    // original name: Mh
var Frame_Counter = 0;             // original name: Kh
var Frame_Rate = 0;                // original name: zf
var Time_Period1 = 0;              // original name: Lh
var Time_Per_Second = 0;           // original name: Bf
var Time_Increment1 = 20;          // original name: Th
var Time_Current = Date.now();     // original name: Ih
var Time_Prev = Time_Current;      // original name: Jh
var Time_Future = Time_Current+20; // original name: Uh
var Time_Min = Time_Current;       // original name: Vh
var Time_Desert_Haze = 0;          // original name: Ig
function timePF(){ // original name: pf()
    Time_Current = Date.now();
    var time_next = clamp(Time_Future-Time_Current,5,20);
    Frame_Counter++;
    Time_Desert_Haze++;
    Time_Period1 += time_next;
    Time_Future += 20;
    if (Time_Min<=Time_Current+time_next || Time_Current<Time_Prev){
        Time_Per_Second = Time_Per_Second+Time_Period1>>1;
        Time_Period1 = 0;
        Frame_Rate = Frame_Counter;
        Frame_Counter = 0;
        Time_Future = Time_Current+20;
        Time_Min = Time_Current+1000; // minimum time increment is one second
    }
    Time_Prev = Time_Current;
    return time_next;
}

var Tile_Counter1 = 0;
function SR_Image(){ // original name: wa()
    this.IG_image = 0;           // image                  original name: .Z
    this.IG_file = "";           // filename               original name: .file
    this.IG_ib = 0;              //                        original name: .ib
    this.IG_ca = 0;              //                        original name: .ca
    this.IG_Xa = 0;              //                        original name: .Xa
    this.IG_you = 0;             //                        original name: .u
    this.IG_dimensions = 0;      // dimensions             original name: .d
    this.IG_pxl_color_index = 0; // array of pixels' color original name: .f
    this.IG_shift = 0;           //                        original name: .shift
    this.IG_height = 0;          // height                 original name: .s
    this.IG_width = 0;           // width                  original name: .i
}

function setArea(image,width,height){ // original name: qf()
    image.IG_width = width;
    image.IG_height = height;
    image.IG_shift = 0;
    for (var i=0; i<16; i++){
        if (image.IG_width == 1<<width)
            image.IG_shift = width;
    }
    image.IG_pxl_color_index = new Int32Array(image.IG_width*image.IG_height);
}

SR_Image.prototype.IGset = function(name){ // wa.prototype.j
    if (this.IG_file!=name){
        Tile_Counter1++;
        this.IG_file = name;
        this.IG_image = new Image;
        this.IG_image.src = "./data/"+name+"?18.9";
        delete this.IG_pxl_color_index;
        this.IG_dimensions = 0;
        this.IG_pxl_color_index = 0;
    }
};

function imgToArray(image_var){ // original name: mf()
    if (image_var.IG_dimensions==0 && image_var.IG_image.complete){
        Tile_Counter1--;
        var w = image_var.IG_image.width;
        var h = image_var.IG_image.height;

        if (w==0 || h==0)
            throw delete image_var.IG_image, image_var.IG_file = "", "ERROR";

        var canvas1 = document.createElement('canvas');
        canvas1.width = w;
        canvas1.height = h;
        canvas1 = canvas1.getContext("2d");
        canvas1.drawImage(image_var.IG_image,0,0);
        canvas1 = canvas1.getImageData(0,0,w,h).data;
        setArea(image_var,w,h);

        for (var i=0; i<canvas1.length; i+=4){

            if (canvas1[i+3]==0) // if pixel is invisible
                 image_var.IG_pxl_color_index[i>>2] = -1;
            else image_var.IG_pxl_color_index[i>>2] = canvas1[i+0]<<16|canvas1[i+1]<<8|canvas1[i+2];
        }

        delete image_var.IG_image;
        image_var.IG_dimensions = 1;
    }
}

function doVSModeText(vsmode_var,message){ // original name: vg()
    if (vsmode_var.IG_dimensions==0){
        vsmode_var.IG_dimensions = 1;
        setArea(vsmode_var,Win_Width,16);
        vsmode_var.IG_Xa = document.createElement('canvas');
        vsmode_var.IG_Xa.width = vsmode_var.IG_width;
        vsmode_var.IG_Xa.height = vsmode_var.IG_height;
        vsmode_var.IG_ca = vsmode_var.IG_Xa.getContext("2d");
    }
    var c = message+"sans-serif014";
    if (vsmode_var.IG_ib!=c){
        vsmode_var.IG_ib = c;
        vsmode_var.IG_ca.fillStyle = "#000000";
        vsmode_var.IG_ca.fillRect(0,0,vsmode_var.IG_width,vsmode_var.IG_height);
        c = "14px sans-serif";
        vsmode_var.IG_ca.font = c;
        vsmode_var.IG_ca.fillStyle = "#ffffff";
        vsmode_var.IG_ca.fillText(message,0,14);
        for (var i=vsmode_var.IG_ca.getImageData(0,0,vsmode_var.IG_width,vsmode_var.IG_height).data,c=0,e=i.length; c<e; c+=4)
            vsmode_var.IG_pxl_color_index[c>>2] = 1<=i[c+0]? 0xFFFFFF :-1;
        c = vsmode_var.IG_you = 0;
        for (var h=0; h<vsmode_var.IG_height; h++){
            for (var w=0; w<vsmode_var.IG_width; w++,c++){
                if (vsmode_var.IG_pxl_color_index[c]==0xFFFFFF && vsmode_var.IG_you<=w)
                    vsmode_var.IG_you = w+1;
            }
        }
    }
}

var PvP_Text_Spaces = [[0,2,0,0,1,0,0,2,2,1,1,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,2,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,1,0,2,0,0,0,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,3,1,0],
                       [0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0]];
var PVE_Text_Spaces = [[0,1,1,0,0,0,0,2,1,2,0,0,2,1,2,0,0,0,0,0,0,0,0,0,0,0,2,2,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,1,0,2,0,0,0,0,0,0,0,0,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0],
                       [0,1,0,0,0,0,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0]];
var Large_Text = new SR_Text; // D = new Zh
var Small_Text = new SR_Text; // hf = new Zh
function SR_Text(){ // original name: Zh()
    this.TX_image = new SR_Image; // source image for the text original name: .N
    this.TX_start_pos = 0;        // unused?                   original name: .P
    this.TX_spacing = 0;          // space between each letter original name: .Q
    this.TX_height = 0;           // height of each letter     original name: .$a
    this.TX_width = 0;            // width of each letter      original name: .R
}

SR_Text.prototype.TXset = function(image,width,height){ // original name: Zh.prototype.j
    this.TX_image.IGset(image);
    this.TX_width = width;
    this.TX_height = height;
    this.TX_start_pos = 0;
    this.TX_spacing = 0;
};
if (Selected_Player==0){
SR_Text.prototype.TXoutput = function(x_pos,y_pos,message,fill_color,outline_color){ // original name: Zh.prototype.b
    var screen_pos,index_pos,px_color,n;
    var screen_newline = Win_Width-this.TX_width;
    var index_newline = this.TX_image.IG_width-this.TX_width;

    if (fill_color > -1)
         var fill_pixel = 0xFFFFFF;
    else var fill_pixel = 1;
    if (outline_color > -1)
         var outline_pixel = 0;
    else var outline_pixel = 1;

    for (var i=0; i<message.length; i++, x_pos += this.TX_width+this.TX_spacing){
        var lett = message.charCodeAt(i)-32;
        if (lett!=0){
            if (lett>=96)
                lett = 31;

            if (this.TX_start_pos!=0)
                x_pos -= PvP_Text_Spaces[this.TX_start_pos-1][lett];

            index_pos = lett*this.TX_width;
            screen_pos = y_pos*Win_Width+x_pos;

            for (var h=0; h<this.TX_height; h++,screen_pos+=screen_newline,index_pos+=index_newline){
                for (var w=0; w<this.TX_width; w++,screen_pos++,index_pos++){
                    px_color = this.TX_image.IG_pxl_color_index[index_pos];
                    if (px_color==fill_pixel)
                        Game_Canvas[screen_pos] = fill_color;
                    else if (px_color==outline_pixel)
                        Game_Canvas[screen_pos] = outline_color;
                }
            }
            if (this.TX_start_pos!=0)
                x_pos -= PVE_Text_Spaces[this.TX_start_pos-1][lett];
        }
    }
    this.TX_start_pos = 0;
};
}else {
SR_Text.prototype.TXoutput=function(x_pos,y_pos,message,fill_color,outline_color){
	var c,x,y,screen_pos,lett,index_pos,px_color,screen_newline=Win_Width-this.TX_width,index_newline=this.TX_image.IG_width-this.TX_width,
		fill_pixel=-1<fill_color?16777215:1,
		outline_pixel=-1<outline_color?0:1,
		Ea=message.length;

	for(c=0;c<Ea;c++,x_pos+=this.TX_width+this.TX_spacing)
		if(lett=message.charCodeAt(c)-32,0!=lett){
			96<=lett&&
				(lett=31);
			0!=this.TX_start_pos&&
				(x_pos-=PvP_Text_Spaces[this.TX_start_pos-1][lett]);

			index_pos=lett*this.TX_width;
			screen_pos=y_pos*Win_Width+x_pos;
			for(y=0;y<this.TX_height;y++,screen_pos+=screen_newline,index_pos+=index_newline)
				for(x=0;x<this.TX_width;x++,screen_pos++,index_pos++)
					px_color=this.TX_image.IG_pxl_color_index[index_pos],
					px_color==fill_pixel?Game_Canvas[screen_pos]=fill_color
					:px_color==outline_pixel&&(Game_Canvas[screen_pos]=outline_color);
					0!=this.TX_start_pos&&
						(x_pos-=PVE_Text_Spaces[this.TX_start_pos-1][lett])
		}
	this.TX_start_pos=0
};
}


function textBox(text,x_pos,y_pos,message,fill_color,outline_color){ // original name: yf()
    x_pos -= message.length*(text.TX_width+text.TX_spacing)>>1;
    y_pos -= text.TX_height>>1;
    text.TXoutput(x_pos,y_pos,message,fill_color,outline_color);
}

function itemText(x_pos,y_pos,text,fill_color,outline_color,g){ // original name: hg()
    Large_Text.TX_spacing = g;
    Large_Text.TXoutput(x_pos,y_pos,text,fill_color,outline_color);
    Large_Text.TX_spacing = 0;
}

SR_Text.prototype.TXvsModeOutput = function(x_pos,y_pos,message,fill_R,fill_G,fill_B,fill_opacity,outline_R,outline_G,outline_B,outline_opacity,width,height){ // original name: Zh.prototype.M
    var pixel_pos,character1,width1,px_color,lett_height,lett_width,default_fill,default_outline;
    var newline = Win_Width-width;

    fill_R = fill_R*fill_opacity>>8;
    fill_G = fill_G*fill_opacity>>8;
    fill_B = fill_B*fill_opacity>>8;
    fill_opacity = 0xFF-fill_opacity;

    outline_R = outline_R*outline_opacity>>8;
    outline_G = outline_G*outline_opacity>>8;
    outline_B = outline_B*outline_opacity>>8;
    outline_opacity = 0xFF-outline_opacity;

    if (fill_opacity!=0xFF)
         default_fill = 0xFFFFFF;
    else default_fill = 1;
    if (outline_opacity!=0xFF)
         default_outline = 0;
    else default_outline = 1;

    for (var c=0; c<message.length; c++,x_pos+=width+this.TX_spacing){
        character1 = message.charCodeAt(c)-32;
        if (character1!=0){
            if (character1 >= 96)
                character1 = 31;
            if (this.TX_start_pos!=0)
                x_pos -= floor(PvP_Text_Spaces[this.TX_start_pos-1][character1]*width/this.TX_width);

            width1 = character1*this.TX_width;
            pixel_pos = y_pos*Win_Width+x_pos;

            for (var y=0; y<height; y++,pixel_pos+=newline){
                lett_height = floor(y*this.TX_height/height)*this.TX_image.IG_width+width1<<8;
                lett_width = floor((this.TX_width<<8)/width);
                for (var x=0; x<width; x++,pixel_pos++,lett_height+=lett_width){
                    px_color = this.TX_image.IG_pxl_color_index[lett_height>>8];
                    if (px_color==default_fill){
                        px_color = Game_Canvas[pixel_pos];
                        Game_Canvas[pixel_pos] = fill_R+((px_color>>16&0xFF)*fill_opacity>>8)<<16|fill_G+((px_color>>8&0xFF)*fill_opacity>>8)<<8|fill_B+((px_color&0xFF)*fill_opacity>>8);
                    } else if (px_color==default_outline){
                        px_color = Game_Canvas[pixel_pos];
                        Game_Canvas[pixel_pos] = outline_R+((px_color>>16&0xFF)*outline_opacity>>8)<<16|outline_G+((px_color>>8&0xFF)*outline_opacity>>8)<<8|outline_B+((px_color&0xFF)*outline_opacity>>8);
                    }
                }
            }
            if (this.TX_start_pos!=0)
                x_pos -= floor(PVE_Text_Spaces[this.TX_start_pos-1][character1]*width/this.TX_width);
        }
    }
    this.TX_start_pos = 0;
};

function largeMessage(text,x_pos,y_pos,message,fill_R,fill_G,fill_B,fill_opacity,outline_R,outline_G,outline_B,outline_opacity,widthvar,heightvar){ // original name: Gf()
    x_pos -= message.length*(widthvar+text.TX_spacing) >> 1;
    text.TXvsModeOutput(x_pos,y_pos-(heightvar>>1),message,fill_R,fill_G,fill_B,fill_opacity,outline_R,outline_G,outline_B,outline_opacity,widthvar,heightvar);
}

// fade in/fade out of text when entering stages?
function screenTransition(color){ // original name: Vf()
    var alpha,R,G,B;
    for (var i=0; i<Win_Height*Win_Width; i++){
        alpha = Game_Canvas[i]>>16&0xFF;
        R = ((0-alpha)*color>>8)+alpha;
        alpha = Game_Canvas[i]>>8&0xFF;
        G = ((0-alpha)*color>>8)+alpha;
        alpha = Game_Canvas[i]&0xFF;
        B = ((0-alpha)*color>>8)+alpha;
        Game_Canvas[i] = R<<16|G<<8|B;
    }
}

var Display_Mode = 0; // original name: Xf
function colorBlend(pixel_color,top_color,bottom_color){ // original name: qh()
    if (pixel_color!=0)
        pixel_color = pixel_color;
    var mode = Display_Mode;
    var alpha = 0;
    var R = 0;
    var G = 0;
    var B = 0;

    if (mode==1){
        alpha = pixel_color>>16&0xFF;
        R = (((top_color>>16&0xFF)-alpha)*bottom_color>>8)+alpha;
        alpha = pixel_color>>8&0xFF;
        G = (((top_color>>8&0xFF)-alpha)*bottom_color>>8)+alpha;
        alpha = pixel_color&0xFF;
        B = (((top_color&0xFF)-alpha)*bottom_color>>8)+alpha;
    } else if (mode==2){
        R = ((top_color>>16&0xFF)*bottom_color>>8)+(pixel_color>>16&0xFF);
        if (R>0xFF)
            R = 0xFF;
        G = ((top_color>>8&0xFF)*bottom_color>>8)+(pixel_color>>8&0xFF);
        if (G>0xFF)
            G = 0xFF;
        B = ((top_color&0xFF)*bottom_color>>8)+(pixel_color&0xFF);
        if (B>0xFF)
            B = 0xFF;
    } else if (mode==3){
        R = (pixel_color>>16&0xFF)-((top_color>>16&0xFF)*bottom_color>>8);
        if (R<0)
            R = 0;
        G = (pixel_color>>8&0xFF)-((top_color>>8&0xFF)*bottom_color>>8);
        if (G<0)
            G = 0;
        B = (pixel_color&0xFF)-((top_color&0xFF)*bottom_color>>8);
        if (B<0)
            B = 0;
    } else if (mode==4){
        R = (top_color>>16&0xFF)*(pixel_color>>16&0xFF)>>8;
        G = (top_color>>8&0xFF)*(pixel_color>>8&0xFF)>>8;
        B = (top_color&0xFF)*(pixel_color&0xFF)>>8;
    } else if (mode==5){
        alpha = pixel_color>>16&0xFF;
        R = alpha+((top_color>>16&0xFF)*alpha*bottom_color>>16);
        if (R>0xFF)
            R = 0xFF;
        alpha = pixel_color>>8&0xFF;
        G = alpha+((top_color>>8&0xFF)*alpha*bottom_color>>16);
        if (G>0xFF)
            G = 0xFF;
        alpha = pixel_color&0xFF;
        B = alpha+((top_color&0xFF)*alpha*bottom_color>>16);
        if (B>0xFF)
            B = 0xFF;
    } else if (mode==6){
        alpha = pixel_color>>16&0xFF;
        R = alpha+(bottom_color-(2*alpha*bottom_color>>8));
        alpha = pixel_color>>8&0xFF;
        G = alpha+(bottom_color-(2*alpha*bottom_color>>8));
        alpha = pixel_color&0xFF;
        B = alpha+(bottom_color-(2*alpha*bottom_color>>8));
    }

    return R<<16|G<<8|B;
}

var Display_Mode2 = 0; // original name: dg
function drawLine(pointA_x_pos,pointA_y_pos,pointB_x_pos,pointB_y_pos,color){ // L()
    var width = pointB_x_pos - pointA_x_pos;
    var height = pointB_y_pos - pointA_y_pos;
    var pixel_pos,distance;

    if (absVal(width) >= absVal(height)){
        distance = floor(absVal(width));
        if (distance!=0) height = floor(65536*height/distance);
        if (width>=0)    width = 65536;
        else             width = -65536;
    } else {
        distance = floor(absVal(height));
        if (distance!=0) width = floor(65536*width/distance);
        if (height>=0)   height = 65536;
        else             height = -65536;
    }

    pointA_x_pos = floor(65536*pointA_x_pos)+32768;
    pointA_y_pos = floor(65536*pointA_y_pos)+32768;

    for (var i=distance; i>=0; i--){
        if (pointA_x_pos>=0 && pointA_x_pos>>16 < Win_Width && pointA_y_pos>=0 && pointA_y_pos>>16 < Win_Height){
            pixel_pos = (pointA_y_pos>>16)*Win_Width+(pointA_x_pos>>16);

            if (Display_Mode==0)
                 Game_Canvas[pixel_pos] = color;
            else Game_Canvas[pixel_pos] = colorBlend(Game_Canvas[pixel_pos],color,color>>24&0xFF);
        }
        pointA_x_pos += width;
        pointA_y_pos += height;
    }
}

function drawRect(left,top,width,height,color){ // original name: bg()
    width--;
    height--;
    drawLine(left,top,left+width,top,color);
    drawLine(left,top+height,left+width,top+height,color);
    drawLine(left,top,left,top+height,color);
    drawLine(left+width,top,left+width,top+height,color);
}

function drawRectCentered(x_pos,y_pos,width,height,color){ // original name: If()
    var left = x_pos-(width>>1);
    var top = y_pos-(height>>1);
    drawRect(left,top,width,height,color);
}

function drawButton(left,top,width,height,color){ // original name: V()
    var right,bottom,curr_pixel;
    if (left+width>Win_Width)
         right = Win_Width;
    else right = ~~(left+width);
    if (top+height>Win_Height)
         bottom = Win_Height;
    else bottom = ~~(top+height);
    if (left<0)
         left = 0;
    else left = ~~left;
    if (top<0)
         top = 0;
    else top = ~~top;

    for (var y=top; y<bottom; y++){
        for (var x=left; x<right; x++)
            if (Display_Mode==0)
                 Game_Canvas[y*Win_Width+x] = color;
            else Game_Canvas[y*Win_Width+x] = colorBlend(Game_Canvas[y*Win_Width+x],color,color>>24&0xFF);
    }
}

function fillColor(xpos,ypos,width,height,color){ // original name: Hf()
    drawButton(xpos-(width>>1),ypos-(height>>1),width,height,color);
}

function drawItem(image,left,top,width,height,source_left,source_top,source_width,source_height){ // original name: ag()
    var right,bottom;
    if (left>-16){
        if (left<0)
            source_left += -left;
        if (top<0)
            source_top += -top;
        if (left+width>Win_Width)
             right = Win_Width;
        else right = ~~(left+width);
        if (top+height>Win_Height)
             bottom = Win_Height;
        else bottom = ~~(top+height);
        if (left<0)
             left = 0;
        else left = ~~left;
        if (top<0)
             top = 0;
        else top = ~~top;

        for (var y=top; y<bottom; y++){
            for (var x=left; x<right; x++){
                color = image.IG_pxl_color_index[(y-top+source_top)*image.IG_width+(x-left+source_left)];
                if (color!=-1)
                    Game_Canvas[y*Win_Width+x] = color;
            }
        }
    }
}

function dispItem(image_src,img_Xpos,img_Ypos,img_width,img_height,src_Xpos,src_Ypos,src_width,src_height,color){ // dispItem()
    var transparency;
    if (img_width!=0 && img_height!=0){
        src_width = floor((src_width<<8)/img_width);
        src_height = floor((src_height<<8)/img_height);

        src_Xpos <<= 8;
        src_Ypos <<= 8;

        if (img_Xpos < 0)
            src_Xpos += src_width*-img_Xpos;
        if (img_Ypos < 0)
            src_Ypos += src_height*-img_Ypos;

        if (Win_Width < img_Xpos+img_width)
             img_width = Win_Width;
        else img_width = floor(img_Xpos+img_width);

        if (Win_Height < img_Ypos+img_height)
             img_height = Win_Height;
        else img_height = floor(img_Ypos+img_height);

        if (img_Xpos < 0)
             img_Xpos = 0;
        else img_Xpos = floor(img_Xpos);

        if (img_Ypos < 0)
             img_Ypos = 0;
        else img_Ypos = floor(img_Ypos);

        var alpha = color>>24&0xFF;
        var red = color>>16&0xFF;
        var green = color>>8&0xFF;
        var blue = color&0xFF;
        var R,G,B;

        if (Display_Mode2==0){
            for (; img_Ypos<img_height; img_Ypos++, src_Ypos+=src_height){
                var j = img_Ypos*Win_Width+img_Xpos;
                var k = ((src_Ypos>>8)*image_src.IG_width<<8)+src_Xpos;
                for (var l=img_Xpos; l<img_width; l++, j++, k+=src_width){
                    transparency = image_src.IG_pxl_color_index[k>>8];

                    if (transparency!=-1){
                        R = red*(transparency>>16&0xFF)>>8;
                        G = green*(transparency>>8&0xFF)>>8;
                        B = blue*(transparency&0xFF)>>8;

                        if (Display_Mode==0){
                            Game_Canvas[j] = R<<16|G<<8|B;
                        } else if (Display_Mode==1){
                            transparency = Game_Canvas[j]>>16&0xFF;
                            R = ((R-transparency)*alpha>>8)+transparency;
                            transparency = Game_Canvas[j]>>8&0xFF;
                            G = ((G-transparency)*alpha>>8)+transparency;
                            transparency = Game_Canvas[j]&0xFF;
                            B = ((B-transparency)*alpha>>8)+transparency;
                            Game_Canvas[j] = R<<16|G<<8|B;
                        } else if (Display_Mode==2){
                            R = (R*alpha>>8)+(Game_Canvas[j]>>16&0xFF);
                            if (R>0xFF)
                                R = 0xFF;
                            G = (G*alpha>>8)+(Game_Canvas[j]>>8&0xFF);
                            if (G>0xFF)
                                G = 0xFF;
                            B = (B*alpha>>8)+(Game_Canvas[j]&0xFF);
                            if (B>0xFF)
                                B = 0xFF;
                            Game_Canvas[j] = R<<16|G<<8|B;
                        } else if (Display_Mode==5){
                            transparency = Game_Canvas[j]>>16&0xFF;
                            R = transparency+(R*transparency*alpha>>16);
                            if (R > 0xFF)
                                R = 0xFF;
                            transparency = Game_Canvas[j]>>8&0xFF;
                            G = transparency+(G*transparency*alpha>>16);
                            if (G > 0xFF)
                                G = 0xFF;
                            transparency = Game_Canvas[j]&0xFF;
                            B = transparency+(B*transparency*alpha>>16);
                            if (B > 0xFF)
                                B = 0xFF;
                            Game_Canvas[j] = R<<16|G<<8|B;
                        }
                    }
                }
            }
        } else if (Display_Mode2==1){
            for (; img_Ypos<img_height; img_Ypos++,src_Ypos+=src_height){
                var j = img_Ypos*Win_Width+img_Xpos;
                var k = ((src_Ypos>>8)*image_src.IG_width<<8)+src_Xpos;
                for (var l=img_Xpos; l<img_width; l++,j++,k+=src_width){
                    transparency = alpha*(image_src.IG_pxl_color_index[k>>8]&0xFF)>>8;

                    if (transparency!=0){
                        if (Display_Mode==1){
                            R = Game_Canvas[j]>>16&0xFF;
                            R = ((red-R)*transparency>>8)+R;
                            G = Game_Canvas[j]>>8&0xFF;
                            G = ((green-G)*transparency>>8)+G;
                            B = Game_Canvas[j]&0xFF;
                            B = ((blue-B)*transparency>>8)+B;
                            Game_Canvas[j]=R<<16|G<<8|B;
                        } else if (Display_Mode==2){
                            R = (Game_Canvas[j]>>16&0xFF)+(red*transparency>>8);
                            if (R>0xFF)
                                R = 0xFF;
                            G = (Game_Canvas[j]>>8&0xFF)+(green*transparency>>8);
                            if (G>0xFF)
                                G = 0xFF;
                            B = (Game_Canvas[j]&0xFF)+(blue*transparency>>8);
                            if (B>0xFF)
                                B = 0xFF;
                            Game_Canvas[j] = R<<16|G<<8|B;
                        } else if (Display_Mode==3){
                            R = (Game_Canvas[j]>>16&0xFF)-transparency;
                            if (R<0)
                                R = 0;
                            G = (Game_Canvas[j]>>8&0xFF)-transparency;
                            if (G<0)
                                G = 0;
                            B = (Game_Canvas[j]&0xFF)-transparency;
                            if (B<0)
                                B = 0;
                            Game_Canvas[j] = R<<16|G<<8|B;
                        } else {
                            Game_Canvas[j] = colorBlend(Game_Canvas[j],color,transparency);
                        }
                    }
                }
            }
        } else if (Display_Mode2==2){
            for (; img_Ypos<img_height; img_Ypos++,src_Ypos+=src_height){
                var j = img_Ypos*Win_Width+img_Xpos;
                var k = ((src_Ypos>>8)*image_src.IG_width<<8)+src_Xpos;
                for (var l=img_Xpos; l<img_width; l++,j++,k+=src_width){
                    transparency = image_src.IG_pxl_color_index[k>>8];

                    if (transparency!=0){
                        R = transparency>>16&0xFF;
                        G = transparency>>8&0xFF;
                        B = transparency&0xFF;

                        if (R==G && B==G)
                             Game_Canvas[j] = red*R>>8<<16|green*G>>8<<8|blue*B>>8;
                        else Game_Canvas[j] = R<<16|G<<8|B;
                    }
                }
            }
        } else if (Display_Mode2==3){
            for (; img_Ypos<img_height; img_Ypos++, src_Ypos+=src_height){
                var j = img_Ypos*Win_Width+img_Xpos;
                var k = ((src_Ypos>>8)*image_src.IG_width<<8)+src_Xpos;
                for (var l=img_Xpos; l<img_width; l++, j++, k+=src_width){
                    transparency = alpha*(image_src.IG_pxl_color_index[k>>8]&0xFF)>>8;

                    if (transparency!=0){
                        if (Display_Mode==1){
                            Game_Canvas[j] = ((0xFF-Game_Canvas[j])*transparency>>8)+Game_Canvas[j];
                        } else if (Display_Mode==2){
                            R = (Game_Canvas[j]>>16&0xFF)+(red*transparency>>8);
                            if (R > 0xFF)
                                R = 0xFF;
                            G = (Game_Canvas[j]>>8&0xFF)+(green*transparency>>8);
                            if (G > 0xFF)
                                G = 0xFF;
                            B = (Game_Canvas[j]&0xFF)+(blue*transparency>>8);
                            if (B > 0xFF)
                                B = 0xFF;
                            Game_Canvas[j] = R<<16|G<<8|B;
                        } else if (Display_Mode==3){
                            transparency = Game_Canvas[j]-transparency;
                            if (transparency<0)
                                transparency = 0;
                            Game_Canvas[j] = transparency;
                        }
                    }
                }
            }
        }
    }
}

function dispItemCentered(image,x_pos,y_pos,width,height,src_Xpos,src_Ypos,src_width,src_height,color){ // original name: J()
    dispItem(image,x_pos-(width>>1),y_pos-(height>>1),width,height,src_Xpos,src_Ypos,src_width,src_height,color);
}

function backgroundFill(left,top,width,height,color){ // original name: Og()
    var right,bottom;
    if (left+width>Win_Width)
         right = Win_Width;
    else right = left+width;
    if (top+height>Win_Height)
         bottom = Win_Height;
    else bottom = top+height;
    if (left<0)
         left = 0;
    else left = ~~left;
    if (top<0)
         top = 0;
    else top = ~~top;

    for (var y=top; y<bottom; y++){
        for (var x=left; x<right; x++){
            if (Game_Canvas[y*Win_Width+x]==0) // if pixel is black (make sure to only fill blank space)
                Game_Canvas[y*Win_Width+x] = color;
        }
    }
}

function colorPortraitWeap(left_pos,top_pos,class_ID,weap_color){ // original name: Yf()
    var left,top,right,bottom;

    if (left_pos<0)
         left = -left_pos;
    else left = 0;
    if (top_pos<0)
         top = -top_pos;
    else top = 0;
    if (left_pos+24>Win_Width)
         right = 24-(left_pos+24-Win_Width);
    else right = 24;
    if (top_pos+24>Win_Height)
         bottom = 24-(top_pos+24-Win_Height);
    else bottom = 24;

    for (var y=top; y<bottom; y++){
        for (var x=left; x<right; x++){
            if (Player_Img.IG_pxl_color_index[floor(24*y/24)*Player_Img.IG_width+class_ID+x]==0xFF0000)
                Game_Canvas[(top_pos+y)*Win_Width+left_pos+x] = weap_color;
        }
    }
}

function lh(a,b,c,d,e,g,k,r){ // original name: lh()
    var m = maxOf(absVal(e-a>>16),absVal(g-b>>16))+1;
    e = floor((e-a)/m);
    g = floor((g-b)/m);
    k = floor((k-c)/m);
    r = floor((r-d)/m);
    c = floor(c);
    d = floor(d);
    for (var n,F,H=0; H<m; H++,a+=e,b+=g,c+=k,d+=r){
        n = a>>16;
        F = b>>16;
        if (F>=0 && F<Win_Height){
            if (n < Layer1[F]){
                Layer1[F] = n;
                Layer3[F] = c;
                Layer5[F] = d;
            }
            if (n > Layer2[F]){
                Layer2[F] = n;
                Layer4[F] = c;
                Layer6[F] = d;
            }
        }
    }
}

// lower force = limp and droopy (zombie) higher force makes them jittery
// create force between 2 joints
function pullJoints(joint_A,joint_B,distance,B_pull_on_A,A_pull_on_B){ // original name: Y()
    var vector1 = new Vector2D;
    vector1.Vdistance(joint_A,joint_B);
    distance -= Normalize(vector1);
    B_pull_on_A *= distance;
    A_pull_on_B *= distance;
    joint_A.x += vector1.x*B_pull_on_A;
    joint_A.y += vector1.y*B_pull_on_A;
    joint_B.x -= vector1.x*A_pull_on_B;
    joint_B.y -= vector1.y*A_pull_on_B;
}

// create point
function moveJoint(current_pos,next_pos,gravity,resistance){ // original name: W()
    var next_next_pos = new Vector2D;
    next_next_pos.Vdistance(current_pos,next_pos);
    next_pos.Vset(current_pos);
    next_next_pos.y += gravity;
    scaleVector2D(next_next_pos,resistance);
    current_pos.Vadd(next_next_pos);
}

var Clicked = false;              // true on the first frame that left mouse button is pressed   original name: Ef
var Released = false;             // true on the first frame that left mouse button is Released  original name: xg
var Left_Click_Was_Down = false;  // true while left mouse button is pressed down                original name: Ug
var Left_Click_Is_Down = false;   // true while left mouse button is pressed down                original name: Nh
var Right_Click_Released = false; // true on the first frame that right mouse button is Released original name: Oh
var Right_Click_Was_Down = false; // true while right mouse button is pressed down               original name: Ph
var Right_Click_Is_Down = false;  // also true while right mouse button is pressed down          original name: Qh
var Left_Click_Is_Up = false;     // true while left mouse button is Released                    original name: Lg
var Sett_Change = 0;              // original name: $f
var Mouse_Xpos = 0;               // original name: cg
var Mouse_Ypos = 0;               // original name: fg
var Mouse_Xpos2 = 0;              // original name: Rh
var Mouse_Ypos2 = 0;              // original name: Sh
function isMouseHovered(left,top,width,height){ // original name: Wf()
    if (Mouse_Xpos<left || Mouse_Xpos>=left+width || Mouse_Ypos<top || Mouse_Ypos>=top+height)
         return false;
    else return true;
}

function isMouseHoveredCenter(x_pos,y_pos,width,height){ // original name: Df()
    var left = x_pos-(width>>1);
    var top = y_pos-(height>>1);
    return isMouseHovered(left,top,width,height);
}

function getMousePos(event){ // original name: ai()
    var rect = cv.getBoundingClientRect();
    Mouse_Xpos2 = floor(event.clientX-rect.left);
    Mouse_Ypos2 = floor(event.clientY-rect.top);
}

document.onmousemove = getMousePos;
document.onmousedown = function(event){ // original name: vh.onmousedown
    getMousePos(event);
    Mouse_In_Window = false;
    if (!(Mouse_Xpos2<0 || Win_Width<=Mouse_Xpos2 || Mouse_Ypos2<0 || Win_Height<=Mouse_Ypos2)){
        Mouse_In_Window = true;
        if (event.button==0) {
            Left_Click_Is_Down = true;
            // PlaySoundInterrupt(snd_click, false);
        }
        if (event.button==2)
            Right_Click_Is_Down = true;
        //if (Mouse_In_Window)
        return false;
    }
};

document.onmouseup = function(event){ // original name: vh.onmouseup
    getMousePos(event);
    if (event.button==0)
        Left_Click_Is_Down = false;
    if (event.button==2)
        Right_Click_Is_Down = false;
};

document.oncontextmenu = function(){ // original name: vh.oncontextmenu
    if (Mouse_In_Window)
        return false;
};

function ci(event){ // original name: ci()
    for (var b=0,c=0,d=cv; null!=d; d=d.offsetParent){
        b += d.offsetLeft;
        c += d.offsetTop;
    }
    event = event.touches;
    Mouse_Xpos2 = floor(event[0].pageX-b);
    Mouse_Ypos2 = floor(event[0].pageY-c);
}

document.ontouchstart = function(event){ // original name: vh.ontouchstart
    ci(event);
    Mouse_In_Window = Right_Click_Is_Down = Left_Click_Is_Down = false;
    if (!(Mouse_Xpos2<0 || Win_Width<=Mouse_Xpos2 || Mouse_Ypos2<0 || Win_Height<=Mouse_Ypos2)){
        Left_Click_Is_Down = Mouse_In_Window = true;
        if (event.touches.length>1)
            Right_Click_Is_Down = true;
        return false;
    }
};

document.ontouchmove = function(event){ // original name: vh.ontouchmove
    ci(event);
    if (Mouse_In_Window)
        return false;
};

document.ontouchend = function(event){ // original name: vh.ontouchend
    if (event.touches.length<1)
        Left_Click_Is_Down = false;
    Right_Click_Is_Down = false;
    if (Mouse_In_Window)
        return false;
};

document.ontouchcancel = function(){ // vh.ontouchcancel
    Right_Click_Is_Down = false;
    Left_Click_Is_Down = false;
    Mouse_In_Window = false;
};

var Arr256_1 = Array(256); // original name: Ze
var Arr256_2 = Array(256); // original name: $e
var Arr256_3 = Array(256); // original name: af
var Arr256_4 = Array(256); // original name: bf
var Arr256_5 = Array(256); // original name: cf
document.onkeydown = function(event){ // vh.onkeydown
    if (65<=event.keyCode && event.keyCode<=90){ // if key is a letter
        if (!event.shiftKey)
            event.keyCode += 32; // if not shift, make it lowercase
    } else if (event.shiftKey){
        event.keyCode = Arr256_5[event.keyCode]
    } else {
        event.keyCode = Arr256_4[event.keyCode];
    }

    if (0<=event.keyCode && event.keyCode<256){
        Arr256_3[event.keyCode] = true;
        Arr256_2[event.keyCode] = true;
    }
    if (event.keyCode!=0 && Mouse_In_Window)
        return false;
};

document.onkeyup = function(a){ // vh.onkeyup
    var b=a.keyCode;
    65<=b&90>=b?a.shiftKey||(b+=32):b=a.shiftKey?Arr256_5[b]:Arr256_4[b];
    0<=b&&256>b&&(Arr256_3[b]=!1);
    if (0!=b && Mouse_In_Window)
        return false;
};

var Mouse_In_Window = false; // original name: Mouse_In_Window
var wg = "";                 // original name: wg
var yg = new SR_Image;       // original name: yg
var Fg = Array(100);         // original name: Fg
var Eg = 0;                  // original name: Eg
var di = "POST";             // original name: di
var Ag = "&b=";              // original name: Ag
var Bg = "&c=";              // original name: Bg
var Cg = "&d=";              // original name: Cg
var Gg = "&e=";              // original name: Gg

String.fromCharCode(38,102,61);
String.fromCharCode(38,103,61);
String.fromCharCode(38,104,61);
String.fromCharCode(38,105,61);
String.fromCharCode(38,106,61);
String.fromCharCode(38,107,61);
String.fromCharCode(111,107);

var Wh = "ERROR";
var Equals_Sign = "=";
var Line_Return = String.fromCharCode(10);
var gi = "Content-Type";
var hi = "application/x-www-form-urlencoded";

function Dg(a){ // original name: Dg()
    Eg = 0;
    for (var b=0; b<100; b++)
        Fg[b] = "";

    try {
        var xhr = new XMLHttpRequest;
        xhr.onreadystatechange = function(){
            if (xhr.readyState==4 && xhr.status==200){ // 200 is "OK"
                var a;
                var result_text;
                var d = 0;
                var r = xhr.responseText.length;
                for (var a=0; a<r; a++){ // for every character in the response string...
                    result_text = xhr.responseText[a];
                    if (result_text==Equals_Sign){ // set result_text to responseText at current position. If it's an equals...
                        for (a+=1; a<r; a++){ // add the
                            result_text = xhr.responseText[a];
                            if (result_text==Line_Return)
                                break;
                            Fg[d] += result_text;
                        }
                        d++;
                    } else {
                        for (; a<r && xhr.responseText[a]!=Line_Return; a++);
                    }
                }
                Eg = 1;
            } else {
                Eg = -1;
            }
        };
        xhr.open(di,a,true);
        xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
        xhr.send("");
    }
    catch(d){
        Eg = -2;
    }
}

function Vector2D(){ // original name: Qg()
    this.y = 0;
    this.x = 0;
}

Vector2D.prototype.Vset = function(vec1){ // Qg.prototype.set
    this.x = vec1.x;
    this.y = vec1.y;
    return this;
};

function assignVector2D(vec1,Xval,Yval){ // original name: Rg()
    vec1.x = Xval;
    vec1.y = Yval;
}

Vector2D.prototype.Vadd = function(vec1){ // Qg.prototype.add
    this.x += vec1.x;
    this.y += vec1.y;
    return this;
};

function sumVector2D(vec1,vec2,vec3){ // original name: eh()
    vec1.x = vec2.x+vec3.x;
    vec1.y = vec2.y+vec3.y;
}

Vector2D.prototype.Vsub = function(vec1){ // Qg.prototype.sub
    this.x -= vec1.x;
    this.y -= vec1.y;
    return this;
};

Vector2D.prototype.Vdistance = function(vec1,vec2){ // Qg.prototype.q
    this.x = vec1.x-vec2.x;
    this.y = vec1.y-vec2.y;
    return this;
};

function scaleVector2D(vec1,scaler){ // original name: Tg()
    vec1.x *= scaler;
    vec1.y *= scaler;
}

function getPerpendicular(vec1){ // original name: dh()
    var xcomp = vec1.x;

    vec1.x = vec1.y;
    vec1.y = -xcomp;
}

function magnitudeOf(vec1){ // original name: Sg()
    return Math.sqrt(vec1.x*vec1.x+vec1.y*vec1.y);
}

function Normalize(vec1){ // original name: Xg()
    var magnitude1 = magnitudeOf(vec1);

    if (magnitude1==0)
        return 0;

    vec1.x = vec1.x/magnitude1;
    vec1.y = vec1.y/magnitude1;

    return magnitude1;
}

function angleToXAxis(vec1){ // original name: Vg()
    var b = Math.acos(vec1.x/Math.sqrt(vec1.x*vec1.x+vec1.y*vec1.y));

    if (vec1.y > 0)
        b = TwoPi-b;

    return b;
}

var Rand_Arr_Df = new Float32Array(1024); // original name: df
var Rand_EF = 0; // original name: ef
var Rand_FF = 0; // original name: ff
function random(num1){ // original name: A()
    Rand_EF += Rand_FF;
    Rand_EF &= 1023;
    return Rand_Arr_Df[Rand_EF]*num1;
}

function randomRange(minimum,maximum){ // original name: N()
    Rand_EF = Rand_EF+Rand_FF;
    Rand_EF &= 1023;
    return Rand_Arr_Df[Rand_EF]*(maximum-minimum)+minimum;
}

function fiftyfifty(num1,num2){ // original name: Kf()
    Rand_EF = Rand_EF+Rand_FF;
    Rand_EF &= 1023;

    if (Rand_Arr_Df[Rand_EF]<0.5)
         return num1;
    else return num2;
}

function randInt(num1){ // original name: $g()
    Rand_EF += Rand_FF;
    Rand_EF &= 1023;
    return~~(Rand_Arr_Df[Rand_EF]*num1); // ~~() is floor()
}

var Xe = Array(513);   // original name: Xe
var Pi = 3.1415927;    // original name: Ye
var TwoPi = 6.2831855; // original name: Wg

function absVal(num1){ // original name: Kg()
    if (num1<0)
         return -num1;
    else return num1;
}

// returns the higher value (return b if they are equal) original name: ig()
function maxOf(num1,num2){
    if (num1 > num2)
         return num1;
    else return num2;
}

// keeps value within parameters original name: K()
function clamp(value,minimum,maximum){
    if (value < minimum)
         return minimum;
    else if (value > maximum)
         return maximum;
    else return value;
}

// used to cycle when scrolling through settings and lists original name: Zf()
function cycle(next,first,last){
    if (next < first)
         return last;
    else if (next > last)
         return first;
    else return next;
}

// truncates decimals original name: z()
function floor(number){
    return Math.floor(number);
};

// gets the first stickman on the team (PvE team or PvP team)
function getLeader(stickman_ID,team){
    var leader;
    if (team==0) // if looking for friendly team leader
        leader = floor(stickman_ID/Stickmen_Slots)*Stickmen_Slots
    if (team==1) // if looking for opponent team leader
        leader = (1-floor(stickman_ID/Stickmen_Slots))*Stickmen_Slots

    return leader;
}

function PlaySound(a, b) {
	if (!a.playing) {
			a.loop = b;
			a.play();
			a.playing = true;
		}
}

function PlaySoundSFX(a, b) {
	if (!a.playing && sfxEnabled) {
			a.loop = b,
			a.play();
		}
}

function PlaySoundInterrupt(a, b) {
	stop(a);
	if (sfxEnabled)
	a.loop = b, a.play(), a.playing = true;
}

function stop(a) {
	a.pause();
	a.currentTime = 0;
	a.playing = false;
}

function StopLevelBGM() {
  for(i=0; i<LevelBGM.length; i++) stop(LevelBGM[i]);
}

function ChangeBGM(a) {
	if (!a.playing) {
			StopLevelBGM();
			PlaySound(a, true);
		}
}

function RegisterLevelBGM(a) {
	LevelBGM.push(a);
}